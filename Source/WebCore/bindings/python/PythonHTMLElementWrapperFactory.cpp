/*
 * THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 *
 * Copyright (C) 2005 Apple Computer, Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */


#include <Python.h>
#include "config.h"

#include "PythonHTMLElementWrapperFactory.h"

#include "HTMLNames.h"

#include "HTMLAnchorElement.h"
#include "HTMLElement.h"
#include "HTMLAppletElement.h"
#include "HTMLAreaElement.h"
#include "HTMLAudioElement.h"
#include "HTMLBaseElement.h"
#include "HTMLBaseFontElement.h"
#include "HTMLBlockquoteElement.h"
#include "HTMLBodyElement.h"
#include "HTMLBRElement.h"
#include "HTMLButtonElement.h"
#include "HTMLCanvasElement.h"
#include "HTMLTableCaptionElement.h"
#include "HTMLTableColElement.h"
#include "HTMLDataListElement.h"
#include "HTMLModElement.h"
#include "HTMLDirectoryElement.h"
#include "HTMLDivElement.h"
#include "HTMLDListElement.h"
#include "HTMLEmbedElement.h"
#include "HTMLFieldSetElement.h"
#include "HTMLFontElement.h"
#include "HTMLFormElement.h"
#include "HTMLFrameElement.h"
#include "HTMLFrameSetElement.h"
#include "HTMLHeadingElement.h"
#include "HTMLHeadElement.h"
#include "HTMLHRElement.h"
#include "HTMLHtmlElement.h"
#include "HTMLIFrameElement.h"
#include "HTMLImageElement.h"
#include "HTMLInputElement.h"
#include "HTMLIsIndexElement.h"
#include "HTMLKeygenElement.h"
#include "HTMLLabelElement.h"
#include "HTMLLegendElement.h"
#include "HTMLLIElement.h"
#include "HTMLLinkElement.h"
#include "HTMLPreElement.h"
#include "HTMLMapElement.h"
#include "HTMLMarqueeElement.h"
#include "HTMLMenuElement.h"
#include "HTMLMetaElement.h"
#include "HTMLObjectElement.h"
#include "HTMLOListElement.h"
#include "HTMLOptGroupElement.h"
#include "HTMLOptionElement.h"
#include "HTMLParagraphElement.h"
#include "HTMLParamElement.h"
#include "HTMLProgressElement.h"
#include "HTMLQuoteElement.h"
#include "HTMLScriptElement.h"
#include "HTMLSelectElement.h"
#include "HTMLSourceElement.h"
#include "HTMLStyleElement.h"
#include "HTMLTableElement.h"
#include "HTMLTableSectionElement.h"
#include "HTMLTableCellElement.h"
#include "HTMLTextAreaElement.h"
#include "HTMLTitleElement.h"
#include "HTMLTableRowElement.h"
#include "HTMLUListElement.h"
#include "HTMLVideoElement.h"
PyObject* pywrapHTMLAnchorElement(WebCore::HTMLAnchorElement*);
PyObject* pywrapHTMLAppletElement(WebCore::HTMLAppletElement*);
PyObject* pywrapHTMLAreaElement(WebCore::HTMLAreaElement*);
#if ENABLE(VIDEO)
PyObject* pywrapHTMLAudioElement(WebCore::HTMLAudioElement*);
#endif

PyObject* pywrapHTMLBaseElement(WebCore::HTMLBaseElement*);
PyObject* pywrapHTMLBaseFontElement(WebCore::HTMLBaseFontElement*);
PyObject* pywrapHTMLBlockquoteElement(WebCore::HTMLBlockquoteElement*);
PyObject* pywrapHTMLBodyElement(WebCore::HTMLBodyElement*);
PyObject* pywrapHTMLBRElement(WebCore::HTMLBRElement*);
PyObject* pywrapHTMLButtonElement(WebCore::HTMLButtonElement*);
PyObject* pywrapHTMLCanvasElement(WebCore::HTMLCanvasElement*);
PyObject* pywrapHTMLTableCaptionElement(WebCore::HTMLTableCaptionElement*);
PyObject* pywrapHTMLTableColElement(WebCore::HTMLTableColElement*);
#if ENABLE(DATALIST)
PyObject* pywrapHTMLDataListElement(WebCore::HTMLDataListElement*);
#endif

PyObject* pywrapHTMLModElement(WebCore::HTMLModElement*);
PyObject* pywrapHTMLDirectoryElement(WebCore::HTMLDirectoryElement*);
PyObject* pywrapHTMLDivElement(WebCore::HTMLDivElement*);
PyObject* pywrapHTMLDListElement(WebCore::HTMLDListElement*);
PyObject* pywrapHTMLEmbedElement(WebCore::HTMLEmbedElement*);
PyObject* pywrapHTMLFieldSetElement(WebCore::HTMLFieldSetElement*);
PyObject* pywrapHTMLFontElement(WebCore::HTMLFontElement*);
PyObject* pywrapHTMLFormElement(WebCore::HTMLFormElement*);
PyObject* pywrapHTMLFrameElement(WebCore::HTMLFrameElement*);
PyObject* pywrapHTMLFrameSetElement(WebCore::HTMLFrameSetElement*);
PyObject* pywrapHTMLHeadingElement(WebCore::HTMLHeadingElement*);
PyObject* pywrapHTMLHeadElement(WebCore::HTMLHeadElement*);
PyObject* pywrapHTMLHRElement(WebCore::HTMLHRElement*);
PyObject* pywrapHTMLHtmlElement(WebCore::HTMLHtmlElement*);
PyObject* pywrapHTMLIFrameElement(WebCore::HTMLIFrameElement*);
PyObject* pywrapHTMLImageElement(WebCore::HTMLImageElement*);
PyObject* pywrapHTMLInputElement(WebCore::HTMLInputElement*);
PyObject* pywrapHTMLIsIndexElement(WebCore::HTMLIsIndexElement*);
PyObject* pywrapHTMLSelectElement(WebCore::HTMLSelectElement*);
PyObject* pywrapHTMLLabelElement(WebCore::HTMLLabelElement*);
PyObject* pywrapHTMLLegendElement(WebCore::HTMLLegendElement*);
PyObject* pywrapHTMLLIElement(WebCore::HTMLLIElement*);
PyObject* pywrapHTMLLinkElement(WebCore::HTMLLinkElement*);
PyObject* pywrapHTMLPreElement(WebCore::HTMLPreElement*);
PyObject* pywrapHTMLMapElement(WebCore::HTMLMapElement*);
PyObject* pywrapHTMLMarqueeElement(WebCore::HTMLMarqueeElement*);
PyObject* pywrapHTMLMenuElement(WebCore::HTMLMenuElement*);
PyObject* pywrapHTMLMetaElement(WebCore::HTMLMetaElement*);

PyObject* pywrapHTMLObjectElement(WebCore::HTMLObjectElement*);
PyObject* pywrapHTMLOListElement(WebCore::HTMLOListElement*);
PyObject* pywrapHTMLOptGroupElement(WebCore::HTMLOptGroupElement*);
PyObject* pywrapHTMLOptionElement(WebCore::HTMLOptionElement*);
PyObject* pywrapHTMLParagraphElement(WebCore::HTMLParagraphElement*);
PyObject* pywrapHTMLParamElement(WebCore::HTMLParamElement*);
#if ENABLE(PROGRESS_TAG)
PyObject* pywrapHTMLProgressElement(WebCore::HTMLProgressElement*);
#endif

PyObject* pywrapHTMLQuoteElement(WebCore::HTMLQuoteElement*);
PyObject* pywrapHTMLScriptElement(WebCore::HTMLScriptElement*);
#if ENABLE(VIDEO)
PyObject* pywrapHTMLSourceElement(WebCore::HTMLSourceElement*);
#endif

PyObject* pywrapHTMLStyleElement(WebCore::HTMLStyleElement*);
PyObject* pywrapHTMLTableElement(WebCore::HTMLTableElement*);
PyObject* pywrapHTMLTableSectionElement(WebCore::HTMLTableSectionElement*);
PyObject* pywrapHTMLTableCellElement(WebCore::HTMLTableCellElement*);
PyObject* pywrapHTMLTextAreaElement(WebCore::HTMLTextAreaElement*);
PyObject* pywrapHTMLTitleElement(WebCore::HTMLTitleElement*);
PyObject* pywrapHTMLTableRowElement(WebCore::HTMLTableRowElement*);
PyObject* pywrapHTMLUListElement(WebCore::HTMLUListElement*);
#if ENABLE(VIDEO)
PyObject* pywrapHTMLVideoElement(WebCore::HTMLVideoElement*);
#endif


#include <wtf/StdLibExtras.h>


#include <wtf/HashMap.h>

#include "CString.h"


#include "WebkitCSSRuleCustom.cpp"

namespace WebKit {

using namespace WebCore;
using namespace WebCore::HTMLNames;

typedef PyObject* (*CreateHTMLElementWrapperFunction)(PassRefPtr<HTMLElement>);

PyObject* pywrapHTMLAnchorElement(HTMLAnchorElement*);

static PyObject* createHTMLAnchorElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLAnchorElement(static_cast<HTMLAnchorElement*>(element.get()));
}

PyObject* pywrapHTMLAppletElement(HTMLAppletElement*);

static PyObject* createHTMLAppletElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLAppletElement(static_cast<HTMLAppletElement*>(element.get()));
}

PyObject* pywrapHTMLAreaElement(HTMLAreaElement*);

static PyObject* createHTMLAreaElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLAreaElement(static_cast<HTMLAreaElement*>(element.get()));
}

#if ENABLE(VIDEO)

PyObject* pywrapHTMLAudioElement(HTMLAudioElement*);

static PyObject* createHTMLAudioElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLAudioElement(static_cast<HTMLAudioElement*>(element.get()));
}

#endif

PyObject* pywrapHTMLBaseElement(HTMLBaseElement*);

static PyObject* createHTMLBaseElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLBaseElement(static_cast<HTMLBaseElement*>(element.get()));
}

PyObject* pywrapHTMLBaseFontElement(HTMLBaseFontElement*);

static PyObject* createHTMLBaseFontElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLBaseFontElement(static_cast<HTMLBaseFontElement*>(element.get()));
}

PyObject* pywrapHTMLBlockquoteElement(HTMLBlockquoteElement*);

static PyObject* createHTMLBlockquoteElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLBlockquoteElement(static_cast<HTMLBlockquoteElement*>(element.get()));
}

PyObject* pywrapHTMLBodyElement(HTMLBodyElement*);

static PyObject* createHTMLBodyElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLBodyElement(static_cast<HTMLBodyElement*>(element.get()));
}

PyObject* pywrapHTMLBRElement(HTMLBRElement*);

static PyObject* createHTMLBRElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLBRElement(static_cast<HTMLBRElement*>(element.get()));
}

PyObject* pywrapHTMLButtonElement(HTMLButtonElement*);

static PyObject* createHTMLButtonElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLButtonElement(static_cast<HTMLButtonElement*>(element.get()));
}

PyObject* pywrapHTMLCanvasElement(HTMLCanvasElement*);

static PyObject* createHTMLCanvasElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLCanvasElement(static_cast<HTMLCanvasElement*>(element.get()));
}

PyObject* pywrapHTMLTableCaptionElement(HTMLTableCaptionElement*);

static PyObject* createHTMLTableCaptionElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLTableCaptionElement(static_cast<HTMLTableCaptionElement*>(element.get()));
}

PyObject* pywrapHTMLTableColElement(HTMLTableColElement*);

static PyObject* createHTMLTableColElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLTableColElement(static_cast<HTMLTableColElement*>(element.get()));
}

#if ENABLE(DATALIST)

PyObject* pywrapHTMLDataListElement(HTMLDataListElement*);

static PyObject* createHTMLDataListElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLDataListElement(static_cast<HTMLDataListElement*>(element.get()));
}

#endif

PyObject* pywrapHTMLModElement(HTMLModElement*);

static PyObject* createHTMLModElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLModElement(static_cast<HTMLModElement*>(element.get()));
}

PyObject* pywrapHTMLDirectoryElement(HTMLDirectoryElement*);

static PyObject* createHTMLDirectoryElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLDirectoryElement(static_cast<HTMLDirectoryElement*>(element.get()));
}

PyObject* pywrapHTMLDivElement(HTMLDivElement*);

static PyObject* createHTMLDivElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLDivElement(static_cast<HTMLDivElement*>(element.get()));
}

PyObject* pywrapHTMLDListElement(HTMLDListElement*);

static PyObject* createHTMLDListElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLDListElement(static_cast<HTMLDListElement*>(element.get()));
}

PyObject* pywrapHTMLEmbedElement(HTMLEmbedElement*);

static PyObject* createHTMLEmbedElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLEmbedElement(static_cast<HTMLEmbedElement*>(element.get()));
}

PyObject* pywrapHTMLFieldSetElement(HTMLFieldSetElement*);

static PyObject* createHTMLFieldSetElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLFieldSetElement(static_cast<HTMLFieldSetElement*>(element.get()));
}

PyObject* pywrapHTMLFontElement(HTMLFontElement*);

static PyObject* createHTMLFontElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLFontElement(static_cast<HTMLFontElement*>(element.get()));
}

PyObject* pywrapHTMLFormElement(HTMLFormElement*);

static PyObject* createHTMLFormElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLFormElement(static_cast<HTMLFormElement*>(element.get()));
}

PyObject* pywrapHTMLFrameElement(HTMLFrameElement*);

static PyObject* createHTMLFrameElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLFrameElement(static_cast<HTMLFrameElement*>(element.get()));
}

PyObject* pywrapHTMLFrameSetElement(HTMLFrameSetElement*);

static PyObject* createHTMLFrameSetElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLFrameSetElement(static_cast<HTMLFrameSetElement*>(element.get()));
}

PyObject* pywrapHTMLHeadingElement(HTMLHeadingElement*);

static PyObject* createHTMLHeadingElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLHeadingElement(static_cast<HTMLHeadingElement*>(element.get()));
}

PyObject* pywrapHTMLHeadElement(HTMLHeadElement*);

static PyObject* createHTMLHeadElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLHeadElement(static_cast<HTMLHeadElement*>(element.get()));
}

PyObject* pywrapHTMLHRElement(HTMLHRElement*);

static PyObject* createHTMLHRElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLHRElement(static_cast<HTMLHRElement*>(element.get()));
}

PyObject* pywrapHTMLHtmlElement(HTMLHtmlElement*);

static PyObject* createHTMLHtmlElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLHtmlElement(static_cast<HTMLHtmlElement*>(element.get()));
}

PyObject* pywrapHTMLIFrameElement(HTMLIFrameElement*);

static PyObject* createHTMLIFrameElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLIFrameElement(static_cast<HTMLIFrameElement*>(element.get()));
}

PyObject* pywrapHTMLImageElement(HTMLImageElement*);

static PyObject* createHTMLImageElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLImageElement(static_cast<HTMLImageElement*>(element.get()));
}

PyObject* pywrapHTMLInputElement(HTMLInputElement*);

static PyObject* createHTMLInputElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLInputElement(static_cast<HTMLInputElement*>(element.get()));
}

PyObject* pywrapHTMLIsIndexElement(HTMLIsIndexElement*);

static PyObject* createHTMLIsIndexElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLIsIndexElement(static_cast<HTMLIsIndexElement*>(element.get()));
}

PyObject* pywrapHTMLSelectElement(HTMLSelectElement*);

static PyObject* createHTMLSelectElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLSelectElement(static_cast<HTMLSelectElement*>(element.get()));
}

PyObject* pywrapHTMLLabelElement(HTMLLabelElement*);

static PyObject* createHTMLLabelElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLLabelElement(static_cast<HTMLLabelElement*>(element.get()));
}

PyObject* pywrapHTMLLegendElement(HTMLLegendElement*);

static PyObject* createHTMLLegendElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLLegendElement(static_cast<HTMLLegendElement*>(element.get()));
}

PyObject* pywrapHTMLLIElement(HTMLLIElement*);

static PyObject* createHTMLLIElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLLIElement(static_cast<HTMLLIElement*>(element.get()));
}

PyObject* pywrapHTMLLinkElement(HTMLLinkElement*);

static PyObject* createHTMLLinkElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLLinkElement(static_cast<HTMLLinkElement*>(element.get()));
}

PyObject* pywrapHTMLPreElement(HTMLPreElement*);

static PyObject* createHTMLPreElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLPreElement(static_cast<HTMLPreElement*>(element.get()));
}

PyObject* pywrapHTMLMapElement(HTMLMapElement*);

static PyObject* createHTMLMapElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLMapElement(static_cast<HTMLMapElement*>(element.get()));
}

PyObject* pywrapHTMLMarqueeElement(HTMLMarqueeElement*);

static PyObject* createHTMLMarqueeElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLMarqueeElement(static_cast<HTMLMarqueeElement*>(element.get()));
}

PyObject* pywrapHTMLMenuElement(HTMLMenuElement*);

static PyObject* createHTMLMenuElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLMenuElement(static_cast<HTMLMenuElement*>(element.get()));
}

PyObject* pywrapHTMLMetaElement(HTMLMetaElement*);

static PyObject* createHTMLMetaElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLMetaElement(static_cast<HTMLMetaElement*>(element.get()));
}

PyObject* pywrapHTMLObjectElement(HTMLObjectElement*);

static PyObject* createHTMLObjectElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLObjectElement(static_cast<HTMLObjectElement*>(element.get()));
}

PyObject* pywrapHTMLOListElement(HTMLOListElement*);

static PyObject* createHTMLOListElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLOListElement(static_cast<HTMLOListElement*>(element.get()));
}

PyObject* pywrapHTMLOptGroupElement(HTMLOptGroupElement*);

static PyObject* createHTMLOptGroupElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLOptGroupElement(static_cast<HTMLOptGroupElement*>(element.get()));
}

PyObject* pywrapHTMLOptionElement(HTMLOptionElement*);

static PyObject* createHTMLOptionElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLOptionElement(static_cast<HTMLOptionElement*>(element.get()));
}

PyObject* pywrapHTMLParagraphElement(HTMLParagraphElement*);

static PyObject* createHTMLParagraphElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLParagraphElement(static_cast<HTMLParagraphElement*>(element.get()));
}

PyObject* pywrapHTMLParamElement(HTMLParamElement*);

static PyObject* createHTMLParamElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLParamElement(static_cast<HTMLParamElement*>(element.get()));
}

#if ENABLE(PROGRESS_TAG)

PyObject* pywrapHTMLProgressElement(HTMLProgressElement*);

static PyObject* createHTMLProgressElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLProgressElement(static_cast<HTMLProgressElement*>(element.get()));
}

#endif

PyObject* pywrapHTMLQuoteElement(HTMLQuoteElement*);

static PyObject* createHTMLQuoteElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLQuoteElement(static_cast<HTMLQuoteElement*>(element.get()));
}

PyObject* pywrapHTMLScriptElement(HTMLScriptElement*);

static PyObject* createHTMLScriptElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLScriptElement(static_cast<HTMLScriptElement*>(element.get()));
}

#if ENABLE(VIDEO)

PyObject* pywrapHTMLSourceElement(HTMLSourceElement*);

static PyObject* createHTMLSourceElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLSourceElement(static_cast<HTMLSourceElement*>(element.get()));
}

#endif

PyObject* pywrapHTMLStyleElement(HTMLStyleElement*);

static PyObject* createHTMLStyleElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLStyleElement(static_cast<HTMLStyleElement*>(element.get()));
}

PyObject* pywrapHTMLTableElement(HTMLTableElement*);

static PyObject* createHTMLTableElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLTableElement(static_cast<HTMLTableElement*>(element.get()));
}

PyObject* pywrapHTMLTableSectionElement(HTMLTableSectionElement*);

static PyObject* createHTMLTableSectionElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLTableSectionElement(static_cast<HTMLTableSectionElement*>(element.get()));
}

PyObject* pywrapHTMLTableCellElement(HTMLTableCellElement*);

static PyObject* createHTMLTableCellElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLTableCellElement(static_cast<HTMLTableCellElement*>(element.get()));
}

PyObject* pywrapHTMLTextAreaElement(HTMLTextAreaElement*);

static PyObject* createHTMLTextAreaElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLTextAreaElement(static_cast<HTMLTextAreaElement*>(element.get()));
}

PyObject* pywrapHTMLTitleElement(HTMLTitleElement*);

static PyObject* createHTMLTitleElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLTitleElement(static_cast<HTMLTitleElement*>(element.get()));
}

PyObject* pywrapHTMLTableRowElement(HTMLTableRowElement*);

static PyObject* createHTMLTableRowElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLTableRowElement(static_cast<HTMLTableRowElement*>(element.get()));
}

PyObject* pywrapHTMLUListElement(HTMLUListElement*);

static PyObject* createHTMLUListElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLUListElement(static_cast<HTMLUListElement*>(element.get()));
}

#if ENABLE(VIDEO)

PyObject* pywrapHTMLVideoElement(HTMLVideoElement*);

static PyObject* createHTMLVideoElementWrapper(PassRefPtr<HTMLElement> element)
{
    return pywrapHTMLVideoElement(static_cast<HTMLVideoElement*>(element.get()));
}

#endif

PyObject* pywrapHTMLElement(HTMLElement*);
PyObject* createPythonHTMLElementWrapper(PassRefPtr<WebCore::HTMLElement> element)
{   
    static HashMap<AtomicStringImpl*, CreateHTMLElementWrapperFunction> map;
    if (map.isEmpty()) {
       map.set(aTag.localName().impl(), createHTMLAnchorElementWrapper);
       map.set(appletTag.localName().impl(), createHTMLAppletElementWrapper);
       map.set(areaTag.localName().impl(), createHTMLAreaElementWrapper);
#if ENABLE(VIDEO)
       map.set(audioTag.localName().impl(), createHTMLAudioElementWrapper);
#endif
       map.set(baseTag.localName().impl(), createHTMLBaseElementWrapper);
       map.set(basefontTag.localName().impl(), createHTMLBaseFontElementWrapper);
       map.set(blockquoteTag.localName().impl(), createHTMLBlockquoteElementWrapper);
       map.set(bodyTag.localName().impl(), createHTMLBodyElementWrapper);
       map.set(brTag.localName().impl(), createHTMLBRElementWrapper);
       map.set(buttonTag.localName().impl(), createHTMLButtonElementWrapper);
       map.set(canvasTag.localName().impl(), createHTMLCanvasElementWrapper);
       map.set(captionTag.localName().impl(), createHTMLTableCaptionElementWrapper);
       map.set(colTag.localName().impl(), createHTMLTableColElementWrapper);
       map.set(colgroupTag.localName().impl(), createHTMLTableColElementWrapper);
#if ENABLE(DATALIST)
       map.set(datalistTag.localName().impl(), createHTMLDataListElementWrapper);
#endif
       map.set(delTag.localName().impl(), createHTMLModElementWrapper);
       map.set(dirTag.localName().impl(), createHTMLDirectoryElementWrapper);
       map.set(divTag.localName().impl(), createHTMLDivElementWrapper);
       map.set(dlTag.localName().impl(), createHTMLDListElementWrapper);
       map.set(embedTag.localName().impl(), createHTMLEmbedElementWrapper);
       map.set(fieldsetTag.localName().impl(), createHTMLFieldSetElementWrapper);
       map.set(fontTag.localName().impl(), createHTMLFontElementWrapper);
       map.set(formTag.localName().impl(), createHTMLFormElementWrapper);
       map.set(frameTag.localName().impl(), createHTMLFrameElementWrapper);
       map.set(framesetTag.localName().impl(), createHTMLFrameSetElementWrapper);
       map.set(h1Tag.localName().impl(), createHTMLHeadingElementWrapper);
       map.set(h2Tag.localName().impl(), createHTMLHeadingElementWrapper);
       map.set(h3Tag.localName().impl(), createHTMLHeadingElementWrapper);
       map.set(h4Tag.localName().impl(), createHTMLHeadingElementWrapper);
       map.set(h5Tag.localName().impl(), createHTMLHeadingElementWrapper);
       map.set(h6Tag.localName().impl(), createHTMLHeadingElementWrapper);
       map.set(headTag.localName().impl(), createHTMLHeadElementWrapper);
       map.set(hrTag.localName().impl(), createHTMLHRElementWrapper);
       map.set(htmlTag.localName().impl(), createHTMLHtmlElementWrapper);
       map.set(iframeTag.localName().impl(), createHTMLIFrameElementWrapper);
       map.set(imageTag.localName().impl(), createHTMLImageElementWrapper);
       map.set(imgTag.localName().impl(), createHTMLImageElementWrapper);
       map.set(inputTag.localName().impl(), createHTMLInputElementWrapper);
       map.set(insTag.localName().impl(), createHTMLModElementWrapper);
       map.set(isindexTag.localName().impl(), createHTMLIsIndexElementWrapper);
       map.set(keygenTag.localName().impl(), createHTMLSelectElementWrapper);
       map.set(labelTag.localName().impl(), createHTMLLabelElementWrapper);
       map.set(legendTag.localName().impl(), createHTMLLegendElementWrapper);
       map.set(liTag.localName().impl(), createHTMLLIElementWrapper);
       map.set(linkTag.localName().impl(), createHTMLLinkElementWrapper);
       map.set(listingTag.localName().impl(), createHTMLPreElementWrapper);
       map.set(mapTag.localName().impl(), createHTMLMapElementWrapper);
       map.set(marqueeTag.localName().impl(), createHTMLMarqueeElementWrapper);
       map.set(menuTag.localName().impl(), createHTMLMenuElementWrapper);
       map.set(metaTag.localName().impl(), createHTMLMetaElementWrapper);
       map.set(objectTag.localName().impl(), createHTMLObjectElementWrapper);
       map.set(olTag.localName().impl(), createHTMLOListElementWrapper);
       map.set(optgroupTag.localName().impl(), createHTMLOptGroupElementWrapper);
       map.set(optionTag.localName().impl(), createHTMLOptionElementWrapper);
       map.set(pTag.localName().impl(), createHTMLParagraphElementWrapper);
       map.set(paramTag.localName().impl(), createHTMLParamElementWrapper);
       map.set(preTag.localName().impl(), createHTMLPreElementWrapper);
#if ENABLE(PROGRESS_TAG)
       map.set(progressTag.localName().impl(), createHTMLProgressElementWrapper);
#endif
       map.set(qTag.localName().impl(), createHTMLQuoteElementWrapper);
       map.set(scriptTag.localName().impl(), createHTMLScriptElementWrapper);
       map.set(selectTag.localName().impl(), createHTMLSelectElementWrapper);
#if ENABLE(VIDEO)
       map.set(sourceTag.localName().impl(), createHTMLSourceElementWrapper);
#endif
       map.set(styleTag.localName().impl(), createHTMLStyleElementWrapper);
       map.set(tableTag.localName().impl(), createHTMLTableElementWrapper);
       map.set(tbodyTag.localName().impl(), createHTMLTableSectionElementWrapper);
       map.set(tdTag.localName().impl(), createHTMLTableCellElementWrapper);
       map.set(textareaTag.localName().impl(), createHTMLTextAreaElementWrapper);
       map.set(tfootTag.localName().impl(), createHTMLTableSectionElementWrapper);
       map.set(thTag.localName().impl(), createHTMLTableCellElementWrapper);
       map.set(theadTag.localName().impl(), createHTMLTableSectionElementWrapper);
       map.set(titleTag.localName().impl(), createHTMLTitleElementWrapper);
       map.set(trTag.localName().impl(), createHTMLTableRowElementWrapper);
       map.set(ulTag.localName().impl(), createHTMLUListElementWrapper);
#if ENABLE(VIDEO)
       map.set(videoTag.localName().impl(), createHTMLVideoElementWrapper);
#endif
       map.set(xmpTag.localName().impl(), createHTMLPreElementWrapper);
    }
    CreateHTMLElementWrapperFunction createWrapperFunction =
        map.get(element->localName().impl());
    if (createWrapperFunction)
        return createWrapperFunction(element);
    return pywrapHTMLElement(element.get());
}

}

