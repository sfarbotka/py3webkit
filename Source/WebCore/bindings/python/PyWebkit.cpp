/* -- THIS FILE IS GENERATED - DO NOT EDIT *//* -*- Mode: C; c-basic-offset: 4 -*- */

#include <Python.h>
#include "config.h"


#include "HTMLNames.h"


#include "KURL.h"


#include "PlatformString.h"


#include "PythonBinding.h"


#include "pywebkit.h"


#include <wtf/text/CString.h>


#include <wtf/Forward.h>
#include <wtf/PassRefPtr.h>

char* cpUTF8(WTF::String const& s) { return strdup((s.utf8().data())); }
char* cpUTF8(WebCore::KURL const& s) { return strdup((s.string().utf8().data())); }

#include <Python.h>


/* ---------- types from other modules ---------- */


/* ---------- includes ---------- */
#include "Attr.h"
#include "BeforeLoadEvent.h"
#include "BeforeProcessEvent.h"
#include "CDATASection.h"
#include "CharacterData.h"
#include "ClientRect.h"
#include "ClientRectList.h"
#include "Comment.h"
#include "CompositionEvent.h"
#include "CustomEvent.h"
#include "DocumentFragment.h"
#include "Document.h"
#include "DocumentType.h"
#include "DOMCoreException.h"
#include "DOMImplementation.h"
#include "DOMStringList.h"
#include "DOMStringMap.h"
#include "Element.h"
#include "Entity.h"
#include "EntityReference.h"
#include "ErrorEvent.h"
#include "EventException.h"
#include "Event.h"
#include "EventListener.h"
#include "EventTarget.h"
#include "HashChangeEvent.h"
#include "KeyboardEvent.h"
#include "MessageChannel.h"
#include "MessageEvent.h"
#include "MessagePort.h"
#include "MouseEvent.h"
#include "MutationEvent.h"
#include "NamedNodeMap.h"
#include "NodeFilter.h"
#include "Node.h"
#include "NodeIterator.h"
#include "NodeList.h"
#include "Notation.h"
#include "OverflowEvent.h"
#include "PageTransitionEvent.h"
#include "PopStateEvent.h"
#include "ProcessingInstruction.h"
#include "ProgressEvent.h"
#include "RangeException.h"
#include "Range.h"
#include "TextEvent.h"
#include "Text.h"
#include "TreeWalker.h"
#include "UIEvent.h"
#include "WebKitAnimationEvent.h"
#include "WebKitTransitionEvent.h"
#include "WheelEvent.h"
#include "DOMFormData.h"
#include "HTMLAllCollection.h"
#include "HTMLAnchorElement.h"
#include "HTMLAppletElement.h"
#include "HTMLAreaElement.h"
#include "HTMLAudioElement.h"
#include "HTMLBaseElement.h"
#include "HTMLBaseFontElement.h"
#include "HTMLBlockquoteElement.h"
#include "HTMLBodyElement.h"
#include "HTMLBRElement.h"
#include "HTMLButtonElement.h"
#include "HTMLCanvasElement.h"
#include "HTMLCollection.h"
#include "HTMLDataListElement.h"
#include "HTMLDirectoryElement.h"
#include "HTMLDivElement.h"
#include "HTMLDListElement.h"
#include "HTMLDocument.h"
#include "HTMLElement.h"
#include "HTMLEmbedElement.h"
#include "HTMLFieldSetElement.h"
#include "HTMLFontElement.h"
#include "HTMLFormElement.h"
#include "HTMLFrameElement.h"
#include "HTMLFrameSetElement.h"
#include "HTMLHeadElement.h"
#include "HTMLHeadingElement.h"
#include "HTMLHRElement.h"
#include "HTMLHtmlElement.h"
#include "HTMLIFrameElement.h"
#include "HTMLImageElement.h"
#include "HTMLInputElement.h"
#include "HTMLIsIndexElement.h"
#include "HTMLLabelElement.h"
#include "HTMLLegendElement.h"
#include "HTMLLIElement.h"
#include "HTMLLinkElement.h"
#include "HTMLMapElement.h"
#include "HTMLMarqueeElement.h"
#include "HTMLMediaElement.h"
#include "HTMLMenuElement.h"
#include "HTMLMetaElement.h"
#include "HTMLModElement.h"
#include "HTMLObjectElement.h"
#include "HTMLOListElement.h"
#include "HTMLOptGroupElement.h"
#include "HTMLOptionElement.h"
#include "HTMLOptionsCollection.h"
#include "HTMLParagraphElement.h"
#include "HTMLParamElement.h"
#include "HTMLPreElement.h"
#include "HTMLProgressElement.h"
#include "HTMLQuoteElement.h"
#include "HTMLScriptElement.h"
#include "HTMLSelectElement.h"
#include "HTMLSourceElement.h"
#include "HTMLStyleElement.h"
#include "HTMLTableCaptionElement.h"
#include "HTMLTableCellElement.h"
#include "HTMLTableColElement.h"
#include "HTMLTableElement.h"
#include "HTMLTableRowElement.h"
#include "HTMLTableSectionElement.h"
#include "HTMLTextAreaElement.h"
#include "HTMLTitleElement.h"
#include "HTMLUListElement.h"
#include "HTMLVideoElement.h"
#include "ImageData.h"
#include "MediaError.h"
#include "TextMetrics.h"
#include "TimeRanges.h"
#include "ValidityState.h"
#include "VoidCallback.h"
#include "XMLHttpRequestException.h"
#include "XMLHttpRequest.h"
#include "XMLHttpRequestProgressEvent.h"
#include "XMLHttpRequestUpload.h"
#include "BarInfo.h"
#include "Coordinates.h"
#include "DOMSelection.h"
#include "DOMWindow.h"
#include "EventSource.h"
#include "Geolocation.h"
#include "Geoposition.h"
#include "History.h"
#include "Location.h"
#include "Navigator.h"
#include "PositionError.h"
#include "Screen.h"
#include "WebKitPoint.h"
#include "WorkerNavigator.h"
#include "Counter.h"
#include "CSSCharsetRule.h"
#include "CSSFontFaceRule.h"
#include "CSSImportRule.h"
#include "CSSMediaRule.h"
#include "CSSPageRule.h"
#include "CSSPrimitiveValue.h"
#include "CSSRule.h"
#include "CSSRuleList.h"
#include "CSSStyleDeclaration.h"
#include "CSSStyleRule.h"
#include "CSSStyleSheet.h"
#include "CSSUnknownRule.h"
#include "CSSValue.h"
#include "CSSValueList.h"
#include "MediaList.h"
#include "Rect.h"
#include "RGBColor.h"
#include "StyleMedia.h"
#include "StyleSheet.h"
#include "StyleSheetList.h"
#include "WebKitCSSKeyframeRule.h"
#include "WebKitCSSKeyframesRule.h"
#include "WebKitCSSMatrix.h"
#include "WebKitCSSTransformValue.h"
#include "StorageEvent.h"

/* ---------- forward type declarations ---------- */
extern "C" {

PyTypeObject *PtrPyDOMAttr_Type;
PyTypeObject *PtrPyDOMBeforeLoadEvent_Type;
PyTypeObject *PtrPyDOMBeforeProcessEvent_Type;
PyTypeObject *PtrPyDOMCDATASection_Type;
PyTypeObject *PtrPyDOMCharacterData_Type;
PyTypeObject *PtrPyDOMClientRect_Type;
PyTypeObject *PtrPyDOMClientRectList_Type;
PyTypeObject *PtrPyDOMComment_Type;
PyTypeObject *PtrPyDOMCompositionEvent_Type;
PyTypeObject *PtrPyDOMCustomEvent_Type;
PyTypeObject *PtrPyDOMDocumentFragment_Type;
PyTypeObject *PtrPyDOMDocument_Type;
PyTypeObject *PtrPyDOMDocumentType_Type;
PyTypeObject *PtrPyDOMDOMCoreException_Type;
PyTypeObject *PtrPyDOMDOMImplementation_Type;
PyTypeObject *PtrPyDOMDOMStringList_Type;
PyTypeObject *PtrPyDOMDOMStringMap_Type;
PyTypeObject *PtrPyDOMElement_Type;
PyTypeObject *PtrPyDOMEntity_Type;
PyTypeObject *PtrPyDOMEntityReference_Type;
PyTypeObject *PtrPyDOMErrorEvent_Type;
PyTypeObject *PtrPyDOMEventException_Type;
PyTypeObject *PtrPyDOMEvent_Type;
PyTypeObject *PtrPyDOMEventListener_Type;
PyTypeObject *PtrPyDOMEventTarget_Type;
PyTypeObject *PtrPyDOMHashChangeEvent_Type;
PyTypeObject *PtrPyDOMKeyboardEvent_Type;
PyTypeObject *PtrPyDOMMessageChannel_Type;
PyTypeObject *PtrPyDOMMessageEvent_Type;
PyTypeObject *PtrPyDOMMessagePort_Type;
PyTypeObject *PtrPyDOMMouseEvent_Type;
PyTypeObject *PtrPyDOMMutationEvent_Type;
PyTypeObject *PtrPyDOMNamedNodeMap_Type;
PyTypeObject *PtrPyDOMNodeFilter_Type;
PyTypeObject *PtrPyDOMNode_Type;
PyTypeObject *PtrPyDOMNodeIterator_Type;
PyTypeObject *PtrPyDOMNodeList_Type;
PyTypeObject *PtrPyDOMNotation_Type;
PyTypeObject *PtrPyDOMOverflowEvent_Type;
PyTypeObject *PtrPyDOMPageTransitionEvent_Type;
PyTypeObject *PtrPyDOMPopStateEvent_Type;
PyTypeObject *PtrPyDOMProcessingInstruction_Type;
PyTypeObject *PtrPyDOMProgressEvent_Type;
PyTypeObject *PtrPyDOMRangeException_Type;
PyTypeObject *PtrPyDOMRange_Type;
PyTypeObject *PtrPyDOMTextEvent_Type;
PyTypeObject *PtrPyDOMText_Type;
PyTypeObject *PtrPyDOMTreeWalker_Type;
PyTypeObject *PtrPyDOMUIEvent_Type;
PyTypeObject *PtrPyDOMWebKitAnimationEvent_Type;
PyTypeObject *PtrPyDOMWebKitTransitionEvent_Type;
PyTypeObject *PtrPyDOMWheelEvent_Type;
PyTypeObject *PtrPyDOMDOMFormData_Type;
PyTypeObject *PtrPyDOMHTMLAllCollection_Type;
PyTypeObject *PtrPyDOMHTMLAnchorElement_Type;
PyTypeObject *PtrPyDOMHTMLAppletElement_Type;
PyTypeObject *PtrPyDOMHTMLAreaElement_Type;
PyTypeObject *PtrPyDOMHTMLAudioElement_Type;
PyTypeObject *PtrPyDOMHTMLBaseElement_Type;
PyTypeObject *PtrPyDOMHTMLBaseFontElement_Type;
PyTypeObject *PtrPyDOMHTMLBlockquoteElement_Type;
PyTypeObject *PtrPyDOMHTMLBodyElement_Type;
PyTypeObject *PtrPyDOMHTMLBRElement_Type;
PyTypeObject *PtrPyDOMHTMLButtonElement_Type;
PyTypeObject *PtrPyDOMHTMLCanvasElement_Type;
PyTypeObject *PtrPyDOMHTMLCollection_Type;
PyTypeObject *PtrPyDOMHTMLDataListElement_Type;
PyTypeObject *PtrPyDOMHTMLDirectoryElement_Type;
PyTypeObject *PtrPyDOMHTMLDivElement_Type;
PyTypeObject *PtrPyDOMHTMLDListElement_Type;
PyTypeObject *PtrPyDOMHTMLDocument_Type;
PyTypeObject *PtrPyDOMHTMLElement_Type;
PyTypeObject *PtrPyDOMHTMLEmbedElement_Type;
PyTypeObject *PtrPyDOMHTMLFieldSetElement_Type;
PyTypeObject *PtrPyDOMHTMLFontElement_Type;
PyTypeObject *PtrPyDOMHTMLFormElement_Type;
PyTypeObject *PtrPyDOMHTMLFrameElement_Type;
PyTypeObject *PtrPyDOMHTMLFrameSetElement_Type;
PyTypeObject *PtrPyDOMHTMLHeadElement_Type;
PyTypeObject *PtrPyDOMHTMLHeadingElement_Type;
PyTypeObject *PtrPyDOMHTMLHRElement_Type;
PyTypeObject *PtrPyDOMHTMLHtmlElement_Type;
PyTypeObject *PtrPyDOMHTMLIFrameElement_Type;
PyTypeObject *PtrPyDOMHTMLImageElement_Type;
PyTypeObject *PtrPyDOMHTMLInputElement_Type;
PyTypeObject *PtrPyDOMHTMLIsIndexElement_Type;
PyTypeObject *PtrPyDOMHTMLLabelElement_Type;
PyTypeObject *PtrPyDOMHTMLLegendElement_Type;
PyTypeObject *PtrPyDOMHTMLLIElement_Type;
PyTypeObject *PtrPyDOMHTMLLinkElement_Type;
PyTypeObject *PtrPyDOMHTMLMapElement_Type;
PyTypeObject *PtrPyDOMHTMLMarqueeElement_Type;
PyTypeObject *PtrPyDOMHTMLMediaElement_Type;
PyTypeObject *PtrPyDOMHTMLMenuElement_Type;
PyTypeObject *PtrPyDOMHTMLMetaElement_Type;
PyTypeObject *PtrPyDOMHTMLModElement_Type;
PyTypeObject *PtrPyDOMHTMLObjectElement_Type;
PyTypeObject *PtrPyDOMHTMLOListElement_Type;
PyTypeObject *PtrPyDOMHTMLOptGroupElement_Type;
PyTypeObject *PtrPyDOMHTMLOptionElement_Type;
PyTypeObject *PtrPyDOMHTMLOptionsCollection_Type;
PyTypeObject *PtrPyDOMHTMLParagraphElement_Type;
PyTypeObject *PtrPyDOMHTMLParamElement_Type;
PyTypeObject *PtrPyDOMHTMLPreElement_Type;
PyTypeObject *PtrPyDOMHTMLProgressElement_Type;
PyTypeObject *PtrPyDOMHTMLQuoteElement_Type;
PyTypeObject *PtrPyDOMHTMLScriptElement_Type;
PyTypeObject *PtrPyDOMHTMLSelectElement_Type;
PyTypeObject *PtrPyDOMHTMLSourceElement_Type;
PyTypeObject *PtrPyDOMHTMLStyleElement_Type;
PyTypeObject *PtrPyDOMHTMLTableCaptionElement_Type;
PyTypeObject *PtrPyDOMHTMLTableCellElement_Type;
PyTypeObject *PtrPyDOMHTMLTableColElement_Type;
PyTypeObject *PtrPyDOMHTMLTableElement_Type;
PyTypeObject *PtrPyDOMHTMLTableRowElement_Type;
PyTypeObject *PtrPyDOMHTMLTableSectionElement_Type;
PyTypeObject *PtrPyDOMHTMLTextAreaElement_Type;
PyTypeObject *PtrPyDOMHTMLTitleElement_Type;
PyTypeObject *PtrPyDOMHTMLUListElement_Type;
PyTypeObject *PtrPyDOMHTMLVideoElement_Type;
PyTypeObject *PtrPyDOMImageData_Type;
PyTypeObject *PtrPyDOMMediaError_Type;
PyTypeObject *PtrPyDOMTextMetrics_Type;
PyTypeObject *PtrPyDOMTimeRanges_Type;
PyTypeObject *PtrPyDOMValidityState_Type;
PyTypeObject *PtrPyDOMVoidCallback_Type;
PyTypeObject *PtrPyDOMXMLHttpRequestException_Type;
PyTypeObject *PtrPyDOMXMLHttpRequest_Type;
PyTypeObject *PtrPyDOMXMLHttpRequestProgressEvent_Type;
PyTypeObject *PtrPyDOMXMLHttpRequestUpload_Type;
PyTypeObject *PtrPyDOMBarInfo_Type;
PyTypeObject *PtrPyDOMCoordinates_Type;
PyTypeObject *PtrPyDOMDOMSelection_Type;
PyTypeObject *PtrPyDOMDOMWindow_Type;
PyTypeObject *PtrPyDOMEventSource_Type;
PyTypeObject *PtrPyDOMGeolocation_Type;
PyTypeObject *PtrPyDOMGeoposition_Type;
PyTypeObject *PtrPyDOMHistory_Type;
PyTypeObject *PtrPyDOMLocation_Type;
PyTypeObject *PtrPyDOMNavigator_Type;
PyTypeObject *PtrPyDOMPositionError_Type;
PyTypeObject *PtrPyDOMScreen_Type;
PyTypeObject *PtrPyDOMWebKitPoint_Type;
PyTypeObject *PtrPyDOMWorkerNavigator_Type;
PyTypeObject *PtrPyDOMCounter_Type;
PyTypeObject *PtrPyDOMCSSCharsetRule_Type;
PyTypeObject *PtrPyDOMCSSFontFaceRule_Type;
PyTypeObject *PtrPyDOMCSSImportRule_Type;
PyTypeObject *PtrPyDOMCSSMediaRule_Type;
PyTypeObject *PtrPyDOMCSSPageRule_Type;
PyTypeObject *PtrPyDOMCSSPrimitiveValue_Type;
PyTypeObject *PtrPyDOMCSSRule_Type;
PyTypeObject *PtrPyDOMCSSRuleList_Type;
PyTypeObject *PtrPyDOMCSSStyleDeclaration_Type;
PyTypeObject *PtrPyDOMCSSStyleRule_Type;
PyTypeObject *PtrPyDOMCSSStyleSheet_Type;
PyTypeObject *PtrPyDOMCSSUnknownRule_Type;
PyTypeObject *PtrPyDOMCSSValue_Type;
PyTypeObject *PtrPyDOMCSSValueList_Type;
PyTypeObject *PtrPyDOMMediaList_Type;
PyTypeObject *PtrPyDOMRect_Type;
PyTypeObject *PtrPyDOMRGBColor_Type;
PyTypeObject *PtrPyDOMStyleMedia_Type;
PyTypeObject *PtrPyDOMStyleSheet_Type;
PyTypeObject *PtrPyDOMStyleSheetList_Type;
PyTypeObject *PtrPyDOMWebKitCSSKeyframeRule_Type;
PyTypeObject *PtrPyDOMWebKitCSSKeyframesRule_Type;
PyTypeObject *PtrPyDOMWebKitCSSMatrix_Type;
PyTypeObject *PtrPyDOMWebKitCSSTransformValue_Type;
PyTypeObject *PtrPyDOMStorageEvent_Type;

}; // extern "C"


static void py_wk_exc(WebCore::ExceptionCode &ec)
{
    WebCore::ExceptionCodeDescription ecdesc;
    WebCore::getExceptionCodeDescription(ec, ecdesc);
    PyErr_SetString(PyExc_Exception, ecdesc.name);
}

typedef struct {
    PyObject_HEAD
    void * ptr;
} PyDOMObject;

static PyObject *
DOMObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    PyDOMObject *self;

    self = (PyDOMObject *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->ptr = NULL;
    }

    return (PyObject *)self;
}

/*
static int
DOMObject_init(PyObject *self, PyObject *args, PyObject *kwds)
{
    static char *kwlist[] = { (char*)"ptr", NULL };
    long ptr = 0;

    if (! PyArg_ParseTupleAndKeywords(args, kwds, "|l", kwlist,
                                      &ptr))
    {
        ptr = 0;
    }
    ((PyDOMObject*)self)->ptr = (void*)ptr;
    return 0;
}
*/

static PyObject *
DOMObject_getptr(PyDOMObject *self, PyObject *)
{
    return PyInt_FromLong((long)self->ptr);
}

static PyObject *
DOMObject_setptr(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"ptr", NULL };
    long ptr;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:shoddy.DOMObject.setptr",
                                     kwlist, &ptr))
        return NULL;

    self->ptr = (void*)ptr;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyMethodDef DOMObject_methods[] = {
    {"setptr", (PyCFunction)DOMObject_setptr, METH_VARARGS|METH_KEYWORDS,
     PyDoc_STR("set pointer")},
    {"getptr", (PyCFunction)DOMObject_getptr, METH_NOARGS,
     PyDoc_STR("get pointer")},
    {NULL,	NULL, NULL, NULL},
};


static PyTypeObject PyDOMObject_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                       /* ob_size */
    "pywebkit.DOMObject",   /* tp_name */
    sizeof(PyDOMObject),       /* tp_basicsize */
    0,                       /* tp_itemsize */
    0,                       /* tp_dealloc */
    0,                       /* tp_print */
    0,                       /* tp_getattr */
    0,                       /* tp_setattr */
    0,                       /* tp_compare */
    0,                       /* tp_repr */
    0,                       /* tp_as_number */
    0,                       /* tp_as_sequence */
    0,                       /* tp_as_mapping */
    0,                       /* tp_hash */
    0,                       /* tp_call */
    0,                       /* tp_str */
    0,                       /* tp_getattro */
    0,                       /* tp_setattro */
    0,                       /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT |
      Py_TPFLAGS_BASETYPE,   /* tp_flags */
    0,                       /* tp_doc */
    0,                       /* tp_traverse */
    0,                       /* tp_clear */
    0,                       /* tp_richcompare */
    0,                       /* tp_weaklistoffset */
    0,                       /* tp_iter */
    0,                       /* tp_iternext */
    DOMObject_methods,          /* tp_methods */
    0,                       /* tp_members */
    0,                       /* tp_getset */
    0,                       /* tp_base */
    0,                       /* tp_dict */
    0,                       /* tp_descr_get */
    0,                       /* tp_descr_set */
    0,                       /* tp_dictoffset */
    0,                       /* tp_init */
    0,                       /* tp_alloc */
    DOMObject_new,           /* tp_new */
    0,                       /* tp_free */
    0,                       /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */

};

static PyObject* PyDOMObject_new(PyTypeObject *type, void *ptr)
{
    PyDOMObject *v; 
    v = (PyDOMObject *)type->tp_alloc(type, 0);
    v->ptr = ptr;
    return (PyObject *) v;
}

/* python callback-wrapped event listener.  associates a python callback
   function with a c++ object of type "EventListener" so that 
*/

PyObject *WebKit::toPython(WebCore::Event *);

class PythonEventListener : public WebCore::EventListener {
public:
    static PythonEventListener* create(PyObject* callback)
    { return new PythonEventListener(callback); }

    virtual void handleEvent(WebCore::ScriptExecutionContext*, WebCore::Event*);
    virtual bool operator==(const EventListener& other);
    static const PythonEventListener* cast(const EventListener* listener)
    {
        return listener->type() == PythonEventListenerType
            ? static_cast<const PythonEventListener*>(listener)
            : 0;
    }

private:
    PyObject *m_callback;
    PythonEventListener(PyObject *callback)
      : WebCore::EventListener(WebCore::EventListener::PythonEventListenerType)
      , m_callback(callback)
    {
        if (callback)
            Py_INCREF(callback);
    }
    ~PythonEventListener()
    {
        if (m_callback)
            Py_DECREF(m_callback);
    }
};

void PythonEventListener::handleEvent(WebCore::ScriptExecutionContext*,
                                      WebCore::Event* event)
{
    PyObject* pev = WebKit::toPython(event);
    PyObject* arglist = Py_BuildValue((char*)"(O)", pev);
    PyGILState_STATE __py_state;
    __py_state = PyGILState_Ensure();
    PyObject* result = PyObject_CallObject(m_callback, arglist);
    PyGILState_Release(__py_state);
    Py_DECREF(arglist);
    Py_DECREF(pev);
    if (result == NULL) {
        printf("exception occurred: TODO, something about it!\n");
        return; /* Pass error back */
    }
    /* Here maybe use the result */
    Py_DECREF(result);
    return;
}

bool PythonEventListener::operator==(const EventListener& listener)
{
    const PythonEventListener* pyEventListener;
    pyEventListener = PythonEventListener::cast(&listener);
    if (pyEventListener)
        return m_callback == pyEventListener->m_callback;

    return false;
}

#include "Frame.h"
#include "ScheduledActionBase.h"

namespace WebCore {

class PythonScheduledAction : public ScheduledActionBase {
public:
    static PythonScheduledAction* create(PyObject* callback)
    { return new PythonScheduledAction(callback); }

    void execute(WebCore::ScriptExecutionContext*);
    void deref_callback()
    {
        if (m_callback)
            Py_DECREF(m_callback);
    }


private:
    PyObject *m_callback;
    PythonScheduledAction(PyObject *callback)
      : m_callback(callback)
    {
        if (callback)
            Py_INCREF(callback);
    }
    void execute(Document*);
};

void PythonScheduledAction::execute(ScriptExecutionContext* context)
{
    if (context->isDocument())
        execute(static_cast<Document*>(context));
#if 0 // ENABLE(WORKERS)
    else {
        ASSERT(context->isWorkerContext());
        execute(static_cast<WorkerContext*>(context));
    }
#else
    ASSERT(context->isDocument());
#endif
}

void PythonScheduledAction::execute(Document* document)
{
    RefPtr<Frame> frame = document->frame();
    PyObject* arglist = Py_BuildValue((char*)"()");

    if (!frame || !frame->script()->canExecuteScripts(AboutToExecuteScript))
        return;

    //frame->script()->windowShell(world)->window()->globalData().timeoutChecker.start();
    PyGILState_STATE __py_state;
    __py_state = PyGILState_Ensure();
    PyObject* result = PyObject_CallObject(m_callback, arglist);
    PyGILState_Release(__py_state);
    //frame->globalData().timeoutChecker.stop();

    Py_DECREF(arglist);

    if (result == NULL) {
        printf("exception occurred: TODO, something about it!\n");
        return; /* Pass error back */
    }
    /* Here maybe use the result */
    Py_DECREF(result);
    return;

}
}; // namespace WebCore

extern "C" {

// TODO: resolve how to free up the timer, which mayyy be happening
// automatically through clearTimeout anyway, due to PassOwnPtr
// clear() handling.  have to check.

PassOwnPtr<WebCore::ScheduledActionBase>
webkit_create_python_scheduled_action(PyObject *callback)
{
    return adoptPtr(WebCore::PythonScheduledAction::create(callback));
}

void webkit_delete_python_scheduled_action(PassOwnPtr<WebCore::ScheduledActionBase> l)
{
    //l->deref_callback();
    //l->deref(); /* XXX - results in delete due to refcount=0? */
    //delete l; // XXX ???
}

WebCore::EventListener*
webkit_create_python_event_listener(PyObject *callback)
{
    return PythonEventListener::create(callback);
}

void webkit_delete_python_event_listener(WebCore::EventListener *l)
{
    l->deref(); /* XXX - results in delete due to refcount=0? */
    /*delete l;*/
}

} /* extern C */

PyTypeObject *PtrPyDOMScheduledActionBase_Type;

namespace Webkit {
using namespace WebCore;

PyObject* pywrapScheduledActionBase(WebCore::ScheduledActionBase* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    /*coreObject->ref();*/
    return PyDOMObject_new(PtrPyDOMScheduledActionBase_Type, coreptr);
}

PyObject* toPython(WebCore::ScheduledActionBase*);

#define PyDOMScheduledActionBase PyDOMObject
PyObject* toPython(WebCore::ScheduledActionBase* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = WebKit::PythonObjectCache::getDOMObject(obj))
        return ret;

    return WebKit::PythonObjectCache::putDOMObject(obj, pywrapScheduledActionBase(obj));
}

/* ----------- ScheduledActionBase ----------- */

} // namespace WebKit
extern "C" {

PassOwnPtr<WebCore::ScheduledActionBase> coreScheduledActionBase(PyDOMObject* request)
{
    PyObject *obj = (PyObject*)request;
    if (obj == Py_None) {
        return nullptr;
    }
    if (Py_TYPE((PyObject*)obj) == PtrPyDOMScheduledActionBase_Type) {
        void *coreptr = ((PyDOMObject*)request)->ptr;
        return adoptPtr(static_cast<WebCore::ScheduledActionBase*>(coreptr));
    }
    if (!PyCallable_Check(obj)) {
        PyErr_SetString(PyExc_TypeError, "param must be callable");
        return nullptr;
    }
    return webkit_create_python_scheduled_action(obj);
}

static int
ScheduledActionBase_init(WebCore::ScheduledActionBase *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
void dealloc_ScheduledActionBase(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    void *coreptr = obj->ptr;
    //PassOwnPtr<WebCore::ScheduledActionBase> cobj = static_cast<WebCore::ScheduledActionBase*>(coreScheduledActionBase(obj));
    WebKit::PythonObjectCache::forgetDOMObject(coreptr);
    /*cobj->deref();*/
    self->ob_type->tp_free(self);
}

PyTypeObject G_GNUC_INTERNAL PyDOMScheduledActionBase_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.ScheduledActionBase",                   /* tp_name */
    sizeof(PyDOMScheduledActionBase),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)dealloc_ScheduledActionBase,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)ScheduledActionBase_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"





/* ---------- class wrappers ---------- */
namespace WebKit {
using namespace WebCore;

PyObject* pywrapAttr(WebCore::Attr* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMAttr_Type, coreptr);
}

WebCore::Attr *coreAttr(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Attr*>(coreptr);
}

#define PyDOMAttr PyDOMObject
PyObject* toPython(WebCore::Attr* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapAttr(obj));
}

PyObject* pywrapBeforeLoadEvent(WebCore::BeforeLoadEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMBeforeLoadEvent_Type, coreptr);
}

WebCore::BeforeLoadEvent *coreBeforeLoadEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::BeforeLoadEvent*>(coreptr);
}

#define PyDOMBeforeLoadEvent PyDOMObject
PyObject* toPython(WebCore::BeforeLoadEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapBeforeLoadEvent(obj));
}

PyObject* pywrapBeforeProcessEvent(WebCore::BeforeProcessEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMBeforeProcessEvent_Type, coreptr);
}

WebCore::BeforeProcessEvent *coreBeforeProcessEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::BeforeProcessEvent*>(coreptr);
}

#define PyDOMBeforeProcessEvent PyDOMObject
PyObject* toPython(WebCore::BeforeProcessEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapBeforeProcessEvent(obj));
}

PyObject* pywrapCDATASection(WebCore::CDATASection* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCDATASection_Type, coreptr);
}

WebCore::CDATASection *coreCDATASection(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CDATASection*>(coreptr);
}

#define PyDOMCDATASection PyDOMObject
PyObject* toPython(WebCore::CDATASection* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCDATASection(obj));
}

PyObject* pywrapCharacterData(WebCore::CharacterData* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCharacterData_Type, coreptr);
}

WebCore::CharacterData *coreCharacterData(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CharacterData*>(coreptr);
}

#define PyDOMCharacterData PyDOMObject
PyObject* toPython(WebCore::CharacterData* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCharacterData(obj));
}

PyObject* pywrapClientRect(WebCore::ClientRect* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMClientRect_Type, coreptr);
}

WebCore::ClientRect *coreClientRect(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::ClientRect*>(coreptr);
}

#define PyDOMClientRect PyDOMObject
PyObject* toPython(WebCore::ClientRect* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapClientRect(obj));
}

PyObject* pywrapClientRectList(WebCore::ClientRectList* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMClientRectList_Type, coreptr);
}

WebCore::ClientRectList *coreClientRectList(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::ClientRectList*>(coreptr);
}

#define PyDOMClientRectList PyDOMObject
PyObject* toPython(WebCore::ClientRectList* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapClientRectList(obj));
}

PyObject* pywrapComment(WebCore::Comment* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMComment_Type, coreptr);
}

WebCore::Comment *coreComment(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Comment*>(coreptr);
}

#define PyDOMComment PyDOMObject
PyObject* toPython(WebCore::Comment* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapComment(obj));
}

PyObject* pywrapCompositionEvent(WebCore::CompositionEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCompositionEvent_Type, coreptr);
}

WebCore::CompositionEvent *coreCompositionEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CompositionEvent*>(coreptr);
}

#define PyDOMCompositionEvent PyDOMObject
PyObject* toPython(WebCore::CompositionEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCompositionEvent(obj));
}

PyObject* pywrapCustomEvent(WebCore::CustomEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCustomEvent_Type, coreptr);
}

WebCore::CustomEvent *coreCustomEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CustomEvent*>(coreptr);
}

#define PyDOMCustomEvent PyDOMObject
PyObject* toPython(WebCore::CustomEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCustomEvent(obj));
}

PyObject* pywrapDocumentFragment(WebCore::DocumentFragment* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMDocumentFragment_Type, coreptr);
}

WebCore::DocumentFragment *coreDocumentFragment(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::DocumentFragment*>(coreptr);
}

#define PyDOMDocumentFragment PyDOMObject
PyObject* toPython(WebCore::DocumentFragment* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapDocumentFragment(obj));
}

PyObject* pywrapDocument(WebCore::Document* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMDocument_Type, coreptr);
}

WebCore::Document *coreDocument(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Document*>(coreptr);
}

#define PyDOMDocument PyDOMObject
PyObject* toPython(WebCore::Document*);

PyObject* pywrapDocumentType(WebCore::DocumentType* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMDocumentType_Type, coreptr);
}

WebCore::DocumentType *coreDocumentType(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::DocumentType*>(coreptr);
}

#define PyDOMDocumentType PyDOMObject
PyObject* toPython(WebCore::DocumentType* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapDocumentType(obj));
}

PyObject* pywrapDOMCoreException(WebCore::DOMCoreException* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMDOMCoreException_Type, coreptr);
}

WebCore::DOMCoreException *coreDOMCoreException(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::DOMCoreException*>(coreptr);
}

#define PyDOMDOMCoreException PyDOMObject
PyObject* toPython(WebCore::DOMCoreException* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapDOMCoreException(obj));
}

PyObject* pywrapDOMImplementation(WebCore::DOMImplementation* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMDOMImplementation_Type, coreptr);
}

WebCore::DOMImplementation *coreDOMImplementation(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::DOMImplementation*>(coreptr);
}

#define PyDOMDOMImplementation PyDOMObject
PyObject* toPython(WebCore::DOMImplementation* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapDOMImplementation(obj));
}

PyObject* pywrapDOMStringList(WebCore::DOMStringList* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMDOMStringList_Type, coreptr);
}

WebCore::DOMStringList *coreDOMStringList(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::DOMStringList*>(coreptr);
}

#define PyDOMDOMStringList PyDOMObject
PyObject* toPython(WebCore::DOMStringList* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapDOMStringList(obj));
}

PyObject* pywrapDOMStringMap(WebCore::DOMStringMap* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMDOMStringMap_Type, coreptr);
}

WebCore::DOMStringMap *coreDOMStringMap(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::DOMStringMap*>(coreptr);
}

#define PyDOMDOMStringMap PyDOMObject
PyObject* toPython(WebCore::DOMStringMap* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapDOMStringMap(obj));
}

PyObject* pywrapElement(WebCore::Element* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMElement_Type, coreptr);
}

WebCore::Element *coreElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Element*>(coreptr);
}

#define PyDOMElement PyDOMObject
PyObject* toPython(WebCore::Element*);

PyObject* pywrapEntity(WebCore::Entity* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMEntity_Type, coreptr);
}

WebCore::Entity *coreEntity(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Entity*>(coreptr);
}

#define PyDOMEntity PyDOMObject
PyObject* toPython(WebCore::Entity* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapEntity(obj));
}

PyObject* pywrapEntityReference(WebCore::EntityReference* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMEntityReference_Type, coreptr);
}

WebCore::EntityReference *coreEntityReference(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::EntityReference*>(coreptr);
}

#define PyDOMEntityReference PyDOMObject
PyObject* toPython(WebCore::EntityReference* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapEntityReference(obj));
}

PyObject* pywrapErrorEvent(WebCore::ErrorEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMErrorEvent_Type, coreptr);
}

WebCore::ErrorEvent *coreErrorEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::ErrorEvent*>(coreptr);
}

#define PyDOMErrorEvent PyDOMObject
PyObject* toPython(WebCore::ErrorEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapErrorEvent(obj));
}

PyObject* pywrapEventException(WebCore::EventException* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMEventException_Type, coreptr);
}

WebCore::EventException *coreEventException(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::EventException*>(coreptr);
}

#define PyDOMEventException PyDOMObject
PyObject* toPython(WebCore::EventException* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapEventException(obj));
}

PyObject* pywrapEvent(WebCore::Event* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMEvent_Type, coreptr);
}

WebCore::Event *coreEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Event*>(coreptr);
}

#define PyDOMEvent PyDOMObject
PyObject* toPython(WebCore::Event*);

PyObject* pywrapEventListener(WebCore::EventListener* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMEventListener_Type, coreptr);
}

PyObject* toPython(WebCore::EventListener*);

WebCore::EventListener *coreEventListener(PyDOMObject* request)
{
    PyObject *obj = (PyObject*)request;
    if (obj == Py_None) {
        return NULL;
    }
    if (Py_TYPE((PyObject*)obj) == PtrPyDOMEventListener_Type) {
        void *coreptr = ((PyDOMObject*)request)->ptr;
        return static_cast<WebCore::EventListener*>(coreptr);
    }
    if (!PyCallable_Check(obj)) {
        PyErr_SetString(PyExc_TypeError, "param must be callable");
        return NULL;
    }
    return webkit_create_python_event_listener(obj);
}

#define PyDOMEventListener PyDOMObject
PyObject* toPython(WebCore::EventListener* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapEventListener(obj));
}

PyObject* pywrapEventTarget(WebCore::EventTarget* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMEventTarget_Type, coreptr);
}

WebCore::EventTarget *coreEventTarget(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::EventTarget*>(coreptr);
}

#define PyDOMEventTarget PyDOMObject
PyObject* toPython(WebCore::EventTarget*);

PyObject* pywrapHashChangeEvent(WebCore::HashChangeEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHashChangeEvent_Type, coreptr);
}

WebCore::HashChangeEvent *coreHashChangeEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HashChangeEvent*>(coreptr);
}

#define PyDOMHashChangeEvent PyDOMObject
PyObject* toPython(WebCore::HashChangeEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHashChangeEvent(obj));
}

PyObject* pywrapKeyboardEvent(WebCore::KeyboardEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMKeyboardEvent_Type, coreptr);
}

WebCore::KeyboardEvent *coreKeyboardEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::KeyboardEvent*>(coreptr);
}

#define PyDOMKeyboardEvent PyDOMObject
PyObject* toPython(WebCore::KeyboardEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapKeyboardEvent(obj));
}

PyObject* pywrapMessageChannel(WebCore::MessageChannel* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMMessageChannel_Type, coreptr);
}

WebCore::MessageChannel *coreMessageChannel(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::MessageChannel*>(coreptr);
}

#define PyDOMMessageChannel PyDOMObject
PyObject* toPython(WebCore::MessageChannel* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapMessageChannel(obj));
}

PyObject* pywrapMessageEvent(WebCore::MessageEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMMessageEvent_Type, coreptr);
}

WebCore::MessageEvent *coreMessageEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::MessageEvent*>(coreptr);
}

#define PyDOMMessageEvent PyDOMObject
PyObject* toPython(WebCore::MessageEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapMessageEvent(obj));
}

PyObject* pywrapMessagePort(WebCore::MessagePort* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMMessagePort_Type, coreptr);
}

WebCore::MessagePort *coreMessagePort(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::MessagePort*>(coreptr);
}

#define PyDOMMessagePort PyDOMObject
PyObject* toPython(WebCore::MessagePort* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapMessagePort(obj));
}

PyObject* pywrapMouseEvent(WebCore::MouseEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMMouseEvent_Type, coreptr);
}

WebCore::MouseEvent *coreMouseEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::MouseEvent*>(coreptr);
}

#define PyDOMMouseEvent PyDOMObject
PyObject* toPython(WebCore::MouseEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapMouseEvent(obj));
}

PyObject* pywrapMutationEvent(WebCore::MutationEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMMutationEvent_Type, coreptr);
}

WebCore::MutationEvent *coreMutationEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::MutationEvent*>(coreptr);
}

#define PyDOMMutationEvent PyDOMObject
PyObject* toPython(WebCore::MutationEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapMutationEvent(obj));
}

PyObject* pywrapNamedNodeMap(WebCore::NamedNodeMap* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMNamedNodeMap_Type, coreptr);
}

WebCore::NamedNodeMap *coreNamedNodeMap(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::NamedNodeMap*>(coreptr);
}

#define PyDOMNamedNodeMap PyDOMObject
PyObject* toPython(WebCore::NamedNodeMap* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapNamedNodeMap(obj));
}

PyObject* pywrapNodeFilter(WebCore::NodeFilter* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMNodeFilter_Type, coreptr);
}

WebCore::NodeFilter *coreNodeFilter(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::NodeFilter*>(coreptr);
}

#define PyDOMNodeFilter PyDOMObject
PyObject* toPython(WebCore::NodeFilter* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapNodeFilter(obj));
}

PyObject* pywrapNode(WebCore::Node* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMNode_Type, coreptr);
}

WebCore::Node *coreNode(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Node*>(coreptr);
}

#define PyDOMNode PyDOMObject
PyObject* toPython(WebCore::Node*);

PyObject* pywrapNodeIterator(WebCore::NodeIterator* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMNodeIterator_Type, coreptr);
}

WebCore::NodeIterator *coreNodeIterator(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::NodeIterator*>(coreptr);
}

#define PyDOMNodeIterator PyDOMObject
PyObject* toPython(WebCore::NodeIterator* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapNodeIterator(obj));
}

PyObject* pywrapNodeList(WebCore::NodeList* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMNodeList_Type, coreptr);
}

WebCore::NodeList *coreNodeList(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::NodeList*>(coreptr);
}

#define PyDOMNodeList PyDOMObject
PyObject* toPython(WebCore::NodeList* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapNodeList(obj));
}

PyObject* pywrapNotation(WebCore::Notation* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMNotation_Type, coreptr);
}

WebCore::Notation *coreNotation(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Notation*>(coreptr);
}

#define PyDOMNotation PyDOMObject
PyObject* toPython(WebCore::Notation* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapNotation(obj));
}

PyObject* pywrapOverflowEvent(WebCore::OverflowEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMOverflowEvent_Type, coreptr);
}

WebCore::OverflowEvent *coreOverflowEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::OverflowEvent*>(coreptr);
}

#define PyDOMOverflowEvent PyDOMObject
PyObject* toPython(WebCore::OverflowEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapOverflowEvent(obj));
}

PyObject* pywrapPageTransitionEvent(WebCore::PageTransitionEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMPageTransitionEvent_Type, coreptr);
}

WebCore::PageTransitionEvent *corePageTransitionEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::PageTransitionEvent*>(coreptr);
}

#define PyDOMPageTransitionEvent PyDOMObject
PyObject* toPython(WebCore::PageTransitionEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapPageTransitionEvent(obj));
}

PyObject* pywrapPopStateEvent(WebCore::PopStateEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMPopStateEvent_Type, coreptr);
}

WebCore::PopStateEvent *corePopStateEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::PopStateEvent*>(coreptr);
}

#define PyDOMPopStateEvent PyDOMObject
PyObject* toPython(WebCore::PopStateEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapPopStateEvent(obj));
}

PyObject* pywrapProcessingInstruction(WebCore::ProcessingInstruction* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMProcessingInstruction_Type, coreptr);
}

WebCore::ProcessingInstruction *coreProcessingInstruction(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::ProcessingInstruction*>(coreptr);
}

#define PyDOMProcessingInstruction PyDOMObject
PyObject* toPython(WebCore::ProcessingInstruction* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapProcessingInstruction(obj));
}

PyObject* pywrapProgressEvent(WebCore::ProgressEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMProgressEvent_Type, coreptr);
}

WebCore::ProgressEvent *coreProgressEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::ProgressEvent*>(coreptr);
}

#define PyDOMProgressEvent PyDOMObject
PyObject* toPython(WebCore::ProgressEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapProgressEvent(obj));
}

PyObject* pywrapRangeException(WebCore::RangeException* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMRangeException_Type, coreptr);
}

WebCore::RangeException *coreRangeException(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::RangeException*>(coreptr);
}

#define PyDOMRangeException PyDOMObject
PyObject* toPython(WebCore::RangeException* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapRangeException(obj));
}

PyObject* pywrapRange(WebCore::Range* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMRange_Type, coreptr);
}

WebCore::Range *coreRange(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Range*>(coreptr);
}

#define PyDOMRange PyDOMObject
PyObject* toPython(WebCore::Range* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapRange(obj));
}

PyObject* pywrapTextEvent(WebCore::TextEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMTextEvent_Type, coreptr);
}

WebCore::TextEvent *coreTextEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::TextEvent*>(coreptr);
}

#define PyDOMTextEvent PyDOMObject
PyObject* toPython(WebCore::TextEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapTextEvent(obj));
}

PyObject* pywrapText(WebCore::Text* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMText_Type, coreptr);
}

WebCore::Text *coreText(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Text*>(coreptr);
}

#define PyDOMText PyDOMObject
PyObject* toPython(WebCore::Text*);

PyObject* pywrapTreeWalker(WebCore::TreeWalker* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMTreeWalker_Type, coreptr);
}

WebCore::TreeWalker *coreTreeWalker(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::TreeWalker*>(coreptr);
}

#define PyDOMTreeWalker PyDOMObject
PyObject* toPython(WebCore::TreeWalker* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapTreeWalker(obj));
}

PyObject* pywrapUIEvent(WebCore::UIEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMUIEvent_Type, coreptr);
}

WebCore::UIEvent *coreUIEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::UIEvent*>(coreptr);
}

#define PyDOMUIEvent PyDOMObject
PyObject* toPython(WebCore::UIEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapUIEvent(obj));
}

PyObject* pywrapWebKitAnimationEvent(WebCore::WebKitAnimationEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMWebKitAnimationEvent_Type, coreptr);
}

WebCore::WebKitAnimationEvent *coreWebKitAnimationEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::WebKitAnimationEvent*>(coreptr);
}

#define PyDOMWebKitAnimationEvent PyDOMObject
PyObject* toPython(WebCore::WebKitAnimationEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapWebKitAnimationEvent(obj));
}

PyObject* pywrapWebKitTransitionEvent(WebCore::WebKitTransitionEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMWebKitTransitionEvent_Type, coreptr);
}

WebCore::WebKitTransitionEvent *coreWebKitTransitionEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::WebKitTransitionEvent*>(coreptr);
}

#define PyDOMWebKitTransitionEvent PyDOMObject
PyObject* toPython(WebCore::WebKitTransitionEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapWebKitTransitionEvent(obj));
}

PyObject* pywrapWheelEvent(WebCore::WheelEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMWheelEvent_Type, coreptr);
}

WebCore::WheelEvent *coreWheelEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::WheelEvent*>(coreptr);
}

#define PyDOMWheelEvent PyDOMObject
PyObject* toPython(WebCore::WheelEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapWheelEvent(obj));
}

PyObject* pywrapDOMFormData(WebCore::DOMFormData* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMDOMFormData_Type, coreptr);
}

WebCore::DOMFormData *coreDOMFormData(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::DOMFormData*>(coreptr);
}

#define PyDOMDOMFormData PyDOMObject
PyObject* toPython(WebCore::DOMFormData* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapDOMFormData(obj));
}

PyObject* pywrapHTMLAllCollection(WebCore::HTMLAllCollection* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLAllCollection_Type, coreptr);
}

WebCore::HTMLAllCollection *coreHTMLAllCollection(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLAllCollection*>(coreptr);
}

#define PyDOMHTMLAllCollection PyDOMObject
PyObject* toPython(WebCore::HTMLAllCollection* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLAllCollection(obj));
}

PyObject* pywrapHTMLAnchorElement(WebCore::HTMLAnchorElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLAnchorElement_Type, coreptr);
}

WebCore::HTMLAnchorElement *coreHTMLAnchorElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLAnchorElement*>(coreptr);
}

#define PyDOMHTMLAnchorElement PyDOMObject
PyObject* toPython(WebCore::HTMLAnchorElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLAnchorElement(obj));
}

PyObject* pywrapHTMLAppletElement(WebCore::HTMLAppletElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLAppletElement_Type, coreptr);
}

WebCore::HTMLAppletElement *coreHTMLAppletElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLAppletElement*>(coreptr);
}

#define PyDOMHTMLAppletElement PyDOMObject
PyObject* toPython(WebCore::HTMLAppletElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLAppletElement(obj));
}

PyObject* pywrapHTMLAreaElement(WebCore::HTMLAreaElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLAreaElement_Type, coreptr);
}

WebCore::HTMLAreaElement *coreHTMLAreaElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLAreaElement*>(coreptr);
}

#define PyDOMHTMLAreaElement PyDOMObject
PyObject* toPython(WebCore::HTMLAreaElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLAreaElement(obj));
}

PyObject* pywrapHTMLAudioElement(WebCore::HTMLAudioElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLAudioElement_Type, coreptr);
}

WebCore::HTMLAudioElement *coreHTMLAudioElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLAudioElement*>(coreptr);
}

#define PyDOMHTMLAudioElement PyDOMObject
PyObject* toPython(WebCore::HTMLAudioElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLAudioElement(obj));
}

PyObject* pywrapHTMLBaseElement(WebCore::HTMLBaseElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLBaseElement_Type, coreptr);
}

WebCore::HTMLBaseElement *coreHTMLBaseElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLBaseElement*>(coreptr);
}

#define PyDOMHTMLBaseElement PyDOMObject
PyObject* toPython(WebCore::HTMLBaseElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLBaseElement(obj));
}

PyObject* pywrapHTMLBaseFontElement(WebCore::HTMLBaseFontElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLBaseFontElement_Type, coreptr);
}

WebCore::HTMLBaseFontElement *coreHTMLBaseFontElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLBaseFontElement*>(coreptr);
}

#define PyDOMHTMLBaseFontElement PyDOMObject
PyObject* toPython(WebCore::HTMLBaseFontElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLBaseFontElement(obj));
}

PyObject* pywrapHTMLBlockquoteElement(WebCore::HTMLBlockquoteElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLBlockquoteElement_Type, coreptr);
}

WebCore::HTMLBlockquoteElement *coreHTMLBlockquoteElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLBlockquoteElement*>(coreptr);
}

#define PyDOMHTMLBlockquoteElement PyDOMObject
PyObject* toPython(WebCore::HTMLBlockquoteElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLBlockquoteElement(obj));
}

PyObject* pywrapHTMLBodyElement(WebCore::HTMLBodyElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLBodyElement_Type, coreptr);
}

WebCore::HTMLBodyElement *coreHTMLBodyElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLBodyElement*>(coreptr);
}

#define PyDOMHTMLBodyElement PyDOMObject
PyObject* toPython(WebCore::HTMLBodyElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLBodyElement(obj));
}

PyObject* pywrapHTMLBRElement(WebCore::HTMLBRElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLBRElement_Type, coreptr);
}

WebCore::HTMLBRElement *coreHTMLBRElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLBRElement*>(coreptr);
}

#define PyDOMHTMLBRElement PyDOMObject
PyObject* toPython(WebCore::HTMLBRElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLBRElement(obj));
}

PyObject* pywrapHTMLButtonElement(WebCore::HTMLButtonElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLButtonElement_Type, coreptr);
}

WebCore::HTMLButtonElement *coreHTMLButtonElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLButtonElement*>(coreptr);
}

#define PyDOMHTMLButtonElement PyDOMObject
PyObject* toPython(WebCore::HTMLButtonElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLButtonElement(obj));
}

PyObject* pywrapHTMLCanvasElement(WebCore::HTMLCanvasElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLCanvasElement_Type, coreptr);
}

WebCore::HTMLCanvasElement *coreHTMLCanvasElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLCanvasElement*>(coreptr);
}

#define PyDOMHTMLCanvasElement PyDOMObject
PyObject* toPython(WebCore::HTMLCanvasElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLCanvasElement(obj));
}

PyObject* pywrapHTMLCollection(WebCore::HTMLCollection* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLCollection_Type, coreptr);
}

WebCore::HTMLCollection *coreHTMLCollection(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLCollection*>(coreptr);
}

#define PyDOMHTMLCollection PyDOMObject
PyObject* toPython(WebCore::HTMLCollection*);

PyObject* pywrapHTMLDataListElement(WebCore::HTMLDataListElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLDataListElement_Type, coreptr);
}

WebCore::HTMLDataListElement *coreHTMLDataListElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLDataListElement*>(coreptr);
}

#define PyDOMHTMLDataListElement PyDOMObject
PyObject* toPython(WebCore::HTMLDataListElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLDataListElement(obj));
}

PyObject* pywrapHTMLDirectoryElement(WebCore::HTMLDirectoryElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLDirectoryElement_Type, coreptr);
}

WebCore::HTMLDirectoryElement *coreHTMLDirectoryElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLDirectoryElement*>(coreptr);
}

#define PyDOMHTMLDirectoryElement PyDOMObject
PyObject* toPython(WebCore::HTMLDirectoryElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLDirectoryElement(obj));
}

PyObject* pywrapHTMLDivElement(WebCore::HTMLDivElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLDivElement_Type, coreptr);
}

WebCore::HTMLDivElement *coreHTMLDivElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLDivElement*>(coreptr);
}

#define PyDOMHTMLDivElement PyDOMObject
PyObject* toPython(WebCore::HTMLDivElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLDivElement(obj));
}

PyObject* pywrapHTMLDListElement(WebCore::HTMLDListElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLDListElement_Type, coreptr);
}

WebCore::HTMLDListElement *coreHTMLDListElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLDListElement*>(coreptr);
}

#define PyDOMHTMLDListElement PyDOMObject
PyObject* toPython(WebCore::HTMLDListElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLDListElement(obj));
}

PyObject* pywrapHTMLDocument(WebCore::HTMLDocument* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLDocument_Type, coreptr);
}

WebCore::HTMLDocument *coreHTMLDocument(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLDocument*>(coreptr);
}

#define PyDOMHTMLDocument PyDOMObject
PyObject* toPython(WebCore::HTMLDocument* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLDocument(obj));
}

PyObject* pywrapHTMLElement(WebCore::HTMLElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLElement_Type, coreptr);
}

WebCore::HTMLElement *coreHTMLElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLElement*>(coreptr);
}

#define PyDOMHTMLElement PyDOMObject
PyObject* toPython(WebCore::HTMLElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLElement(obj));
}

PyObject* pywrapHTMLEmbedElement(WebCore::HTMLEmbedElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLEmbedElement_Type, coreptr);
}

WebCore::HTMLEmbedElement *coreHTMLEmbedElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLEmbedElement*>(coreptr);
}

#define PyDOMHTMLEmbedElement PyDOMObject
PyObject* toPython(WebCore::HTMLEmbedElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLEmbedElement(obj));
}

PyObject* pywrapHTMLFieldSetElement(WebCore::HTMLFieldSetElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLFieldSetElement_Type, coreptr);
}

WebCore::HTMLFieldSetElement *coreHTMLFieldSetElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLFieldSetElement*>(coreptr);
}

#define PyDOMHTMLFieldSetElement PyDOMObject
PyObject* toPython(WebCore::HTMLFieldSetElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLFieldSetElement(obj));
}

PyObject* pywrapHTMLFontElement(WebCore::HTMLFontElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLFontElement_Type, coreptr);
}

WebCore::HTMLFontElement *coreHTMLFontElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLFontElement*>(coreptr);
}

#define PyDOMHTMLFontElement PyDOMObject
PyObject* toPython(WebCore::HTMLFontElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLFontElement(obj));
}

PyObject* pywrapHTMLFormElement(WebCore::HTMLFormElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLFormElement_Type, coreptr);
}

WebCore::HTMLFormElement *coreHTMLFormElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLFormElement*>(coreptr);
}

#define PyDOMHTMLFormElement PyDOMObject
PyObject* toPython(WebCore::HTMLFormElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLFormElement(obj));
}

PyObject* pywrapHTMLFrameElement(WebCore::HTMLFrameElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLFrameElement_Type, coreptr);
}

WebCore::HTMLFrameElement *coreHTMLFrameElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLFrameElement*>(coreptr);
}

#define PyDOMHTMLFrameElement PyDOMObject
PyObject* toPython(WebCore::HTMLFrameElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLFrameElement(obj));
}

PyObject* pywrapHTMLFrameSetElement(WebCore::HTMLFrameSetElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLFrameSetElement_Type, coreptr);
}

WebCore::HTMLFrameSetElement *coreHTMLFrameSetElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLFrameSetElement*>(coreptr);
}

#define PyDOMHTMLFrameSetElement PyDOMObject
PyObject* toPython(WebCore::HTMLFrameSetElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLFrameSetElement(obj));
}

PyObject* pywrapHTMLHeadElement(WebCore::HTMLHeadElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLHeadElement_Type, coreptr);
}

WebCore::HTMLHeadElement *coreHTMLHeadElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLHeadElement*>(coreptr);
}

#define PyDOMHTMLHeadElement PyDOMObject
PyObject* toPython(WebCore::HTMLHeadElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLHeadElement(obj));
}

PyObject* pywrapHTMLHeadingElement(WebCore::HTMLHeadingElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLHeadingElement_Type, coreptr);
}

WebCore::HTMLHeadingElement *coreHTMLHeadingElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLHeadingElement*>(coreptr);
}

#define PyDOMHTMLHeadingElement PyDOMObject
PyObject* toPython(WebCore::HTMLHeadingElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLHeadingElement(obj));
}

PyObject* pywrapHTMLHRElement(WebCore::HTMLHRElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLHRElement_Type, coreptr);
}

WebCore::HTMLHRElement *coreHTMLHRElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLHRElement*>(coreptr);
}

#define PyDOMHTMLHRElement PyDOMObject
PyObject* toPython(WebCore::HTMLHRElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLHRElement(obj));
}

PyObject* pywrapHTMLHtmlElement(WebCore::HTMLHtmlElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLHtmlElement_Type, coreptr);
}

WebCore::HTMLHtmlElement *coreHTMLHtmlElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLHtmlElement*>(coreptr);
}

#define PyDOMHTMLHtmlElement PyDOMObject
PyObject* toPython(WebCore::HTMLHtmlElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLHtmlElement(obj));
}

PyObject* pywrapHTMLIFrameElement(WebCore::HTMLIFrameElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLIFrameElement_Type, coreptr);
}

WebCore::HTMLIFrameElement *coreHTMLIFrameElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLIFrameElement*>(coreptr);
}

#define PyDOMHTMLIFrameElement PyDOMObject
PyObject* toPython(WebCore::HTMLIFrameElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLIFrameElement(obj));
}

PyObject* pywrapHTMLImageElement(WebCore::HTMLImageElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLImageElement_Type, coreptr);
}

WebCore::HTMLImageElement *coreHTMLImageElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLImageElement*>(coreptr);
}

#define PyDOMHTMLImageElement PyDOMObject
PyObject* toPython(WebCore::HTMLImageElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLImageElement(obj));
}

PyObject* pywrapHTMLInputElement(WebCore::HTMLInputElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLInputElement_Type, coreptr);
}

WebCore::HTMLInputElement *coreHTMLInputElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLInputElement*>(coreptr);
}

#define PyDOMHTMLInputElement PyDOMObject
PyObject* toPython(WebCore::HTMLInputElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLInputElement(obj));
}

PyObject* pywrapHTMLIsIndexElement(WebCore::HTMLIsIndexElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLIsIndexElement_Type, coreptr);
}

WebCore::HTMLIsIndexElement *coreHTMLIsIndexElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLIsIndexElement*>(coreptr);
}

#define PyDOMHTMLIsIndexElement PyDOMObject
PyObject* toPython(WebCore::HTMLIsIndexElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLIsIndexElement(obj));
}

PyObject* pywrapHTMLLabelElement(WebCore::HTMLLabelElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLLabelElement_Type, coreptr);
}

WebCore::HTMLLabelElement *coreHTMLLabelElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLLabelElement*>(coreptr);
}

#define PyDOMHTMLLabelElement PyDOMObject
PyObject* toPython(WebCore::HTMLLabelElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLLabelElement(obj));
}

PyObject* pywrapHTMLLegendElement(WebCore::HTMLLegendElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLLegendElement_Type, coreptr);
}

WebCore::HTMLLegendElement *coreHTMLLegendElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLLegendElement*>(coreptr);
}

#define PyDOMHTMLLegendElement PyDOMObject
PyObject* toPython(WebCore::HTMLLegendElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLLegendElement(obj));
}

PyObject* pywrapHTMLLIElement(WebCore::HTMLLIElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLLIElement_Type, coreptr);
}

WebCore::HTMLLIElement *coreHTMLLIElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLLIElement*>(coreptr);
}

#define PyDOMHTMLLIElement PyDOMObject
PyObject* toPython(WebCore::HTMLLIElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLLIElement(obj));
}

PyObject* pywrapHTMLLinkElement(WebCore::HTMLLinkElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLLinkElement_Type, coreptr);
}

WebCore::HTMLLinkElement *coreHTMLLinkElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLLinkElement*>(coreptr);
}

#define PyDOMHTMLLinkElement PyDOMObject
PyObject* toPython(WebCore::HTMLLinkElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLLinkElement(obj));
}

PyObject* pywrapHTMLMapElement(WebCore::HTMLMapElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLMapElement_Type, coreptr);
}

WebCore::HTMLMapElement *coreHTMLMapElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLMapElement*>(coreptr);
}

#define PyDOMHTMLMapElement PyDOMObject
PyObject* toPython(WebCore::HTMLMapElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLMapElement(obj));
}

PyObject* pywrapHTMLMarqueeElement(WebCore::HTMLMarqueeElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLMarqueeElement_Type, coreptr);
}

WebCore::HTMLMarqueeElement *coreHTMLMarqueeElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLMarqueeElement*>(coreptr);
}

#define PyDOMHTMLMarqueeElement PyDOMObject
PyObject* toPython(WebCore::HTMLMarqueeElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLMarqueeElement(obj));
}

PyObject* pywrapHTMLMediaElement(WebCore::HTMLMediaElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLMediaElement_Type, coreptr);
}

WebCore::HTMLMediaElement *coreHTMLMediaElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLMediaElement*>(coreptr);
}

#define PyDOMHTMLMediaElement PyDOMObject
PyObject* toPython(WebCore::HTMLMediaElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLMediaElement(obj));
}

PyObject* pywrapHTMLMenuElement(WebCore::HTMLMenuElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLMenuElement_Type, coreptr);
}

WebCore::HTMLMenuElement *coreHTMLMenuElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLMenuElement*>(coreptr);
}

#define PyDOMHTMLMenuElement PyDOMObject
PyObject* toPython(WebCore::HTMLMenuElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLMenuElement(obj));
}

PyObject* pywrapHTMLMetaElement(WebCore::HTMLMetaElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLMetaElement_Type, coreptr);
}

WebCore::HTMLMetaElement *coreHTMLMetaElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLMetaElement*>(coreptr);
}

#define PyDOMHTMLMetaElement PyDOMObject
PyObject* toPython(WebCore::HTMLMetaElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLMetaElement(obj));
}

PyObject* pywrapHTMLModElement(WebCore::HTMLModElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLModElement_Type, coreptr);
}

WebCore::HTMLModElement *coreHTMLModElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLModElement*>(coreptr);
}

#define PyDOMHTMLModElement PyDOMObject
PyObject* toPython(WebCore::HTMLModElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLModElement(obj));
}

PyObject* pywrapHTMLObjectElement(WebCore::HTMLObjectElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLObjectElement_Type, coreptr);
}

WebCore::HTMLObjectElement *coreHTMLObjectElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLObjectElement*>(coreptr);
}

#define PyDOMHTMLObjectElement PyDOMObject
PyObject* toPython(WebCore::HTMLObjectElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLObjectElement(obj));
}

PyObject* pywrapHTMLOListElement(WebCore::HTMLOListElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLOListElement_Type, coreptr);
}

WebCore::HTMLOListElement *coreHTMLOListElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLOListElement*>(coreptr);
}

#define PyDOMHTMLOListElement PyDOMObject
PyObject* toPython(WebCore::HTMLOListElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLOListElement(obj));
}

PyObject* pywrapHTMLOptGroupElement(WebCore::HTMLOptGroupElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLOptGroupElement_Type, coreptr);
}

WebCore::HTMLOptGroupElement *coreHTMLOptGroupElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLOptGroupElement*>(coreptr);
}

#define PyDOMHTMLOptGroupElement PyDOMObject
PyObject* toPython(WebCore::HTMLOptGroupElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLOptGroupElement(obj));
}

PyObject* pywrapHTMLOptionElement(WebCore::HTMLOptionElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLOptionElement_Type, coreptr);
}

WebCore::HTMLOptionElement *coreHTMLOptionElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLOptionElement*>(coreptr);
}

#define PyDOMHTMLOptionElement PyDOMObject
PyObject* toPython(WebCore::HTMLOptionElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLOptionElement(obj));
}

PyObject* pywrapHTMLOptionsCollection(WebCore::HTMLOptionsCollection* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLOptionsCollection_Type, coreptr);
}

WebCore::HTMLOptionsCollection *coreHTMLOptionsCollection(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLOptionsCollection*>(coreptr);
}

#define PyDOMHTMLOptionsCollection PyDOMObject
PyObject* toPython(WebCore::HTMLOptionsCollection* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLOptionsCollection(obj));
}

PyObject* pywrapHTMLParagraphElement(WebCore::HTMLParagraphElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLParagraphElement_Type, coreptr);
}

WebCore::HTMLParagraphElement *coreHTMLParagraphElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLParagraphElement*>(coreptr);
}

#define PyDOMHTMLParagraphElement PyDOMObject
PyObject* toPython(WebCore::HTMLParagraphElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLParagraphElement(obj));
}

PyObject* pywrapHTMLParamElement(WebCore::HTMLParamElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLParamElement_Type, coreptr);
}

WebCore::HTMLParamElement *coreHTMLParamElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLParamElement*>(coreptr);
}

#define PyDOMHTMLParamElement PyDOMObject
PyObject* toPython(WebCore::HTMLParamElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLParamElement(obj));
}

PyObject* pywrapHTMLPreElement(WebCore::HTMLPreElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLPreElement_Type, coreptr);
}

WebCore::HTMLPreElement *coreHTMLPreElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLPreElement*>(coreptr);
}

#define PyDOMHTMLPreElement PyDOMObject
PyObject* toPython(WebCore::HTMLPreElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLPreElement(obj));
}

PyObject* pywrapHTMLProgressElement(WebCore::HTMLProgressElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLProgressElement_Type, coreptr);
}

WebCore::HTMLProgressElement *coreHTMLProgressElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLProgressElement*>(coreptr);
}

#define PyDOMHTMLProgressElement PyDOMObject
PyObject* toPython(WebCore::HTMLProgressElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLProgressElement(obj));
}

PyObject* pywrapHTMLQuoteElement(WebCore::HTMLQuoteElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLQuoteElement_Type, coreptr);
}

WebCore::HTMLQuoteElement *coreHTMLQuoteElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLQuoteElement*>(coreptr);
}

#define PyDOMHTMLQuoteElement PyDOMObject
PyObject* toPython(WebCore::HTMLQuoteElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLQuoteElement(obj));
}

PyObject* pywrapHTMLScriptElement(WebCore::HTMLScriptElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLScriptElement_Type, coreptr);
}

WebCore::HTMLScriptElement *coreHTMLScriptElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLScriptElement*>(coreptr);
}

#define PyDOMHTMLScriptElement PyDOMObject
PyObject* toPython(WebCore::HTMLScriptElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLScriptElement(obj));
}

PyObject* pywrapHTMLSelectElement(WebCore::HTMLSelectElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLSelectElement_Type, coreptr);
}

WebCore::HTMLSelectElement *coreHTMLSelectElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLSelectElement*>(coreptr);
}

#define PyDOMHTMLSelectElement PyDOMObject
PyObject* toPython(WebCore::HTMLSelectElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLSelectElement(obj));
}

PyObject* pywrapHTMLSourceElement(WebCore::HTMLSourceElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLSourceElement_Type, coreptr);
}

WebCore::HTMLSourceElement *coreHTMLSourceElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLSourceElement*>(coreptr);
}

#define PyDOMHTMLSourceElement PyDOMObject
PyObject* toPython(WebCore::HTMLSourceElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLSourceElement(obj));
}

PyObject* pywrapHTMLStyleElement(WebCore::HTMLStyleElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLStyleElement_Type, coreptr);
}

WebCore::HTMLStyleElement *coreHTMLStyleElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLStyleElement*>(coreptr);
}

#define PyDOMHTMLStyleElement PyDOMObject
PyObject* toPython(WebCore::HTMLStyleElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLStyleElement(obj));
}

PyObject* pywrapHTMLTableCaptionElement(WebCore::HTMLTableCaptionElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLTableCaptionElement_Type, coreptr);
}

WebCore::HTMLTableCaptionElement *coreHTMLTableCaptionElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLTableCaptionElement*>(coreptr);
}

#define PyDOMHTMLTableCaptionElement PyDOMObject
PyObject* toPython(WebCore::HTMLTableCaptionElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLTableCaptionElement(obj));
}

PyObject* pywrapHTMLTableCellElement(WebCore::HTMLTableCellElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLTableCellElement_Type, coreptr);
}

WebCore::HTMLTableCellElement *coreHTMLTableCellElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLTableCellElement*>(coreptr);
}

#define PyDOMHTMLTableCellElement PyDOMObject
PyObject* toPython(WebCore::HTMLTableCellElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLTableCellElement(obj));
}

PyObject* pywrapHTMLTableColElement(WebCore::HTMLTableColElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLTableColElement_Type, coreptr);
}

WebCore::HTMLTableColElement *coreHTMLTableColElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLTableColElement*>(coreptr);
}

#define PyDOMHTMLTableColElement PyDOMObject
PyObject* toPython(WebCore::HTMLTableColElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLTableColElement(obj));
}

PyObject* pywrapHTMLTableElement(WebCore::HTMLTableElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLTableElement_Type, coreptr);
}

WebCore::HTMLTableElement *coreHTMLTableElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLTableElement*>(coreptr);
}

#define PyDOMHTMLTableElement PyDOMObject
PyObject* toPython(WebCore::HTMLTableElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLTableElement(obj));
}

PyObject* pywrapHTMLTableRowElement(WebCore::HTMLTableRowElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLTableRowElement_Type, coreptr);
}

WebCore::HTMLTableRowElement *coreHTMLTableRowElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLTableRowElement*>(coreptr);
}

#define PyDOMHTMLTableRowElement PyDOMObject
PyObject* toPython(WebCore::HTMLTableRowElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLTableRowElement(obj));
}

PyObject* pywrapHTMLTableSectionElement(WebCore::HTMLTableSectionElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLTableSectionElement_Type, coreptr);
}

WebCore::HTMLTableSectionElement *coreHTMLTableSectionElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLTableSectionElement*>(coreptr);
}

#define PyDOMHTMLTableSectionElement PyDOMObject
PyObject* toPython(WebCore::HTMLTableSectionElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLTableSectionElement(obj));
}

PyObject* pywrapHTMLTextAreaElement(WebCore::HTMLTextAreaElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLTextAreaElement_Type, coreptr);
}

WebCore::HTMLTextAreaElement *coreHTMLTextAreaElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLTextAreaElement*>(coreptr);
}

#define PyDOMHTMLTextAreaElement PyDOMObject
PyObject* toPython(WebCore::HTMLTextAreaElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLTextAreaElement(obj));
}

PyObject* pywrapHTMLTitleElement(WebCore::HTMLTitleElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLTitleElement_Type, coreptr);
}

WebCore::HTMLTitleElement *coreHTMLTitleElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLTitleElement*>(coreptr);
}

#define PyDOMHTMLTitleElement PyDOMObject
PyObject* toPython(WebCore::HTMLTitleElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLTitleElement(obj));
}

PyObject* pywrapHTMLUListElement(WebCore::HTMLUListElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLUListElement_Type, coreptr);
}

WebCore::HTMLUListElement *coreHTMLUListElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLUListElement*>(coreptr);
}

#define PyDOMHTMLUListElement PyDOMObject
PyObject* toPython(WebCore::HTMLUListElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLUListElement(obj));
}

PyObject* pywrapHTMLVideoElement(WebCore::HTMLVideoElement* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHTMLVideoElement_Type, coreptr);
}

WebCore::HTMLVideoElement *coreHTMLVideoElement(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::HTMLVideoElement*>(coreptr);
}

#define PyDOMHTMLVideoElement PyDOMObject
PyObject* toPython(WebCore::HTMLVideoElement* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHTMLVideoElement(obj));
}

PyObject* pywrapImageData(WebCore::ImageData* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMImageData_Type, coreptr);
}

WebCore::ImageData *coreImageData(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::ImageData*>(coreptr);
}

#define PyDOMImageData PyDOMObject
PyObject* toPython(WebCore::ImageData* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapImageData(obj));
}

PyObject* pywrapMediaError(WebCore::MediaError* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMMediaError_Type, coreptr);
}

WebCore::MediaError *coreMediaError(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::MediaError*>(coreptr);
}

#define PyDOMMediaError PyDOMObject
PyObject* toPython(WebCore::MediaError* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapMediaError(obj));
}

PyObject* pywrapTextMetrics(WebCore::TextMetrics* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMTextMetrics_Type, coreptr);
}

WebCore::TextMetrics *coreTextMetrics(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::TextMetrics*>(coreptr);
}

#define PyDOMTextMetrics PyDOMObject
PyObject* toPython(WebCore::TextMetrics* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapTextMetrics(obj));
}

PyObject* pywrapTimeRanges(WebCore::TimeRanges* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMTimeRanges_Type, coreptr);
}

WebCore::TimeRanges *coreTimeRanges(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::TimeRanges*>(coreptr);
}

#define PyDOMTimeRanges PyDOMObject
PyObject* toPython(WebCore::TimeRanges* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapTimeRanges(obj));
}

PyObject* pywrapValidityState(WebCore::ValidityState* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMValidityState_Type, coreptr);
}

WebCore::ValidityState *coreValidityState(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::ValidityState*>(coreptr);
}

#define PyDOMValidityState PyDOMObject
PyObject* toPython(WebCore::ValidityState* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapValidityState(obj));
}

PyObject* pywrapVoidCallback(WebCore::VoidCallback* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMVoidCallback_Type, coreptr);
}

WebCore::VoidCallback *coreVoidCallback(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::VoidCallback*>(coreptr);
}

#define PyDOMVoidCallback PyDOMObject
PyObject* toPython(WebCore::VoidCallback* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapVoidCallback(obj));
}

PyObject* pywrapXMLHttpRequestException(WebCore::XMLHttpRequestException* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMXMLHttpRequestException_Type, coreptr);
}

WebCore::XMLHttpRequestException *coreXMLHttpRequestException(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::XMLHttpRequestException*>(coreptr);
}

#define PyDOMXMLHttpRequestException PyDOMObject
PyObject* toPython(WebCore::XMLHttpRequestException* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapXMLHttpRequestException(obj));
}

PyObject* pywrapXMLHttpRequest(WebCore::XMLHttpRequest* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMXMLHttpRequest_Type, coreptr);
}

WebCore::XMLHttpRequest *coreXMLHttpRequest(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::XMLHttpRequest*>(coreptr);
}

#define PyDOMXMLHttpRequest PyDOMObject
PyObject* toPython(WebCore::XMLHttpRequest* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapXMLHttpRequest(obj));
}

PyObject* pywrapXMLHttpRequestProgressEvent(WebCore::XMLHttpRequestProgressEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMXMLHttpRequestProgressEvent_Type, coreptr);
}

WebCore::XMLHttpRequestProgressEvent *coreXMLHttpRequestProgressEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::XMLHttpRequestProgressEvent*>(coreptr);
}

#define PyDOMXMLHttpRequestProgressEvent PyDOMObject
PyObject* toPython(WebCore::XMLHttpRequestProgressEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapXMLHttpRequestProgressEvent(obj));
}

PyObject* pywrapXMLHttpRequestUpload(WebCore::XMLHttpRequestUpload* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMXMLHttpRequestUpload_Type, coreptr);
}

WebCore::XMLHttpRequestUpload *coreXMLHttpRequestUpload(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::XMLHttpRequestUpload*>(coreptr);
}

#define PyDOMXMLHttpRequestUpload PyDOMObject
PyObject* toPython(WebCore::XMLHttpRequestUpload* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapXMLHttpRequestUpload(obj));
}

PyObject* pywrapBarInfo(WebCore::BarInfo* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMBarInfo_Type, coreptr);
}

WebCore::BarInfo *coreBarInfo(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::BarInfo*>(coreptr);
}

#define PyDOMBarInfo PyDOMObject
PyObject* toPython(WebCore::BarInfo* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapBarInfo(obj));
}

PyObject* pywrapCoordinates(WebCore::Coordinates* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCoordinates_Type, coreptr);
}

WebCore::Coordinates *coreCoordinates(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Coordinates*>(coreptr);
}

#define PyDOMCoordinates PyDOMObject
PyObject* toPython(WebCore::Coordinates* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCoordinates(obj));
}

PyObject* pywrapDOMSelection(WebCore::DOMSelection* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMDOMSelection_Type, coreptr);
}

WebCore::DOMSelection *coreDOMSelection(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::DOMSelection*>(coreptr);
}

#define PyDOMDOMSelection PyDOMObject
PyObject* toPython(WebCore::DOMSelection* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapDOMSelection(obj));
}

PyObject* pywrapDOMWindow(WebCore::DOMWindow* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMDOMWindow_Type, coreptr);
}

WebCore::DOMWindow *coreDOMWindow(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::DOMWindow*>(coreptr);
}

#define PyDOMDOMWindow PyDOMObject
PyObject* toPython(WebCore::DOMWindow* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapDOMWindow(obj));
}

PyObject* pywrapEventSource(WebCore::EventSource* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMEventSource_Type, coreptr);
}

WebCore::EventSource *coreEventSource(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::EventSource*>(coreptr);
}

#define PyDOMEventSource PyDOMObject
PyObject* toPython(WebCore::EventSource* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapEventSource(obj));
}

PyObject* pywrapGeolocation(WebCore::Geolocation* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMGeolocation_Type, coreptr);
}

WebCore::Geolocation *coreGeolocation(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Geolocation*>(coreptr);
}

#define PyDOMGeolocation PyDOMObject
PyObject* toPython(WebCore::Geolocation* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapGeolocation(obj));
}

PyObject* pywrapGeoposition(WebCore::Geoposition* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMGeoposition_Type, coreptr);
}

WebCore::Geoposition *coreGeoposition(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Geoposition*>(coreptr);
}

#define PyDOMGeoposition PyDOMObject
PyObject* toPython(WebCore::Geoposition* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapGeoposition(obj));
}

PyObject* pywrapHistory(WebCore::History* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMHistory_Type, coreptr);
}

WebCore::History *coreHistory(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::History*>(coreptr);
}

#define PyDOMHistory PyDOMObject
PyObject* toPython(WebCore::History* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapHistory(obj));
}

PyObject* pywrapLocation(WebCore::Location* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMLocation_Type, coreptr);
}

WebCore::Location *coreLocation(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Location*>(coreptr);
}

#define PyDOMLocation PyDOMObject
PyObject* toPython(WebCore::Location* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapLocation(obj));
}

PyObject* pywrapNavigator(WebCore::Navigator* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMNavigator_Type, coreptr);
}

WebCore::Navigator *coreNavigator(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Navigator*>(coreptr);
}

#define PyDOMNavigator PyDOMObject
PyObject* toPython(WebCore::Navigator* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapNavigator(obj));
}

PyObject* pywrapPositionError(WebCore::PositionError* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMPositionError_Type, coreptr);
}

WebCore::PositionError *corePositionError(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::PositionError*>(coreptr);
}

#define PyDOMPositionError PyDOMObject
PyObject* toPython(WebCore::PositionError* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapPositionError(obj));
}

PyObject* pywrapScreen(WebCore::Screen* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMScreen_Type, coreptr);
}

WebCore::Screen *coreScreen(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Screen*>(coreptr);
}

#define PyDOMScreen PyDOMObject
PyObject* toPython(WebCore::Screen* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapScreen(obj));
}

PyObject* pywrapWebKitPoint(WebCore::WebKitPoint* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMWebKitPoint_Type, coreptr);
}

WebCore::WebKitPoint *coreWebKitPoint(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::WebKitPoint*>(coreptr);
}

#define PyDOMWebKitPoint PyDOMObject
PyObject* toPython(WebCore::WebKitPoint* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapWebKitPoint(obj));
}

PyObject* pywrapWorkerNavigator(WebCore::WorkerNavigator* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMWorkerNavigator_Type, coreptr);
}

WebCore::WorkerNavigator *coreWorkerNavigator(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::WorkerNavigator*>(coreptr);
}

#define PyDOMWorkerNavigator PyDOMObject
PyObject* toPython(WebCore::WorkerNavigator* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapWorkerNavigator(obj));
}

PyObject* pywrapCounter(WebCore::Counter* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCounter_Type, coreptr);
}

WebCore::Counter *coreCounter(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Counter*>(coreptr);
}

#define PyDOMCounter PyDOMObject
PyObject* toPython(WebCore::Counter* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCounter(obj));
}

PyObject* pywrapCSSCharsetRule(WebCore::CSSCharsetRule* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSCharsetRule_Type, coreptr);
}

WebCore::CSSCharsetRule *coreCSSCharsetRule(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSCharsetRule*>(coreptr);
}

#define PyDOMCSSCharsetRule PyDOMObject
PyObject* toPython(WebCore::CSSCharsetRule* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCSSCharsetRule(obj));
}

PyObject* pywrapCSSFontFaceRule(WebCore::CSSFontFaceRule* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSFontFaceRule_Type, coreptr);
}

WebCore::CSSFontFaceRule *coreCSSFontFaceRule(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSFontFaceRule*>(coreptr);
}

#define PyDOMCSSFontFaceRule PyDOMObject
PyObject* toPython(WebCore::CSSFontFaceRule* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCSSFontFaceRule(obj));
}

PyObject* pywrapCSSImportRule(WebCore::CSSImportRule* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSImportRule_Type, coreptr);
}

WebCore::CSSImportRule *coreCSSImportRule(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSImportRule*>(coreptr);
}

#define PyDOMCSSImportRule PyDOMObject
PyObject* toPython(WebCore::CSSImportRule* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCSSImportRule(obj));
}

PyObject* pywrapCSSMediaRule(WebCore::CSSMediaRule* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSMediaRule_Type, coreptr);
}

WebCore::CSSMediaRule *coreCSSMediaRule(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSMediaRule*>(coreptr);
}

#define PyDOMCSSMediaRule PyDOMObject
PyObject* toPython(WebCore::CSSMediaRule* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCSSMediaRule(obj));
}

PyObject* pywrapCSSPageRule(WebCore::CSSPageRule* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSPageRule_Type, coreptr);
}

WebCore::CSSPageRule *coreCSSPageRule(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSPageRule*>(coreptr);
}

#define PyDOMCSSPageRule PyDOMObject
PyObject* toPython(WebCore::CSSPageRule* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCSSPageRule(obj));
}

PyObject* pywrapCSSPrimitiveValue(WebCore::CSSPrimitiveValue* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSPrimitiveValue_Type, coreptr);
}

WebCore::CSSPrimitiveValue *coreCSSPrimitiveValue(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSPrimitiveValue*>(coreptr);
}

#define PyDOMCSSPrimitiveValue PyDOMObject
PyObject* toPython(WebCore::CSSPrimitiveValue* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCSSPrimitiveValue(obj));
}

PyObject* pywrapCSSRule(WebCore::CSSRule* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSRule_Type, coreptr);
}

WebCore::CSSRule *coreCSSRule(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSRule*>(coreptr);
}

#define PyDOMCSSRule PyDOMObject
PyObject* toPython(WebCore::CSSRule*);

PyObject* pywrapCSSRuleList(WebCore::CSSRuleList* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSRuleList_Type, coreptr);
}

WebCore::CSSRuleList *coreCSSRuleList(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSRuleList*>(coreptr);
}

#define PyDOMCSSRuleList PyDOMObject
PyObject* toPython(WebCore::CSSRuleList* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCSSRuleList(obj));
}

PyObject* pywrapCSSStyleDeclaration(WebCore::CSSStyleDeclaration* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSStyleDeclaration_Type, coreptr);
}

WebCore::CSSStyleDeclaration *coreCSSStyleDeclaration(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSStyleDeclaration*>(coreptr);
}

#define PyDOMCSSStyleDeclaration PyDOMObject
PyObject* toPython(WebCore::CSSStyleDeclaration* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCSSStyleDeclaration(obj));
}

PyObject* pywrapCSSStyleRule(WebCore::CSSStyleRule* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSStyleRule_Type, coreptr);
}

WebCore::CSSStyleRule *coreCSSStyleRule(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSStyleRule*>(coreptr);
}

#define PyDOMCSSStyleRule PyDOMObject
PyObject* toPython(WebCore::CSSStyleRule* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCSSStyleRule(obj));
}

PyObject* pywrapCSSStyleSheet(WebCore::CSSStyleSheet* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSStyleSheet_Type, coreptr);
}

WebCore::CSSStyleSheet *coreCSSStyleSheet(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSStyleSheet*>(coreptr);
}

#define PyDOMCSSStyleSheet PyDOMObject
PyObject* toPython(WebCore::CSSStyleSheet* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCSSStyleSheet(obj));
}

PyObject* pywrapCSSUnknownRule(WebCore::CSSUnknownRule* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSUnknownRule_Type, coreptr);
}

WebCore::CSSUnknownRule *coreCSSUnknownRule(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSUnknownRule*>(coreptr);
}

#define PyDOMCSSUnknownRule PyDOMObject
PyObject* toPython(WebCore::CSSUnknownRule* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCSSUnknownRule(obj));
}

PyObject* pywrapCSSValue(WebCore::CSSValue* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSValue_Type, coreptr);
}

WebCore::CSSValue *coreCSSValue(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSValue*>(coreptr);
}

#define PyDOMCSSValue PyDOMObject
PyObject* toPython(WebCore::CSSValue*);

PyObject* pywrapCSSValueList(WebCore::CSSValueList* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMCSSValueList_Type, coreptr);
}

WebCore::CSSValueList *coreCSSValueList(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::CSSValueList*>(coreptr);
}

#define PyDOMCSSValueList PyDOMObject
PyObject* toPython(WebCore::CSSValueList* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapCSSValueList(obj));
}


PyObject* pywrapMediaList(WebCore::MediaList* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMMediaList_Type, coreptr);
}

WebCore::MediaList *coreMediaList(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::MediaList*>(coreptr);
}

#define PyDOMMediaList PyDOMObject
PyObject* toPython(WebCore::MediaList* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapMediaList(obj));
}

PyObject* pywrapRect(WebCore::Rect* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMRect_Type, coreptr);
}

WebCore::Rect *coreRect(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::Rect*>(coreptr);
}

#define PyDOMRect PyDOMObject
PyObject* toPython(WebCore::Rect* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapRect(obj));
}

PyObject* pywrapRGBColor(WebCore::RGBColor* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMRGBColor_Type, coreptr);
}

WebCore::RGBColor *coreRGBColor(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::RGBColor*>(coreptr);
}

#define PyDOMRGBColor PyDOMObject
PyObject* toPython(WebCore::RGBColor* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapRGBColor(obj));
}

PyObject* pywrapStyleMedia(WebCore::StyleMedia* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMStyleMedia_Type, coreptr);
}

WebCore::StyleMedia *coreStyleMedia(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::StyleMedia*>(coreptr);
}

#define PyDOMStyleMedia PyDOMObject
PyObject* toPython(WebCore::StyleMedia* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapStyleMedia(obj));
}

PyObject* pywrapStyleSheet(WebCore::StyleSheet* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMStyleSheet_Type, coreptr);
}

WebCore::StyleSheet *coreStyleSheet(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::StyleSheet*>(coreptr);
}

#define PyDOMStyleSheet PyDOMObject
PyObject* toPython(WebCore::StyleSheet*);

PyObject* pywrapStyleSheetList(WebCore::StyleSheetList* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMStyleSheetList_Type, coreptr);
}

WebCore::StyleSheetList *coreStyleSheetList(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::StyleSheetList*>(coreptr);
}

#define PyDOMStyleSheetList PyDOMObject
PyObject* toPython(WebCore::StyleSheetList* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapStyleSheetList(obj));
}

PyObject* pywrapWebKitCSSKeyframeRule(WebCore::WebKitCSSKeyframeRule* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMWebKitCSSKeyframeRule_Type, coreptr);
}

WebCore::WebKitCSSKeyframeRule *coreWebKitCSSKeyframeRule(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::WebKitCSSKeyframeRule*>(coreptr);
}

#define PyDOMWebKitCSSKeyframeRule PyDOMObject
PyObject* toPython(WebCore::WebKitCSSKeyframeRule* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapWebKitCSSKeyframeRule(obj));
}

PyObject* pywrapWebKitCSSKeyframesRule(WebCore::WebKitCSSKeyframesRule* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMWebKitCSSKeyframesRule_Type, coreptr);
}

WebCore::WebKitCSSKeyframesRule *coreWebKitCSSKeyframesRule(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::WebKitCSSKeyframesRule*>(coreptr);
}

#define PyDOMWebKitCSSKeyframesRule PyDOMObject
PyObject* toPython(WebCore::WebKitCSSKeyframesRule* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapWebKitCSSKeyframesRule(obj));
}

PyObject* pywrapWebKitCSSMatrix(WebCore::WebKitCSSMatrix* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMWebKitCSSMatrix_Type, coreptr);
}

WebCore::WebKitCSSMatrix *coreWebKitCSSMatrix(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::WebKitCSSMatrix*>(coreptr);
}

#define PyDOMWebKitCSSMatrix PyDOMObject
PyObject* toPython(WebCore::WebKitCSSMatrix* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapWebKitCSSMatrix(obj));
}

PyObject* pywrapWebKitCSSTransformValue(WebCore::WebKitCSSTransformValue* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMWebKitCSSTransformValue_Type, coreptr);
}

WebCore::WebKitCSSTransformValue *coreWebKitCSSTransformValue(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::WebKitCSSTransformValue*>(coreptr);
}

#define PyDOMWebKitCSSTransformValue PyDOMObject
PyObject* toPython(WebCore::WebKitCSSTransformValue* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapWebKitCSSTransformValue(obj));
}

PyObject* pywrapStorageEvent(WebCore::StorageEvent* coreObject)
{
    void *coreptr = (static_cast<void*>(coreObject));
    coreObject->ref();
    return PyDOMObject_new(PtrPyDOMStorageEvent_Type, coreptr);
}

WebCore::StorageEvent *coreStorageEvent(PyDOMObject* request)
{
    void *coreptr = ((PyDOMObject*)request)->ptr;
    return static_cast<WebCore::StorageEvent*>(coreptr);
}

#define PyDOMStorageEvent PyDOMObject
PyObject* toPython(WebCore::StorageEvent* obj)
{
    if (!obj)
        Py_RETURN_NONE;

    if (PyObject* ret = PythonObjectCache::getDOMObject(obj))
        return ret;

    return PythonObjectCache::putDOMObject(obj, WebKit::pywrapStorageEvent(obj));
}

} // namespace WebKit


/* ----------- Node ----------- */

namespace WebKit {
using namespace WebCore;

static int
Node_init(Node *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_Node_insertBefore(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"newChild", (char*)"refChild", NULL };
    PyDOMObject *newChild, *refChild;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:pywebkit.Node.insertBefore", kwlist, PtrPyDOMNode_Type, &newChild, PtrPyDOMNode_Type, &refChild))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    bool ok = coreNode(self)->insertBefore(coreNode(newChild), coreNode(refChild), ec);
    
    /* TODO: raise exception */
    if (!ok) {
        py_wk_exc(ec);
        return NULL;
    }
    Py_INCREF((PyObject*)newChild);
    return (PyObject*)newChild;

}

static PyObject *
_wrap_Node_replaceChild(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"newChild", (char*)"oldChild", NULL };
    PyDOMObject *newChild, *oldChild;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:pywebkit.Node.replaceChild", kwlist, PtrPyDOMNode_Type, &newChild, PtrPyDOMNode_Type, &oldChild))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    bool ok = coreNode(self)->replaceChild(coreNode(newChild), coreNode(oldChild), ec);
    
    /* TODO: raise exception */
    if (!ok) {
        py_wk_exc(ec);
        return NULL;
    }
    Py_INCREF((PyObject*)oldChild);
    return (PyObject*)oldChild;

}

static PyObject *
_wrap_Node_removeChild(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"oldChild", NULL };
    PyDOMObject *oldChild;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Node.removeChild", kwlist, PtrPyDOMNode_Type, &oldChild))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    bool ok = coreNode(self)->removeChild(coreNode(oldChild), ec);
    
    /* TODO: raise exception */
    if (!ok) {
        py_wk_exc(ec);
        return NULL;
    }
    Py_INCREF((PyObject*)oldChild);
    return (PyObject*)oldChild;

}

static PyObject *
_wrap_Node_appendChild(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"newChild", NULL };
    PyDOMObject *newChild;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Node.appendChild", kwlist, PtrPyDOMNode_Type, &newChild))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    bool ok = coreNode(self)->appendChild(coreNode(newChild), ec);
    
    /* TODO: raise exception */
    if (!ok) {
        py_wk_exc(ec);
        return NULL;
    }
    Py_INCREF((PyObject*)newChild);
    return (PyObject*)newChild;

}

static PyObject *
_wrap_Node_hasChildNodes(PyDOMObject *self)
{
    bool ret;

    
    ret = coreNode(self)->hasChildNodes();
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Node_cloneNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"deep", NULL };
    int deep;
    PyObject *py_ret;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:pywebkit.Node.cloneNode", kwlist, &deep))
        return NULL;
    bool cvt_deep = (bool)deep;
    
    _ret = WTF::getPtr(coreNode(self)->cloneNode(cvt_deep));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Node_normalize(PyDOMObject *self)
{
    
    coreNode(self)->normalize();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Node_isSupported(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"feature", (char*)"version", NULL };
    char *feature, *version;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.Node.isSupported", kwlist, &feature, &version))
        return NULL;
    WTF::String cvt_feature = WTF::String::fromUTF8((const char*)feature);
    WTF::String cvt_version = WTF::String::fromUTF8((const char*)version);
    
    ret = coreNode(self)->isSupported(cvt_feature, cvt_version);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Node_hasAttributes(PyDOMObject *self)
{
    bool ret;

    
    ret = coreNode(self)->hasAttributes();
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Node_isSameNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"other", NULL };
    PyDOMObject *other;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Node.isSameNode", kwlist, PtrPyDOMNode_Type, &other))
        return NULL;
    
    ret = coreNode(self)->isSameNode(coreNode(other));
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Node_isEqualNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"other", NULL };
    PyDOMObject *other;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Node.isEqualNode", kwlist, PtrPyDOMNode_Type, &other))
        return NULL;
    
    ret = coreNode(self)->isEqualNode(coreNode(other));
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Node_lookupPrefix(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", NULL };
    char *namespaceURI, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Node.lookupPrefix", kwlist, &namespaceURI))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    
    ret = coreNode(self)->lookupPrefix(cvt_namespaceURI);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_Node_isDefaultNamespace(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", NULL };
    char *namespaceURI;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Node.isDefaultNamespace", kwlist, &namespaceURI))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    
    ret = coreNode(self)->isDefaultNamespace(cvt_namespaceURI);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Node_lookupNamespaceURI(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"prefix", NULL };
    char *prefix, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Node.lookupNamespaceURI", kwlist, &prefix))
        return NULL;
    WTF::String cvt_prefix = WTF::String::fromUTF8((const char*)prefix);
    
    ret = coreNode(self)->lookupNamespaceURI(cvt_prefix);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_Node_compareDocumentPosition(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"other", NULL };
    int ret;
    PyDOMObject *other;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Node.compareDocumentPosition", kwlist, PtrPyDOMNode_Type, &other))
        return NULL;
    
    ret = coreNode(self)->compareDocumentPosition(coreNode(other));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_Node_addEventListener(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"listener", (char*)"useCapture", NULL };
    char *type;
    PyDOMObject *py_listener;
    int useCapture;
    EventListener *listener = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sOi:pywebkit.Node.addEventListener", kwlist, &type, &py_listener, &useCapture))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    if (py_listener)
        listener = coreEventListener(py_listener);
    bool cvt_useCapture = (bool)useCapture;
    
    coreNode(self)->addEventListener(cvt_type, (EventListener *) listener, cvt_useCapture);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Node_removeEventListener(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"listener", (char*)"useCapture", NULL };
    char *type;
    PyDOMObject *py_listener;
    int useCapture;
    EventListener *listener = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sOi:pywebkit.Node.removeEventListener", kwlist, &type, &py_listener, &useCapture))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    if (py_listener)
        listener = coreEventListener(py_listener);
    bool cvt_useCapture = (bool)useCapture;
    
    coreNode(self)->removeEventListener(cvt_type, (EventListener *) listener, cvt_useCapture);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Node_dispatchEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"event", NULL };
    PyDOMObject *event;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Node.dispatchEvent", kwlist, PtrPyDOMEvent_Type, &event))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreNode(self)->dispatchEvent(coreEvent(event), ec);
    
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMNode_methods[] = {
    { "insertBefore", (PyCFunction)WebKit::_wrap_Node_insertBefore, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "replaceChild", (PyCFunction)WebKit::_wrap_Node_replaceChild, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeChild", (PyCFunction)WebKit::_wrap_Node_removeChild, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "appendChild", (PyCFunction)WebKit::_wrap_Node_appendChild, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "hasChildNodes", (PyCFunction)WebKit::_wrap_Node_hasChildNodes, METH_NOARGS,
      NULL },
    { "cloneNode", (PyCFunction)WebKit::_wrap_Node_cloneNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "normalize", (PyCFunction)WebKit::_wrap_Node_normalize, METH_NOARGS,
      NULL },
    { "isSupported", (PyCFunction)WebKit::_wrap_Node_isSupported, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "hasAttributes", (PyCFunction)WebKit::_wrap_Node_hasAttributes, METH_NOARGS,
      NULL },
    { "isSameNode", (PyCFunction)WebKit::_wrap_Node_isSameNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "isEqualNode", (PyCFunction)WebKit::_wrap_Node_isEqualNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "lookupPrefix", (PyCFunction)WebKit::_wrap_Node_lookupPrefix, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "isDefaultNamespace", (PyCFunction)WebKit::_wrap_Node_isDefaultNamespace, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "lookupNamespaceURI", (PyCFunction)WebKit::_wrap_Node_lookupNamespaceURI, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "compareDocumentPosition", (PyCFunction)WebKit::_wrap_Node_compareDocumentPosition, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "addEventListener", (PyCFunction)WebKit::_wrap_Node_addEventListener, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeEventListener", (PyCFunction)WebKit::_wrap_Node_removeEventListener, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "dispatchEvent", (PyCFunction)WebKit::_wrap_Node_dispatchEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corenode__get_nodeName(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNode((PyDOMObject*)(self))->nodeName();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenode__get_nodeValue(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNode((PyDOMObject*)(self))->nodeValue();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corenode__set_nodeValue(PyObject *self, PyObject *args, void *closure)
{
    char *nodeValue;

    if (!PyArg_Parse(args,"s:_wrap_corenode__set_nodeValue", &nodeValue))
        return -1;
    WTF::String cvt_nodeValue = WTF::String::fromUTF8((const char*)nodeValue);
    WebCore::ExceptionCode ec = 0;
    coreNode((PyDOMObject*)(self))->setNodeValue(cvt_nodeValue, ec);

    return 0;
}

static PyObject *
_wrap_corenode__get_nodeType(PyObject *self, void *closure)
{
    int ret;

    ret = coreNode((PyDOMObject*)(self))->nodeType();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_corenode__get_parentNode(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreNode((PyDOMObject*)(self))->parentNode();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenode__get_childNodes(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::NodeList* _ret;
    WTF::PassRefPtr<WebCore::NodeList> ret;

    _ret = WTF::getPtr(coreNode((PyDOMObject*)(self))->childNodes());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenode__get_firstChild(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreNode((PyDOMObject*)(self))->firstChild();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenode__get_lastChild(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreNode((PyDOMObject*)(self))->lastChild();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenode__get_previousSibling(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreNode((PyDOMObject*)(self))->previousSibling();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenode__get_nextSibling(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreNode((PyDOMObject*)(self))->nextSibling();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenode__get_attributes(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::NamedNodeMap* _ret;

    _ret = coreNode((PyDOMObject*)(self))->attributes();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenode__get_ownerDocument(PyObject *self, void *closure)
{
    WebCore::Document* _ret;
    PyObject *py_ret;

    _ret = coreNode((PyDOMObject*)(self))->ownerDocument();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenode__get_namespaceURI(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNode((PyDOMObject*)(self))->namespaceURI();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenode__get_prefix(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNode((PyDOMObject*)(self))->prefix();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corenode__set_prefix(PyObject *self, PyObject *args, void *closure)
{
    char *prefix;

    if (!PyArg_Parse(args,"s:_wrap_corenode__set_prefix", &prefix))
        return -1;
    WTF::String cvt_prefix = WTF::String::fromUTF8((const char*)prefix);
    WebCore::ExceptionCode ec = 0;
    coreNode((PyDOMObject*)(self))->setPrefix(cvt_prefix, ec);

    return 0;
}

static PyObject *
_wrap_corenode__get_localName(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNode((PyDOMObject*)(self))->localName();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenode__get_baseURI(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNode((PyDOMObject*)(self))->baseURI();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenode__get_textContent(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNode((PyDOMObject*)(self))->textContent();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corenode__set_textContent(PyObject *self, PyObject *args, void *closure)
{
    char *textContent;

    if (!PyArg_Parse(args,"s:_wrap_corenode__set_textContent", &textContent))
        return -1;
    WTF::String cvt_textContent = WTF::String::fromUTF8((const char*)textContent);
    WebCore::ExceptionCode ec = 0;
    coreNode((PyDOMObject*)(self))->setTextContent(cvt_textContent, ec);

    return 0;
}

static PyObject *
_wrap_corenode__get_parentElement(PyObject *self, void *closure)
{
    WebCore::Element* _ret;
    PyObject *py_ret;

    _ret = coreNode((PyDOMObject*)(self))->parentElement();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corenode_getsets[] = {
    { (char*)"nodeName", (getter)WebKit::_wrap_corenode__get_nodeName, (setter)0, 0, 0 },
    { (char*)"nodeValue", (getter)WebKit::_wrap_corenode__get_nodeValue, (setter)WebKit::_wrap_corenode__set_nodeValue, 0, 0 },
    { (char*)"nodeType", (getter)WebKit::_wrap_corenode__get_nodeType, (setter)0, 0, 0 },
    { (char*)"parentNode", (getter)WebKit::_wrap_corenode__get_parentNode, (setter)0, 0, 0 },
    { (char*)"childNodes", (getter)WebKit::_wrap_corenode__get_childNodes, (setter)0, 0, 0 },
    { (char*)"firstChild", (getter)WebKit::_wrap_corenode__get_firstChild, (setter)0, 0, 0 },
    { (char*)"lastChild", (getter)WebKit::_wrap_corenode__get_lastChild, (setter)0, 0, 0 },
    { (char*)"previousSibling", (getter)WebKit::_wrap_corenode__get_previousSibling, (setter)0, 0, 0 },
    { (char*)"nextSibling", (getter)WebKit::_wrap_corenode__get_nextSibling, (setter)0, 0, 0 },
    { (char*)"attributes", (getter)WebKit::_wrap_corenode__get_attributes, (setter)0, 0, 0 },
    { (char*)"ownerDocument", (getter)WebKit::_wrap_corenode__get_ownerDocument, (setter)0, 0, 0 },
    { (char*)"namespaceURI", (getter)WebKit::_wrap_corenode__get_namespaceURI, (setter)0, 0, 0 },
    { (char*)"prefix", (getter)WebKit::_wrap_corenode__get_prefix, (setter)WebKit::_wrap_corenode__set_prefix, 0, 0 },
    { (char*)"localName", (getter)WebKit::_wrap_corenode__get_localName, (setter)0, 0, 0 },
    { (char*)"baseURI", (getter)WebKit::_wrap_corenode__get_baseURI, (setter)0, 0, 0 },
    { (char*)"textContent", (getter)WebKit::_wrap_corenode__get_textContent, (setter)WebKit::_wrap_corenode__set_textContent, 0, 0 },
    { (char*)"parentElement", (getter)WebKit::_wrap_corenode__get_parentElement, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Node(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Node* cobj = coreNode(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMNode_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Node",                   /* tp_name */
    sizeof(PyDOMNode),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Node,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMNode_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corenode_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Node_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Attr ----------- */

namespace WebKit {
using namespace WebCore;

static int
Attr_init(Attr *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMNode_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coreattr__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreAttr((PyDOMObject*)(self))->name();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreattr__get_specified(PyObject *self, void *closure)
{
    bool ret;

    ret = coreAttr((PyDOMObject*)(self))->specified();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coreattr__get_value(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreAttr((PyDOMObject*)(self))->value();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_coreattr__set_value(PyObject *self, PyObject *args, void *closure)
{
    char *value;

    if (!PyArg_Parse(args,"s:_wrap_coreattr__set_value", &value))
        return -1;
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    WebCore::ExceptionCode ec = 0;
    coreAttr((PyDOMObject*)(self))->setValue(cvt_value, ec);

    return 0;
}

static PyObject *
_wrap_coreattr__get_ownerElement(PyObject *self, void *closure)
{
    WebCore::Element* _ret;
    PyObject *py_ret;

    _ret = coreAttr((PyDOMObject*)(self))->ownerElement();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreattr__get_isId(PyObject *self, void *closure)
{
    bool ret;

    ret = coreAttr((PyDOMObject*)(self))->isId();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coreattr__get_style(PyObject *self, void *closure)
{
    WebCore::CSSStyleDeclaration* _ret;
    PyObject *py_ret;

    _ret = coreAttr((PyDOMObject*)(self))->style();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreattr_getsets[] = {
    { (char*)"name", (getter)WebKit::_wrap_coreattr__get_name, (setter)0, 0, 0 },
    { (char*)"specified", (getter)WebKit::_wrap_coreattr__get_specified, (setter)0, 0, 0 },
    { (char*)"value", (getter)WebKit::_wrap_coreattr__get_value, (setter)WebKit::_wrap_coreattr__set_value, 0, 0 },
    { (char*)"ownerElement", (getter)WebKit::_wrap_coreattr__get_ownerElement, (setter)0, 0, 0 },
    { (char*)"isId", (getter)WebKit::_wrap_coreattr__get_isId, (setter)0, 0, 0 },
    { (char*)"style", (getter)WebKit::_wrap_coreattr__get_style, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Attr(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Attr* cobj = coreAttr(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMAttr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Attr",                   /* tp_name */
    sizeof(PyDOMAttr),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Attr,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreattr_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Attr_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Event ----------- */

namespace WebKit {
using namespace WebCore;

static int
Event_init(Event *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_Event_stopPropagation(PyDOMObject *self)
{
    
    coreEvent(self)->stopPropagation();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Event_preventDefault(PyDOMObject *self)
{
    
    coreEvent(self)->preventDefault();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Event_initEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"eventTypeArg", (char*)"canBubbleArg", (char*)"cancelableArg", NULL };
    char *eventTypeArg;
    int canBubbleArg, cancelableArg;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sii:pywebkit.Event.initEvent", kwlist, &eventTypeArg, &canBubbleArg, &cancelableArg))
        return NULL;
    WTF::String cvt_eventTypeArg = WTF::String::fromUTF8((const char*)eventTypeArg);
    bool cvt_canBubbleArg = (bool)canBubbleArg;
    bool cvt_cancelableArg = (bool)cancelableArg;
    
    coreEvent(self)->initEvent(cvt_eventTypeArg, cvt_canBubbleArg, cvt_cancelableArg);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Event_stopImmediatePropagation(PyDOMObject *self)
{
    
    coreEvent(self)->stopImmediatePropagation();
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMEvent_methods[] = {
    { "stopPropagation", (PyCFunction)WebKit::_wrap_Event_stopPropagation, METH_NOARGS,
      NULL },
    { "preventDefault", (PyCFunction)WebKit::_wrap_Event_preventDefault, METH_NOARGS,
      NULL },
    { "initEvent", (PyCFunction)WebKit::_wrap_Event_initEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "stopImmediatePropagation", (PyCFunction)WebKit::_wrap_Event_stopImmediatePropagation, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coreevent__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreEvent((PyDOMObject*)(self))->type();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreevent__get_target(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventTarget* _ret;

    _ret = coreEvent((PyDOMObject*)(self))->target();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreevent__get_currentTarget(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventTarget* _ret;

    _ret = coreEvent((PyDOMObject*)(self))->currentTarget();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreevent__get_eventPhase(PyObject *self, void *closure)
{
    int ret;

    ret = coreEvent((PyDOMObject*)(self))->eventPhase();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_coreevent__get_bubbles(PyObject *self, void *closure)
{
    bool ret;

    ret = coreEvent((PyDOMObject*)(self))->bubbles();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coreevent__get_cancelable(PyObject *self, void *closure)
{
    bool ret;

    ret = coreEvent((PyDOMObject*)(self))->cancelable();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coreevent__get_defaultPrevented(PyObject *self, void *closure)
{
    bool ret;

    ret = coreEvent((PyDOMObject*)(self))->defaultPrevented();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coreevent__get_srcElement(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventTarget* _ret;

    _ret = coreEvent((PyDOMObject*)(self))->srcElement();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreevent__get_returnValue(PyObject *self, void *closure)
{
    bool ret;

    ret = coreEvent((PyDOMObject*)(self))->returnValue();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_coreevent__set_returnValue(PyObject *self, PyObject *args, void *closure)
{
    int returnValue;

    if (!PyArg_Parse(args,"i:_wrap_coreevent__set_returnValue", &returnValue))
        return -1;
    bool cvt_returnValue = (bool)returnValue;
    coreEvent((PyDOMObject*)(self))->setReturnValue(cvt_returnValue);

    return 0;
}

static PyObject *
_wrap_coreevent__get_cancelBubble(PyObject *self, void *closure)
{
    bool ret;

    ret = coreEvent((PyDOMObject*)(self))->cancelBubble();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_coreevent__set_cancelBubble(PyObject *self, PyObject *args, void *closure)
{
    int cancelBubble;

    if (!PyArg_Parse(args,"i:_wrap_coreevent__set_cancelBubble", &cancelBubble))
        return -1;
    bool cvt_cancelBubble = (bool)cancelBubble;
    coreEvent((PyDOMObject*)(self))->setCancelBubble(cvt_cancelBubble);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreevent_getsets[] = {
    { (char*)"type", (getter)WebKit::_wrap_coreevent__get_type, (setter)0, 0, 0 },
    { (char*)"target", (getter)WebKit::_wrap_coreevent__get_target, (setter)0, 0, 0 },
    { (char*)"currentTarget", (getter)WebKit::_wrap_coreevent__get_currentTarget, (setter)0, 0, 0 },
    { (char*)"eventPhase", (getter)WebKit::_wrap_coreevent__get_eventPhase, (setter)0, 0, 0 },
    { (char*)"bubbles", (getter)WebKit::_wrap_coreevent__get_bubbles, (setter)0, 0, 0 },
    { (char*)"cancelable", (getter)WebKit::_wrap_coreevent__get_cancelable, (setter)0, 0, 0 },
    { (char*)"defaultPrevented", (getter)WebKit::_wrap_coreevent__get_defaultPrevented, (setter)0, 0, 0 },
    { (char*)"srcElement", (getter)WebKit::_wrap_coreevent__get_srcElement, (setter)0, 0, 0 },
    { (char*)"returnValue", (getter)WebKit::_wrap_coreevent__get_returnValue, (setter)WebKit::_wrap_coreevent__set_returnValue, 0, 0 },
    { (char*)"cancelBubble", (getter)WebKit::_wrap_coreevent__get_cancelBubble, (setter)WebKit::_wrap_coreevent__set_cancelBubble, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Event(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Event* cobj = coreEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Event",                   /* tp_name */
    sizeof(PyDOMEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Event,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Event_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- BeforeLoadEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
BeforeLoadEvent_init(BeforeLoadEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_BeforeLoadEvent_initBeforeLoadEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"canBubble", (char*)"cancelable", (char*)"url", NULL };
    char *type, *url;
    int canBubble, cancelable;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siis:pywebkit.BeforeLoadEvent.initBeforeLoadEvent", kwlist, &type, &canBubble, &cancelable, &url))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    bool cvt_canBubble = (bool)canBubble;
    bool cvt_cancelable = (bool)cancelable;
    WTF::String cvt_url = WTF::String::fromUTF8((const char*)url);
    
    coreBeforeLoadEvent(self)->initBeforeLoadEvent(cvt_type, cvt_canBubble, cvt_cancelable, cvt_url);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMBeforeLoadEvent_methods[] = {
    { "initBeforeLoadEvent", (PyCFunction)WebKit::_wrap_BeforeLoadEvent_initBeforeLoadEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corebeforeloadevent__get_url(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreBeforeLoadEvent((PyDOMObject*)(self))->url();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corebeforeloadevent_getsets[] = {
    { (char*)"url", (getter)WebKit::_wrap_corebeforeloadevent__get_url, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_BeforeLoadEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::BeforeLoadEvent* cobj = coreBeforeLoadEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMBeforeLoadEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.BeforeLoadEvent",                   /* tp_name */
    sizeof(PyDOMBeforeLoadEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_BeforeLoadEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMBeforeLoadEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corebeforeloadevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::BeforeLoadEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- BeforeProcessEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
BeforeProcessEvent_init(BeforeProcessEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_BeforeProcessEvent_initBeforeProcessEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"canBubble", (char*)"cancelable", NULL };
    char *type;
    int canBubble, cancelable;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sii:pywebkit.BeforeProcessEvent.initBeforeProcessEvent", kwlist, &type, &canBubble, &cancelable))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    bool cvt_canBubble = (bool)canBubble;
    bool cvt_cancelable = (bool)cancelable;
    
    coreBeforeProcessEvent(self)->initBeforeProcessEvent(cvt_type, cvt_canBubble, cvt_cancelable);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMBeforeProcessEvent_methods[] = {
    { "initBeforeProcessEvent", (PyCFunction)WebKit::_wrap_BeforeProcessEvent_initBeforeProcessEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corebeforeprocessevent__get_text(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreBeforeProcessEvent((PyDOMObject*)(self))->text();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corebeforeprocessevent__set_text(PyObject *self, PyObject *args, void *closure)
{
    char *text;

    if (!PyArg_Parse(args,"s:_wrap_corebeforeprocessevent__set_text", &text))
        return -1;
    WTF::String cvt_text = WTF::String::fromUTF8((const char*)text);
    coreBeforeProcessEvent((PyDOMObject*)(self))->setText(cvt_text);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corebeforeprocessevent_getsets[] = {
    { (char*)"text", (getter)WebKit::_wrap_corebeforeprocessevent__get_text, (setter)WebKit::_wrap_corebeforeprocessevent__set_text, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_BeforeProcessEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::BeforeProcessEvent* cobj = coreBeforeProcessEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMBeforeProcessEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.BeforeProcessEvent",                   /* tp_name */
    sizeof(PyDOMBeforeProcessEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_BeforeProcessEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMBeforeProcessEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corebeforeprocessevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::BeforeProcessEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CharacterData ----------- */

namespace WebKit {
using namespace WebCore;

static int
CharacterData_init(CharacterData *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMNode_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_CharacterData_substringData(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"offset", (char*)"length", NULL };
    char *_ret;
    unsigned long offset, length;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"kk:pywebkit.CharacterData.substringData", kwlist, &offset, &length))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreCharacterData(self)->substringData(offset, length, ec);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_CharacterData_appendData(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"data", NULL };
    char *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.CharacterData.appendData", kwlist, &data))
        return NULL;
    WTF::String cvt_data = WTF::String::fromUTF8((const char*)data);
    WebCore::ExceptionCode ec = 0;
    
    coreCharacterData(self)->appendData(cvt_data, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_CharacterData_insertData(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"offset", (char*)"data", NULL };
    char *data;
    unsigned long offset;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ks:pywebkit.CharacterData.insertData", kwlist, &offset, &data))
        return NULL;
    WTF::String cvt_data = WTF::String::fromUTF8((const char*)data);
    WebCore::ExceptionCode ec = 0;
    
    coreCharacterData(self)->insertData(offset, cvt_data, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_CharacterData_deleteData(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"offset", (char*)"length", NULL };
    unsigned long offset, length;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"kk:pywebkit.CharacterData.deleteData", kwlist, &offset, &length))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreCharacterData(self)->deleteData(offset, length, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_CharacterData_replaceData(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"offset", (char*)"length", (char*)"data", NULL };
    char *data;
    unsigned long offset, length;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"kks:pywebkit.CharacterData.replaceData", kwlist, &offset, &length, &data))
        return NULL;
    WTF::String cvt_data = WTF::String::fromUTF8((const char*)data);
    WebCore::ExceptionCode ec = 0;
    
    coreCharacterData(self)->replaceData(offset, length, cvt_data, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMCharacterData_methods[] = {
    { "substringData", (PyCFunction)WebKit::_wrap_CharacterData_substringData, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "appendData", (PyCFunction)WebKit::_wrap_CharacterData_appendData, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "insertData", (PyCFunction)WebKit::_wrap_CharacterData_insertData, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "deleteData", (PyCFunction)WebKit::_wrap_CharacterData_deleteData, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "replaceData", (PyCFunction)WebKit::_wrap_CharacterData_replaceData, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corecharacterdata__get_data(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreCharacterData((PyDOMObject*)(self))->data();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corecharacterdata__set_data(PyObject *self, PyObject *args, void *closure)
{
    char *data;

    if (!PyArg_Parse(args,"s:_wrap_corecharacterdata__set_data", &data))
        return -1;
    WTF::String cvt_data = WTF::String::fromUTF8((const char*)data);
    WebCore::ExceptionCode ec = 0;
    coreCharacterData((PyDOMObject*)(self))->setData(cvt_data, ec);

    return 0;
}

static PyObject *
_wrap_corecharacterdata__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreCharacterData((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecharacterdata_getsets[] = {
    { (char*)"data", (getter)WebKit::_wrap_corecharacterdata__get_data, (setter)WebKit::_wrap_corecharacterdata__set_data, 0, 0 },
    { (char*)"length", (getter)WebKit::_wrap_corecharacterdata__get_length, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CharacterData(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CharacterData* cobj = coreCharacterData(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCharacterData_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CharacterData",                   /* tp_name */
    sizeof(PyDOMCharacterData),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CharacterData,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMCharacterData_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecharacterdata_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CharacterData_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Text ----------- */

namespace WebKit {
using namespace WebCore;

static int
Text_init(Text *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCharacterData_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_Text_splitText(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"offset", NULL };
    PyObject *py_ret;
    unsigned long offset;
    WebCore::Text* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.Text.splitText", kwlist, &offset))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreText(self)->splitText(offset, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Text_replaceWholeText(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"content", NULL };
    char *content;
    PyObject *py_ret;
    WebCore::Text* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Text.replaceWholeText", kwlist, &content))
        return NULL;
    WTF::String cvt_content = WTF::String::fromUTF8((const char*)content);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreText(self)->replaceWholeText(cvt_content, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMText_methods[] = {
    { "splitText", (PyCFunction)WebKit::_wrap_Text_splitText, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "replaceWholeText", (PyCFunction)WebKit::_wrap_Text_replaceWholeText, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coretext__get_wholeText(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreText((PyDOMObject*)(self))->wholeText();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coretext_getsets[] = {
    { (char*)"wholeText", (getter)WebKit::_wrap_coretext__get_wholeText, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Text(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Text* cobj = coreText(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMText_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Text",                   /* tp_name */
    sizeof(PyDOMText),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Text,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMText_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coretext_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Text_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CDATASection ----------- */

namespace WebKit {
using namespace WebCore;

static int
CDATASection_init(CDATASection *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMText_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
void dealloc_CDATASection(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CDATASection* cobj = coreCDATASection(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCDATASection_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CDATASection",                   /* tp_name */
    sizeof(PyDOMCDATASection),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CDATASection,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CDATASection_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- ClientRect ----------- */

namespace WebKit {
using namespace WebCore;

static int
ClientRect_init(ClientRect *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coreclientrect__get_top(PyObject *self, void *closure)
{
    double ret;

    ret = coreClientRect((PyDOMObject*)(self))->top();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_coreclientrect__get_right(PyObject *self, void *closure)
{
    double ret;

    ret = coreClientRect((PyDOMObject*)(self))->right();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_coreclientrect__get_bottom(PyObject *self, void *closure)
{
    double ret;

    ret = coreClientRect((PyDOMObject*)(self))->bottom();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_coreclientrect__get_left(PyObject *self, void *closure)
{
    double ret;

    ret = coreClientRect((PyDOMObject*)(self))->left();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_coreclientrect__get_width(PyObject *self, void *closure)
{
    double ret;

    ret = coreClientRect((PyDOMObject*)(self))->width();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_coreclientrect__get_height(PyObject *self, void *closure)
{
    double ret;

    ret = coreClientRect((PyDOMObject*)(self))->height();
    return PyFloat_FromDouble(ret);
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreclientrect_getsets[] = {
    { (char*)"top", (getter)WebKit::_wrap_coreclientrect__get_top, (setter)0, 0, 0 },
    { (char*)"right", (getter)WebKit::_wrap_coreclientrect__get_right, (setter)0, 0, 0 },
    { (char*)"bottom", (getter)WebKit::_wrap_coreclientrect__get_bottom, (setter)0, 0, 0 },
    { (char*)"left", (getter)WebKit::_wrap_coreclientrect__get_left, (setter)0, 0, 0 },
    { (char*)"width", (getter)WebKit::_wrap_coreclientrect__get_width, (setter)0, 0, 0 },
    { (char*)"height", (getter)WebKit::_wrap_coreclientrect__get_height, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_ClientRect(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::ClientRect* cobj = coreClientRect(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMClientRect_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.ClientRect",                   /* tp_name */
    sizeof(PyDOMClientRect),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_ClientRect,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreclientrect_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::ClientRect_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- ClientRectList ----------- */

namespace WebKit {
using namespace WebCore;

static int
ClientRectList_init(ClientRectList *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_ClientRectList_item(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    PyObject *py_ret;
    unsigned long index;
    WebCore::ClientRect* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.ClientRectList.item", kwlist, &index))
        return NULL;
    
    _ret = coreClientRectList(self)->item(index);
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMClientRectList_methods[] = {
    { "item", (PyCFunction)WebKit::_wrap_ClientRectList_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coreclientrectlist__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreClientRectList((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreclientrectlist_getsets[] = {
    { (char*)"length", (getter)WebKit::_wrap_coreclientrectlist__get_length, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_ClientRectList(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::ClientRectList* cobj = coreClientRectList(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMClientRectList_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.ClientRectList",                   /* tp_name */
    sizeof(PyDOMClientRectList),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_ClientRectList,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMClientRectList_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreclientrectlist_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::ClientRectList_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Comment ----------- */

namespace WebKit {
using namespace WebCore;

static int
Comment_init(Comment *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCharacterData_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
void dealloc_Comment(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Comment* cobj = coreComment(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMComment_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Comment",                   /* tp_name */
    sizeof(PyDOMComment),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Comment,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Comment_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- UIEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
UIEvent_init(UIEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_UIEvent_initUIEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"canBubble", (char*)"cancelable", (char*)"view", (char*)"detail", NULL };
    char *type;
    int canBubble, cancelable;
    long detail;
    PyDOMObject *view;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siiO!l:pywebkit.UIEvent.initUIEvent", kwlist, &type, &canBubble, &cancelable, PtrPyDOMDOMWindow_Type, &view, &detail))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    bool cvt_canBubble = (bool)canBubble;
    bool cvt_cancelable = (bool)cancelable;
    
    coreUIEvent(self)->initUIEvent(cvt_type, cvt_canBubble, cvt_cancelable, coreDOMWindow(view), detail);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMUIEvent_methods[] = {
    { "initUIEvent", (PyCFunction)WebKit::_wrap_UIEvent_initUIEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coreuievent__get_view(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::DOMWindow* _ret;

    _ret = coreUIEvent((PyDOMObject*)(self))->view();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreuievent__get_detail(PyObject *self, void *closure)
{
    long ret;

    ret = coreUIEvent((PyDOMObject*)(self))->detail();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreuievent__get_keyCode(PyObject *self, void *closure)
{
    long ret;

    ret = coreUIEvent((PyDOMObject*)(self))->keyCode();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreuievent__get_charCode(PyObject *self, void *closure)
{
    long ret;

    ret = coreUIEvent((PyDOMObject*)(self))->charCode();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreuievent__get_layerX(PyObject *self, void *closure)
{
    long ret;

    ret = coreUIEvent((PyDOMObject*)(self))->layerX();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreuievent__get_layerY(PyObject *self, void *closure)
{
    long ret;

    ret = coreUIEvent((PyDOMObject*)(self))->layerY();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreuievent__get_pageX(PyObject *self, void *closure)
{
    long ret;

    ret = coreUIEvent((PyDOMObject*)(self))->pageX();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreuievent__get_pageY(PyObject *self, void *closure)
{
    long ret;

    ret = coreUIEvent((PyDOMObject*)(self))->pageY();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreuievent__get_which(PyObject *self, void *closure)
{
    long ret;

    ret = coreUIEvent((PyDOMObject*)(self))->which();
    return PyInt_FromLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreuievent_getsets[] = {
    { (char*)"view", (getter)WebKit::_wrap_coreuievent__get_view, (setter)0, 0, 0 },
    { (char*)"detail", (getter)WebKit::_wrap_coreuievent__get_detail, (setter)0, 0, 0 },
    { (char*)"keyCode", (getter)WebKit::_wrap_coreuievent__get_keyCode, (setter)0, 0, 0 },
    { (char*)"charCode", (getter)WebKit::_wrap_coreuievent__get_charCode, (setter)0, 0, 0 },
    { (char*)"layerX", (getter)WebKit::_wrap_coreuievent__get_layerX, (setter)0, 0, 0 },
    { (char*)"layerY", (getter)WebKit::_wrap_coreuievent__get_layerY, (setter)0, 0, 0 },
    { (char*)"pageX", (getter)WebKit::_wrap_coreuievent__get_pageX, (setter)0, 0, 0 },
    { (char*)"pageY", (getter)WebKit::_wrap_coreuievent__get_pageY, (setter)0, 0, 0 },
    { (char*)"which", (getter)WebKit::_wrap_coreuievent__get_which, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_UIEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::UIEvent* cobj = coreUIEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMUIEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.UIEvent",                   /* tp_name */
    sizeof(PyDOMUIEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_UIEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMUIEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreuievent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::UIEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CompositionEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
CompositionEvent_init(CompositionEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMUIEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_CompositionEvent_initCompositionEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"typeArg", (char*)"canBubbleArg", (char*)"cancelableArg", (char*)"viewArg", (char*)"dataArg", NULL };
    char *typeArg, *dataArg;
    int canBubbleArg, cancelableArg;
    PyDOMObject *viewArg;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siiO!s:pywebkit.CompositionEvent.initCompositionEvent", kwlist, &typeArg, &canBubbleArg, &cancelableArg, PtrPyDOMDOMWindow_Type, &viewArg, &dataArg))
        return NULL;
    WTF::String cvt_typeArg = WTF::String::fromUTF8((const char*)typeArg);
    bool cvt_canBubbleArg = (bool)canBubbleArg;
    bool cvt_cancelableArg = (bool)cancelableArg;
    WTF::String cvt_dataArg = WTF::String::fromUTF8((const char*)dataArg);
    
    coreCompositionEvent(self)->initCompositionEvent(cvt_typeArg, cvt_canBubbleArg, cvt_cancelableArg, coreDOMWindow(viewArg), cvt_dataArg);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMCompositionEvent_methods[] = {
    { "initCompositionEvent", (PyCFunction)WebKit::_wrap_CompositionEvent_initCompositionEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corecompositionevent__get_data(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreCompositionEvent((PyDOMObject*)(self))->data();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecompositionevent_getsets[] = {
    { (char*)"data", (getter)WebKit::_wrap_corecompositionevent__get_data, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CompositionEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CompositionEvent* cobj = coreCompositionEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCompositionEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CompositionEvent",                   /* tp_name */
    sizeof(PyDOMCompositionEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CompositionEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMCompositionEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecompositionevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CompositionEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CustomEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
CustomEvent_init(CustomEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
void dealloc_CustomEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CustomEvent* cobj = coreCustomEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCustomEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CustomEvent",                   /* tp_name */
    sizeof(PyDOMCustomEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CustomEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CustomEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- DocumentFragment ----------- */

namespace WebKit {
using namespace WebCore;

static int
DocumentFragment_init(DocumentFragment *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMNode_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_DocumentFragment_querySelector(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"selectors", NULL };
    char *selectors;
    WebCore::Element* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.DocumentFragment.querySelector", kwlist, &selectors))
        return NULL;
    WTF::String cvt_selectors = WTF::String::fromUTF8((const char*)selectors);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocumentFragment(self)->querySelector(cvt_selectors, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_DocumentFragment_querySelectorAll(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"selectors", NULL };
    char *selectors;
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.DocumentFragment.querySelectorAll", kwlist, &selectors))
        return NULL;
    WTF::String cvt_selectors = WTF::String::fromUTF8((const char*)selectors);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocumentFragment(self)->querySelectorAll(cvt_selectors, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMDocumentFragment_methods[] = {
    { "querySelector", (PyCFunction)WebKit::_wrap_DocumentFragment_querySelector, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "querySelectorAll", (PyCFunction)WebKit::_wrap_DocumentFragment_querySelectorAll, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
void dealloc_DocumentFragment(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::DocumentFragment* cobj = coreDocumentFragment(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMDocumentFragment_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.DocumentFragment",                   /* tp_name */
    sizeof(PyDOMDocumentFragment),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_DocumentFragment,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMDocumentFragment_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::DocumentFragment_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Document ----------- */

namespace WebKit {
using namespace WebCore;

static int
Document_init(Document *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMNode_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_Document_createElement(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"tagName", NULL };
    char *tagName;
    WebCore::Element* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.createElement", kwlist, &tagName))
        return NULL;
    WTF::String cvt_tagName = WTF::String::fromUTF8((const char*)tagName);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->createElement(cvt_tagName, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createDocumentFragment(PyDOMObject *self)
{
    WebCore::DocumentFragment* _ret;
    PyObject *py_ret;

    
    _ret = WTF::getPtr(coreDocument(self)->createDocumentFragment());
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createTextNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"data", NULL };
    char *data;
    PyObject *py_ret;
    WebCore::Text* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.createTextNode", kwlist, &data))
        return NULL;
    WTF::String cvt_data = WTF::String::fromUTF8((const char*)data);
    
    _ret = WTF::getPtr(coreDocument(self)->createTextNode(cvt_data));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createComment(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"data", NULL };
    char *data;
    PyObject *py_ret;
    WebCore::Comment* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.createComment", kwlist, &data))
        return NULL;
    WTF::String cvt_data = WTF::String::fromUTF8((const char*)data);
    
    _ret = WTF::getPtr(coreDocument(self)->createComment(cvt_data));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createCDATASection(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"data", NULL };
    char *data;
    PyObject *py_ret;
    WebCore::CDATASection* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.createCDATASection", kwlist, &data))
        return NULL;
    WTF::String cvt_data = WTF::String::fromUTF8((const char*)data);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->createCDATASection(cvt_data, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createProcessingInstruction(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"target", (char*)"data", NULL };
    char *target, *data;
    PyObject *py_ret;
    WebCore::ProcessingInstruction* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.Document.createProcessingInstruction", kwlist, &target, &data))
        return NULL;
    WTF::String cvt_target = WTF::String::fromUTF8((const char*)target);
    WTF::String cvt_data = WTF::String::fromUTF8((const char*)data);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->createProcessingInstruction(cvt_target, cvt_data, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createAttribute(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name;
    WebCore::Attr* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.createAttribute", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->createAttribute(cvt_name, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createEntityReference(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name;
    WebCore::EntityReference* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.createEntityReference", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->createEntityReference(cvt_name, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_getElementsByTagName(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"tagname", NULL };
    char *tagname;
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.getElementsByTagName", kwlist, &tagname))
        return NULL;
    WTF::String cvt_tagname = WTF::String::fromUTF8((const char*)tagname);
    
    _ret = WTF::getPtr(coreDocument(self)->getElementsByTagName(cvt_tagname));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_importNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"importedNode", (char*)"deep", NULL };
    int deep;
    PyDOMObject *importedNode;
    PyObject *py_ret;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:pywebkit.Document.importNode", kwlist, PtrPyDOMNode_Type, &importedNode, &deep))
        return NULL;
    bool cvt_deep = (bool)deep;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->importNode(coreNode(importedNode), cvt_deep, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createElementNS(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", (char*)"qualifiedName", NULL };
    char *namespaceURI, *qualifiedName;
    WebCore::Element* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.Document.createElementNS", kwlist, &namespaceURI, &qualifiedName))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    WTF::String cvt_qualifiedName = WTF::String::fromUTF8((const char*)qualifiedName);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->createElementNS(cvt_namespaceURI, cvt_qualifiedName, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createAttributeNS(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", (char*)"qualifiedName", NULL };
    char *namespaceURI, *qualifiedName;
    WebCore::Attr* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.Document.createAttributeNS", kwlist, &namespaceURI, &qualifiedName))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    WTF::String cvt_qualifiedName = WTF::String::fromUTF8((const char*)qualifiedName);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->createAttributeNS(cvt_namespaceURI, cvt_qualifiedName, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_getElementsByTagNameNS(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", (char*)"localName", NULL };
    char *namespaceURI, *localName;
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.Document.getElementsByTagNameNS", kwlist, &namespaceURI, &localName))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    WTF::String cvt_localName = WTF::String::fromUTF8((const char*)localName);
    
    _ret = WTF::getPtr(coreDocument(self)->getElementsByTagNameNS(cvt_namespaceURI, cvt_localName));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_getElementById(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"elementId", NULL };
    char *elementId;
    WebCore::Element* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.getElementById", kwlist, &elementId))
        return NULL;
    WTF::String cvt_elementId = WTF::String::fromUTF8((const char*)elementId);
    
    _ret = coreDocument(self)->getElementById(cvt_elementId);
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_adoptNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"source", NULL };
    PyObject *py_ret;
    PyDOMObject *source;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Document.adoptNode", kwlist, PtrPyDOMNode_Type, &source))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->adoptNode(coreNode(source), ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"eventType", NULL };
    char *eventType;
    PyObject *py_ret;
    WebCore::Event* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.createEvent", kwlist, &eventType))
        return NULL;
    WTF::String cvt_eventType = WTF::String::fromUTF8((const char*)eventType);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->createEvent(cvt_eventType, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createRange(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::Range* _ret;

    
    _ret = WTF::getPtr(coreDocument(self)->createRange());
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createNodeIterator(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"root", (char*)"whatToShow", (char*)"filter", (char*)"expandEntityReferences", NULL };
    PyDOMObject *root, *filter;
    WebCore::NodeIterator* _ret;
    int expandEntityReferences;
    PyObject *py_ret;
    unsigned long whatToShow;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!kO!i:pywebkit.Document.createNodeIterator", kwlist, PtrPyDOMNode_Type, &root, &whatToShow, PtrPyDOMNodeFilter_Type, &filter, &expandEntityReferences))
        return NULL;
    bool cvt_expandEntityReferences = (bool)expandEntityReferences;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->createNodeIterator(coreNode(root), whatToShow, coreNodeFilter(filter), cvt_expandEntityReferences, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createTreeWalker(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"root", (char*)"whatToShow", (char*)"filter", (char*)"expandEntityReferences", NULL };
    PyDOMObject *root, *filter;
    WebCore::TreeWalker* _ret;
    int expandEntityReferences;
    PyObject *py_ret;
    unsigned long whatToShow;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!kO!i:pywebkit.Document.createTreeWalker", kwlist, PtrPyDOMNode_Type, &root, &whatToShow, PtrPyDOMNodeFilter_Type, &filter, &expandEntityReferences))
        return NULL;
    bool cvt_expandEntityReferences = (bool)expandEntityReferences;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->createTreeWalker(coreNode(root), whatToShow, coreNodeFilter(filter), cvt_expandEntityReferences, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_getOverrideStyle(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"element", (char*)"pseudoElement", NULL };
    char *pseudoElement;
    PyDOMObject *element;
    WebCore::CSSStyleDeclaration* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!s:pywebkit.Document.getOverrideStyle", kwlist, PtrPyDOMElement_Type, &element, &pseudoElement))
        return NULL;
    WTF::String cvt_pseudoElement = WTF::String::fromUTF8((const char*)pseudoElement);
    
    _ret = coreDocument(self)->getOverrideStyle(coreElement(element), cvt_pseudoElement);
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_execCommand(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"command", (char*)"userInterface", (char*)"value", NULL };
    char *command, *value;
    int userInterface;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sis:pywebkit.Document.execCommand", kwlist, &command, &userInterface, &value))
        return NULL;
    WTF::String cvt_command = WTF::String::fromUTF8((const char*)command);
    bool cvt_userInterface = (bool)userInterface;
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    
    ret = coreDocument(self)->execCommand(cvt_command, cvt_userInterface, cvt_value);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Document_queryCommandEnabled(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"command", NULL };
    char *command;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.queryCommandEnabled", kwlist, &command))
        return NULL;
    WTF::String cvt_command = WTF::String::fromUTF8((const char*)command);
    
    ret = coreDocument(self)->queryCommandEnabled(cvt_command);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Document_queryCommandIndeterm(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"command", NULL };
    char *command;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.queryCommandIndeterm", kwlist, &command))
        return NULL;
    WTF::String cvt_command = WTF::String::fromUTF8((const char*)command);
    
    ret = coreDocument(self)->queryCommandIndeterm(cvt_command);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Document_queryCommandState(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"command", NULL };
    char *command;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.queryCommandState", kwlist, &command))
        return NULL;
    WTF::String cvt_command = WTF::String::fromUTF8((const char*)command);
    
    ret = coreDocument(self)->queryCommandState(cvt_command);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Document_queryCommandSupported(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"command", NULL };
    char *command;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.queryCommandSupported", kwlist, &command))
        return NULL;
    WTF::String cvt_command = WTF::String::fromUTF8((const char*)command);
    
    ret = coreDocument(self)->queryCommandSupported(cvt_command);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Document_queryCommandValue(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"command", NULL };
    char *command, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.queryCommandValue", kwlist, &command))
        return NULL;
    WTF::String cvt_command = WTF::String::fromUTF8((const char*)command);
    
    ret = coreDocument(self)->queryCommandValue(cvt_command);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_getElementsByName(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"elementName", NULL };
    char *elementName;
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.getElementsByName", kwlist, &elementName))
        return NULL;
    WTF::String cvt_elementName = WTF::String::fromUTF8((const char*)elementName);
    
    _ret = WTF::getPtr(coreDocument(self)->getElementsByName(cvt_elementName));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_elementFromPoint(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"x", (char*)"y", NULL };
    WebCore::Element* _ret;
    PyObject *py_ret;
    long x, y;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ll:pywebkit.Document.elementFromPoint", kwlist, &x, &y))
        return NULL;
    
    _ret = coreDocument(self)->elementFromPoint(x, y);
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_caretRangeFromPoint(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"x", (char*)"y", NULL };
    PyObject *py_ret;
    WebCore::Range* _ret;
    long x, y;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ll:pywebkit.Document.caretRangeFromPoint", kwlist, &x, &y))
        return NULL;
    
    _ret = WTF::getPtr(coreDocument(self)->caretRangeFromPoint(x, y));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_createCSSStyleDeclaration(PyDOMObject *self)
{
    WebCore::CSSStyleDeclaration* _ret;
    PyObject *py_ret;

    
    _ret = WTF::getPtr(coreDocument(self)->createCSSStyleDeclaration());
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_getElementsByClassName(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"tagname", NULL };
    char *tagname;
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.getElementsByClassName", kwlist, &tagname))
        return NULL;
    WTF::String cvt_tagname = WTF::String::fromUTF8((const char*)tagname);
    
    _ret = WTF::getPtr(coreDocument(self)->getElementsByClassName(cvt_tagname));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_querySelector(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"selectors", NULL };
    char *selectors;
    WebCore::Element* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.querySelector", kwlist, &selectors))
        return NULL;
    WTF::String cvt_selectors = WTF::String::fromUTF8((const char*)selectors);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->querySelector(cvt_selectors, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Document_querySelectorAll(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"selectors", NULL };
    char *selectors;
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Document.querySelectorAll", kwlist, &selectors))
        return NULL;
    WTF::String cvt_selectors = WTF::String::fromUTF8((const char*)selectors);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDocument(self)->querySelectorAll(cvt_selectors, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMDocument_methods[] = {
    { "createElement", (PyCFunction)WebKit::_wrap_Document_createElement, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createDocumentFragment", (PyCFunction)WebKit::_wrap_Document_createDocumentFragment, METH_NOARGS,
      NULL },
    { "createTextNode", (PyCFunction)WebKit::_wrap_Document_createTextNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createComment", (PyCFunction)WebKit::_wrap_Document_createComment, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createCDATASection", (PyCFunction)WebKit::_wrap_Document_createCDATASection, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createProcessingInstruction", (PyCFunction)WebKit::_wrap_Document_createProcessingInstruction, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createAttribute", (PyCFunction)WebKit::_wrap_Document_createAttribute, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createEntityReference", (PyCFunction)WebKit::_wrap_Document_createEntityReference, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getElementsByTagName", (PyCFunction)WebKit::_wrap_Document_getElementsByTagName, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "importNode", (PyCFunction)WebKit::_wrap_Document_importNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createElementNS", (PyCFunction)WebKit::_wrap_Document_createElementNS, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createAttributeNS", (PyCFunction)WebKit::_wrap_Document_createAttributeNS, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getElementsByTagNameNS", (PyCFunction)WebKit::_wrap_Document_getElementsByTagNameNS, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getElementById", (PyCFunction)WebKit::_wrap_Document_getElementById, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "adoptNode", (PyCFunction)WebKit::_wrap_Document_adoptNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createEvent", (PyCFunction)WebKit::_wrap_Document_createEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createRange", (PyCFunction)WebKit::_wrap_Document_createRange, METH_NOARGS,
      NULL },
    { "createNodeIterator", (PyCFunction)WebKit::_wrap_Document_createNodeIterator, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createTreeWalker", (PyCFunction)WebKit::_wrap_Document_createTreeWalker, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getOverrideStyle", (PyCFunction)WebKit::_wrap_Document_getOverrideStyle, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "execCommand", (PyCFunction)WebKit::_wrap_Document_execCommand, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "queryCommandEnabled", (PyCFunction)WebKit::_wrap_Document_queryCommandEnabled, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "queryCommandIndeterm", (PyCFunction)WebKit::_wrap_Document_queryCommandIndeterm, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "queryCommandState", (PyCFunction)WebKit::_wrap_Document_queryCommandState, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "queryCommandSupported", (PyCFunction)WebKit::_wrap_Document_queryCommandSupported, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "queryCommandValue", (PyCFunction)WebKit::_wrap_Document_queryCommandValue, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getElementsByName", (PyCFunction)WebKit::_wrap_Document_getElementsByName, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "elementFromPoint", (PyCFunction)WebKit::_wrap_Document_elementFromPoint, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "caretRangeFromPoint", (PyCFunction)WebKit::_wrap_Document_caretRangeFromPoint, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createCSSStyleDeclaration", (PyCFunction)WebKit::_wrap_Document_createCSSStyleDeclaration, METH_NOARGS,
      NULL },
    { "getElementsByClassName", (PyCFunction)WebKit::_wrap_Document_getElementsByClassName, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "querySelector", (PyCFunction)WebKit::_wrap_Document_querySelector, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "querySelectorAll", (PyCFunction)WebKit::_wrap_Document_querySelectorAll, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coredocument__get_doctype(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::DocumentType* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->doctype();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_implementation(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::DOMImplementation* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->implementation();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_documentElement(PyObject *self, void *closure)
{
    WebCore::Element* _ret;
    PyObject *py_ret;

    _ret = coreDocument((PyDOMObject*)(self))->documentElement();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_inputEncoding(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->inputEncoding();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_xmlEncoding(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->xmlEncoding();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_xmlVersion(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->xmlVersion();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_xmlVersion(PyObject *self, PyObject *args, void *closure)
{
    char *xmlVersion;

    if (!PyArg_Parse(args,"s:_wrap_coredocument__set_xmlVersion", &xmlVersion))
        return -1;
    WTF::String cvt_xmlVersion = WTF::String::fromUTF8((const char*)xmlVersion);
    WebCore::ExceptionCode ec = 0;
    coreDocument((PyDOMObject*)(self))->setXMLVersion(cvt_xmlVersion, ec);

    return 0;
}

static PyObject *
_wrap_coredocument__get_xmlStandalone(PyObject *self, void *closure)
{
    bool ret;

    ret = coreDocument((PyDOMObject*)(self))->xmlStandalone();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_coredocument__set_xmlStandalone(PyObject *self, PyObject *args, void *closure)
{
    int xmlStandalone;

    if (!PyArg_Parse(args,"i:_wrap_coredocument__set_xmlStandalone", &xmlStandalone))
        return -1;
    bool cvt_xmlStandalone = (bool)xmlStandalone;
    WebCore::ExceptionCode ec = 0;
    coreDocument((PyDOMObject*)(self))->setXMLStandalone(cvt_xmlStandalone, ec);

    return 0;
}

static PyObject *
_wrap_coredocument__get_documentURI(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->documentURI();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_documentURI(PyObject *self, PyObject *args, void *closure)
{
    char *documentURI;

    if (!PyArg_Parse(args,"s:_wrap_coredocument__set_documentURI", &documentURI))
        return -1;
    WTF::String cvt_documentURI = WTF::String::fromUTF8((const char*)documentURI);
    coreDocument((PyDOMObject*)(self))->setDocumentURI(cvt_documentURI);

    return 0;
}

static PyObject *
_wrap_coredocument__get_defaultView(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::DOMWindow* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->defaultView();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_styleSheets(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::StyleSheetList* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->styleSheets();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_title(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->title();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_title(PyObject *self, PyObject *args, void *closure)
{
    char *title;

    if (!PyArg_Parse(args,"s:_wrap_coredocument__set_title", &title))
        return -1;
    WTF::String cvt_title = WTF::String::fromUTF8((const char*)title);
    coreDocument((PyDOMObject*)(self))->setTitle(cvt_title);

    return 0;
}

static PyObject *
_wrap_coredocument__get_referrer(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->referrer();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_domain(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->domain();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_URL(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->url();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_cookie(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    WebCore::ExceptionCode ec = 0;
    ret = coreDocument((PyDOMObject*)(self))->cookie(ec);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_cookie(PyObject *self, PyObject *args, void *closure)
{
    char *cookie;

    if (!PyArg_Parse(args,"s:_wrap_coredocument__set_cookie", &cookie))
        return -1;
    WTF::String cvt_cookie = WTF::String::fromUTF8((const char*)cookie);
    WebCore::ExceptionCode ec = 0;
    coreDocument((PyDOMObject*)(self))->setCookie(cvt_cookie, ec);

    return 0;
}

static PyObject *
_wrap_coredocument__get_body(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLElement* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->body();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_body(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *body;

    if (!PyArg_Parse(args,"O!:_wrap_coredocument__set_body", PtrPyDOMHTMLElement_Type, &body))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreDocument((PyDOMObject*)(self))->setBody(coreHTMLElement(body), ec);

    return 0;
}

static PyObject *
_wrap_coredocument__get_head(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLHeadElement* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->head();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_images(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreDocument((PyDOMObject*)(self))->images());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_applets(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreDocument((PyDOMObject*)(self))->applets());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_links(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreDocument((PyDOMObject*)(self))->links());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_forms(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreDocument((PyDOMObject*)(self))->forms());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_anchors(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreDocument((PyDOMObject*)(self))->anchors());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_lastModified(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->lastModified();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_charset(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->charset();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_charset(PyObject *self, PyObject *args, void *closure)
{
    char *charset;

    if (!PyArg_Parse(args,"s:_wrap_coredocument__set_charset", &charset))
        return -1;
    WTF::String cvt_charset = WTF::String::fromUTF8((const char*)charset);
    coreDocument((PyDOMObject*)(self))->setCharset(cvt_charset);

    return 0;
}

static PyObject *
_wrap_coredocument__get_defaultCharset(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->defaultCharset();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_readyState(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->readyState();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_characterSet(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->characterSet();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_preferredStylesheetSet(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->preferredStylesheetSet();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_selectedStylesheetSet(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->selectedStylesheetSet();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_selectedStylesheetSet(PyObject *self, PyObject *args, void *closure)
{
    char *selectedStylesheetSet;

    if (!PyArg_Parse(args,"s:_wrap_coredocument__set_selectedStylesheetSet", &selectedStylesheetSet))
        return -1;
    WTF::String cvt_selectedStylesheetSet = WTF::String::fromUTF8((const char*)selectedStylesheetSet);
    coreDocument((PyDOMObject*)(self))->setSelectedStylesheetSet(cvt_selectedStylesheetSet);

    return 0;
}

static PyObject *
_wrap_coredocument__get_compatMode(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocument((PyDOMObject*)(self))->compatMode();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocument__get_onabort(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onabort();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onabort(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onabort;
    EventListener *onabort = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onabort", &py_onabort))
        return -1;
    if (py_onabort)
        onabort = coreEventListener(py_onabort);
    coreDocument((PyDOMObject*)(self))->setOnabort((EventListener *) onabort);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onblur(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onblur();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onblur(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onblur;
    EventListener *onblur = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onblur", &py_onblur))
        return -1;
    if (py_onblur)
        onblur = coreEventListener(py_onblur);
    coreDocument((PyDOMObject*)(self))->setOnblur((EventListener *) onblur);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onchange(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onchange();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onchange(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onchange;
    EventListener *onchange = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onchange", &py_onchange))
        return -1;
    if (py_onchange)
        onchange = coreEventListener(py_onchange);
    coreDocument((PyDOMObject*)(self))->setOnchange((EventListener *) onchange);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onclick(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onclick();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onclick(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onclick;
    EventListener *onclick = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onclick", &py_onclick))
        return -1;
    if (py_onclick)
        onclick = coreEventListener(py_onclick);
    coreDocument((PyDOMObject*)(self))->setOnclick((EventListener *) onclick);

    return 0;
}

static PyObject *
_wrap_coredocument__get_oncontextmenu(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->oncontextmenu();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_oncontextmenu(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oncontextmenu;
    EventListener *oncontextmenu = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_oncontextmenu", &py_oncontextmenu))
        return -1;
    if (py_oncontextmenu)
        oncontextmenu = coreEventListener(py_oncontextmenu);
    coreDocument((PyDOMObject*)(self))->setOncontextmenu((EventListener *) oncontextmenu);

    return 0;
}

static PyObject *
_wrap_coredocument__get_ondblclick(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->ondblclick();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_ondblclick(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondblclick;
    EventListener *ondblclick = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_ondblclick", &py_ondblclick))
        return -1;
    if (py_ondblclick)
        ondblclick = coreEventListener(py_ondblclick);
    coreDocument((PyDOMObject*)(self))->setOndblclick((EventListener *) ondblclick);

    return 0;
}

static PyObject *
_wrap_coredocument__get_ondrag(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->ondrag();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_ondrag(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondrag;
    EventListener *ondrag = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_ondrag", &py_ondrag))
        return -1;
    if (py_ondrag)
        ondrag = coreEventListener(py_ondrag);
    coreDocument((PyDOMObject*)(self))->setOndrag((EventListener *) ondrag);

    return 0;
}

static PyObject *
_wrap_coredocument__get_ondragend(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->ondragend();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_ondragend(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragend;
    EventListener *ondragend = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_ondragend", &py_ondragend))
        return -1;
    if (py_ondragend)
        ondragend = coreEventListener(py_ondragend);
    coreDocument((PyDOMObject*)(self))->setOndragend((EventListener *) ondragend);

    return 0;
}

static PyObject *
_wrap_coredocument__get_ondragenter(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->ondragenter();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_ondragenter(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragenter;
    EventListener *ondragenter = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_ondragenter", &py_ondragenter))
        return -1;
    if (py_ondragenter)
        ondragenter = coreEventListener(py_ondragenter);
    coreDocument((PyDOMObject*)(self))->setOndragenter((EventListener *) ondragenter);

    return 0;
}

static PyObject *
_wrap_coredocument__get_ondragleave(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->ondragleave();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_ondragleave(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragleave;
    EventListener *ondragleave = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_ondragleave", &py_ondragleave))
        return -1;
    if (py_ondragleave)
        ondragleave = coreEventListener(py_ondragleave);
    coreDocument((PyDOMObject*)(self))->setOndragleave((EventListener *) ondragleave);

    return 0;
}

static PyObject *
_wrap_coredocument__get_ondragover(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->ondragover();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_ondragover(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragover;
    EventListener *ondragover = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_ondragover", &py_ondragover))
        return -1;
    if (py_ondragover)
        ondragover = coreEventListener(py_ondragover);
    coreDocument((PyDOMObject*)(self))->setOndragover((EventListener *) ondragover);

    return 0;
}

static PyObject *
_wrap_coredocument__get_ondragstart(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->ondragstart();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_ondragstart(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragstart;
    EventListener *ondragstart = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_ondragstart", &py_ondragstart))
        return -1;
    if (py_ondragstart)
        ondragstart = coreEventListener(py_ondragstart);
    coreDocument((PyDOMObject*)(self))->setOndragstart((EventListener *) ondragstart);

    return 0;
}

static PyObject *
_wrap_coredocument__get_ondrop(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->ondrop();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_ondrop(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondrop;
    EventListener *ondrop = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_ondrop", &py_ondrop))
        return -1;
    if (py_ondrop)
        ondrop = coreEventListener(py_ondrop);
    coreDocument((PyDOMObject*)(self))->setOndrop((EventListener *) ondrop);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onerror(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onerror();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onerror(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onerror;
    EventListener *onerror = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onerror", &py_onerror))
        return -1;
    if (py_onerror)
        onerror = coreEventListener(py_onerror);
    coreDocument((PyDOMObject*)(self))->setOnerror((EventListener *) onerror);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onfocus(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onfocus();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onfocus(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onfocus;
    EventListener *onfocus = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onfocus", &py_onfocus))
        return -1;
    if (py_onfocus)
        onfocus = coreEventListener(py_onfocus);
    coreDocument((PyDOMObject*)(self))->setOnfocus((EventListener *) onfocus);

    return 0;
}

static PyObject *
_wrap_coredocument__get_oninput(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->oninput();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_oninput(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oninput;
    EventListener *oninput = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_oninput", &py_oninput))
        return -1;
    if (py_oninput)
        oninput = coreEventListener(py_oninput);
    coreDocument((PyDOMObject*)(self))->setOninput((EventListener *) oninput);

    return 0;
}

static PyObject *
_wrap_coredocument__get_oninvalid(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->oninvalid();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_oninvalid(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oninvalid;
    EventListener *oninvalid = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_oninvalid", &py_oninvalid))
        return -1;
    if (py_oninvalid)
        oninvalid = coreEventListener(py_oninvalid);
    coreDocument((PyDOMObject*)(self))->setOninvalid((EventListener *) oninvalid);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onkeydown(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onkeydown();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onkeydown(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onkeydown;
    EventListener *onkeydown = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onkeydown", &py_onkeydown))
        return -1;
    if (py_onkeydown)
        onkeydown = coreEventListener(py_onkeydown);
    coreDocument((PyDOMObject*)(self))->setOnkeydown((EventListener *) onkeydown);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onkeypress(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onkeypress();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onkeypress(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onkeypress;
    EventListener *onkeypress = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onkeypress", &py_onkeypress))
        return -1;
    if (py_onkeypress)
        onkeypress = coreEventListener(py_onkeypress);
    coreDocument((PyDOMObject*)(self))->setOnkeypress((EventListener *) onkeypress);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onkeyup(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onkeyup();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onkeyup(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onkeyup;
    EventListener *onkeyup = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onkeyup", &py_onkeyup))
        return -1;
    if (py_onkeyup)
        onkeyup = coreEventListener(py_onkeyup);
    coreDocument((PyDOMObject*)(self))->setOnkeyup((EventListener *) onkeyup);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onload();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onload(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onload;
    EventListener *onload = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onload", &py_onload))
        return -1;
    if (py_onload)
        onload = coreEventListener(py_onload);
    coreDocument((PyDOMObject*)(self))->setOnload((EventListener *) onload);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onmousedown(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onmousedown();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onmousedown(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmousedown;
    EventListener *onmousedown = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onmousedown", &py_onmousedown))
        return -1;
    if (py_onmousedown)
        onmousedown = coreEventListener(py_onmousedown);
    coreDocument((PyDOMObject*)(self))->setOnmousedown((EventListener *) onmousedown);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onmousemove(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onmousemove();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onmousemove(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmousemove;
    EventListener *onmousemove = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onmousemove", &py_onmousemove))
        return -1;
    if (py_onmousemove)
        onmousemove = coreEventListener(py_onmousemove);
    coreDocument((PyDOMObject*)(self))->setOnmousemove((EventListener *) onmousemove);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onmouseout(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onmouseout();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onmouseout(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmouseout;
    EventListener *onmouseout = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onmouseout", &py_onmouseout))
        return -1;
    if (py_onmouseout)
        onmouseout = coreEventListener(py_onmouseout);
    coreDocument((PyDOMObject*)(self))->setOnmouseout((EventListener *) onmouseout);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onmouseover(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onmouseover();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onmouseover(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmouseover;
    EventListener *onmouseover = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onmouseover", &py_onmouseover))
        return -1;
    if (py_onmouseover)
        onmouseover = coreEventListener(py_onmouseover);
    coreDocument((PyDOMObject*)(self))->setOnmouseover((EventListener *) onmouseover);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onmouseup(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onmouseup();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onmouseup(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmouseup;
    EventListener *onmouseup = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onmouseup", &py_onmouseup))
        return -1;
    if (py_onmouseup)
        onmouseup = coreEventListener(py_onmouseup);
    coreDocument((PyDOMObject*)(self))->setOnmouseup((EventListener *) onmouseup);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onmousewheel(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onmousewheel();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onmousewheel(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmousewheel;
    EventListener *onmousewheel = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onmousewheel", &py_onmousewheel))
        return -1;
    if (py_onmousewheel)
        onmousewheel = coreEventListener(py_onmousewheel);
    coreDocument((PyDOMObject*)(self))->setOnmousewheel((EventListener *) onmousewheel);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onreadystatechange(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onreadystatechange();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onreadystatechange(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onreadystatechange;
    EventListener *onreadystatechange = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onreadystatechange", &py_onreadystatechange))
        return -1;
    if (py_onreadystatechange)
        onreadystatechange = coreEventListener(py_onreadystatechange);
    coreDocument((PyDOMObject*)(self))->setOnreadystatechange((EventListener *) onreadystatechange);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onscroll(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onscroll();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onscroll(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onscroll;
    EventListener *onscroll = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onscroll", &py_onscroll))
        return -1;
    if (py_onscroll)
        onscroll = coreEventListener(py_onscroll);
    coreDocument((PyDOMObject*)(self))->setOnscroll((EventListener *) onscroll);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onselect(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onselect();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onselect(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onselect;
    EventListener *onselect = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onselect", &py_onselect))
        return -1;
    if (py_onselect)
        onselect = coreEventListener(py_onselect);
    coreDocument((PyDOMObject*)(self))->setOnselect((EventListener *) onselect);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onsubmit(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onsubmit();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onsubmit(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onsubmit;
    EventListener *onsubmit = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onsubmit", &py_onsubmit))
        return -1;
    if (py_onsubmit)
        onsubmit = coreEventListener(py_onsubmit);
    coreDocument((PyDOMObject*)(self))->setOnsubmit((EventListener *) onsubmit);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onbeforecut(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onbeforecut();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onbeforecut(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onbeforecut;
    EventListener *onbeforecut = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onbeforecut", &py_onbeforecut))
        return -1;
    if (py_onbeforecut)
        onbeforecut = coreEventListener(py_onbeforecut);
    coreDocument((PyDOMObject*)(self))->setOnbeforecut((EventListener *) onbeforecut);

    return 0;
}

static PyObject *
_wrap_coredocument__get_oncut(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->oncut();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_oncut(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oncut;
    EventListener *oncut = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_oncut", &py_oncut))
        return -1;
    if (py_oncut)
        oncut = coreEventListener(py_oncut);
    coreDocument((PyDOMObject*)(self))->setOncut((EventListener *) oncut);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onbeforecopy(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onbeforecopy();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onbeforecopy(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onbeforecopy;
    EventListener *onbeforecopy = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onbeforecopy", &py_onbeforecopy))
        return -1;
    if (py_onbeforecopy)
        onbeforecopy = coreEventListener(py_onbeforecopy);
    coreDocument((PyDOMObject*)(self))->setOnbeforecopy((EventListener *) onbeforecopy);

    return 0;
}

static PyObject *
_wrap_coredocument__get_oncopy(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->oncopy();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_oncopy(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oncopy;
    EventListener *oncopy = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_oncopy", &py_oncopy))
        return -1;
    if (py_oncopy)
        oncopy = coreEventListener(py_oncopy);
    coreDocument((PyDOMObject*)(self))->setOncopy((EventListener *) oncopy);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onbeforepaste(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onbeforepaste();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onbeforepaste(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onbeforepaste;
    EventListener *onbeforepaste = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onbeforepaste", &py_onbeforepaste))
        return -1;
    if (py_onbeforepaste)
        onbeforepaste = coreEventListener(py_onbeforepaste);
    coreDocument((PyDOMObject*)(self))->setOnbeforepaste((EventListener *) onbeforepaste);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onpaste(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onpaste();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onpaste(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onpaste;
    EventListener *onpaste = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onpaste", &py_onpaste))
        return -1;
    if (py_onpaste)
        onpaste = coreEventListener(py_onpaste);
    coreDocument((PyDOMObject*)(self))->setOnpaste((EventListener *) onpaste);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onreset(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onreset();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onreset(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onreset;
    EventListener *onreset = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onreset", &py_onreset))
        return -1;
    if (py_onreset)
        onreset = coreEventListener(py_onreset);
    coreDocument((PyDOMObject*)(self))->setOnreset((EventListener *) onreset);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onsearch(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onsearch();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onsearch(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onsearch;
    EventListener *onsearch = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onsearch", &py_onsearch))
        return -1;
    if (py_onsearch)
        onsearch = coreEventListener(py_onsearch);
    coreDocument((PyDOMObject*)(self))->setOnsearch((EventListener *) onsearch);

    return 0;
}

static PyObject *
_wrap_coredocument__get_onselectstart(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDocument((PyDOMObject*)(self))->onselectstart();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredocument__set_onselectstart(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onselectstart;
    EventListener *onselectstart = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredocument__set_onselectstart", &py_onselectstart))
        return -1;
    if (py_onselectstart)
        onselectstart = coreEventListener(py_onselectstart);
    coreDocument((PyDOMObject*)(self))->setOnselectstart((EventListener *) onselectstart);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coredocument_getsets[] = {
    { (char*)"doctype", (getter)WebKit::_wrap_coredocument__get_doctype, (setter)0, 0, 0 },
    { (char*)"implementation", (getter)WebKit::_wrap_coredocument__get_implementation, (setter)0, 0, 0 },
    { (char*)"documentElement", (getter)WebKit::_wrap_coredocument__get_documentElement, (setter)0, 0, 0 },
    { (char*)"inputEncoding", (getter)WebKit::_wrap_coredocument__get_inputEncoding, (setter)0, 0, 0 },
    { (char*)"xmlEncoding", (getter)WebKit::_wrap_coredocument__get_xmlEncoding, (setter)0, 0, 0 },
    { (char*)"xmlVersion", (getter)WebKit::_wrap_coredocument__get_xmlVersion, (setter)WebKit::_wrap_coredocument__set_xmlVersion, 0, 0 },
    { (char*)"xmlStandalone", (getter)WebKit::_wrap_coredocument__get_xmlStandalone, (setter)WebKit::_wrap_coredocument__set_xmlStandalone, 0, 0 },
    { (char*)"documentURI", (getter)WebKit::_wrap_coredocument__get_documentURI, (setter)WebKit::_wrap_coredocument__set_documentURI, 0, 0 },
    { (char*)"defaultView", (getter)WebKit::_wrap_coredocument__get_defaultView, (setter)0, 0, 0 },
    { (char*)"styleSheets", (getter)WebKit::_wrap_coredocument__get_styleSheets, (setter)0, 0, 0 },
    { (char*)"title", (getter)WebKit::_wrap_coredocument__get_title, (setter)WebKit::_wrap_coredocument__set_title, 0, 0 },
    { (char*)"referrer", (getter)WebKit::_wrap_coredocument__get_referrer, (setter)0, 0, 0 },
    { (char*)"domain", (getter)WebKit::_wrap_coredocument__get_domain, (setter)0, 0, 0 },
    { (char*)"URL", (getter)WebKit::_wrap_coredocument__get_URL, (setter)0, 0, 0 },
    { (char*)"cookie", (getter)WebKit::_wrap_coredocument__get_cookie, (setter)WebKit::_wrap_coredocument__set_cookie, 0, 0 },
    { (char*)"body", (getter)WebKit::_wrap_coredocument__get_body, (setter)WebKit::_wrap_coredocument__set_body, 0, 0 },
    { (char*)"head", (getter)WebKit::_wrap_coredocument__get_head, (setter)0, 0, 0 },
    { (char*)"images", (getter)WebKit::_wrap_coredocument__get_images, (setter)0, 0, 0 },
    { (char*)"applets", (getter)WebKit::_wrap_coredocument__get_applets, (setter)0, 0, 0 },
    { (char*)"links", (getter)WebKit::_wrap_coredocument__get_links, (setter)0, 0, 0 },
    { (char*)"forms", (getter)WebKit::_wrap_coredocument__get_forms, (setter)0, 0, 0 },
    { (char*)"anchors", (getter)WebKit::_wrap_coredocument__get_anchors, (setter)0, 0, 0 },
    { (char*)"lastModified", (getter)WebKit::_wrap_coredocument__get_lastModified, (setter)0, 0, 0 },
    { (char*)"charset", (getter)WebKit::_wrap_coredocument__get_charset, (setter)WebKit::_wrap_coredocument__set_charset, 0, 0 },
    { (char*)"defaultCharset", (getter)WebKit::_wrap_coredocument__get_defaultCharset, (setter)0, 0, 0 },
    { (char*)"readyState", (getter)WebKit::_wrap_coredocument__get_readyState, (setter)0, 0, 0 },
    { (char*)"characterSet", (getter)WebKit::_wrap_coredocument__get_characterSet, (setter)0, 0, 0 },
    { (char*)"preferredStylesheetSet", (getter)WebKit::_wrap_coredocument__get_preferredStylesheetSet, (setter)0, 0, 0 },
    { (char*)"selectedStylesheetSet", (getter)WebKit::_wrap_coredocument__get_selectedStylesheetSet, (setter)WebKit::_wrap_coredocument__set_selectedStylesheetSet, 0, 0 },
    { (char*)"compatMode", (getter)WebKit::_wrap_coredocument__get_compatMode, (setter)0, 0, 0 },
    { (char*)"onabort", (getter)WebKit::_wrap_coredocument__get_onabort, (setter)WebKit::_wrap_coredocument__set_onabort, 0, 0 },
    { (char*)"onblur", (getter)WebKit::_wrap_coredocument__get_onblur, (setter)WebKit::_wrap_coredocument__set_onblur, 0, 0 },
    { (char*)"onchange", (getter)WebKit::_wrap_coredocument__get_onchange, (setter)WebKit::_wrap_coredocument__set_onchange, 0, 0 },
    { (char*)"onclick", (getter)WebKit::_wrap_coredocument__get_onclick, (setter)WebKit::_wrap_coredocument__set_onclick, 0, 0 },
    { (char*)"oncontextmenu", (getter)WebKit::_wrap_coredocument__get_oncontextmenu, (setter)WebKit::_wrap_coredocument__set_oncontextmenu, 0, 0 },
    { (char*)"ondblclick", (getter)WebKit::_wrap_coredocument__get_ondblclick, (setter)WebKit::_wrap_coredocument__set_ondblclick, 0, 0 },
    { (char*)"ondrag", (getter)WebKit::_wrap_coredocument__get_ondrag, (setter)WebKit::_wrap_coredocument__set_ondrag, 0, 0 },
    { (char*)"ondragend", (getter)WebKit::_wrap_coredocument__get_ondragend, (setter)WebKit::_wrap_coredocument__set_ondragend, 0, 0 },
    { (char*)"ondragenter", (getter)WebKit::_wrap_coredocument__get_ondragenter, (setter)WebKit::_wrap_coredocument__set_ondragenter, 0, 0 },
    { (char*)"ondragleave", (getter)WebKit::_wrap_coredocument__get_ondragleave, (setter)WebKit::_wrap_coredocument__set_ondragleave, 0, 0 },
    { (char*)"ondragover", (getter)WebKit::_wrap_coredocument__get_ondragover, (setter)WebKit::_wrap_coredocument__set_ondragover, 0, 0 },
    { (char*)"ondragstart", (getter)WebKit::_wrap_coredocument__get_ondragstart, (setter)WebKit::_wrap_coredocument__set_ondragstart, 0, 0 },
    { (char*)"ondrop", (getter)WebKit::_wrap_coredocument__get_ondrop, (setter)WebKit::_wrap_coredocument__set_ondrop, 0, 0 },
    { (char*)"onerror", (getter)WebKit::_wrap_coredocument__get_onerror, (setter)WebKit::_wrap_coredocument__set_onerror, 0, 0 },
    { (char*)"onfocus", (getter)WebKit::_wrap_coredocument__get_onfocus, (setter)WebKit::_wrap_coredocument__set_onfocus, 0, 0 },
    { (char*)"oninput", (getter)WebKit::_wrap_coredocument__get_oninput, (setter)WebKit::_wrap_coredocument__set_oninput, 0, 0 },
    { (char*)"oninvalid", (getter)WebKit::_wrap_coredocument__get_oninvalid, (setter)WebKit::_wrap_coredocument__set_oninvalid, 0, 0 },
    { (char*)"onkeydown", (getter)WebKit::_wrap_coredocument__get_onkeydown, (setter)WebKit::_wrap_coredocument__set_onkeydown, 0, 0 },
    { (char*)"onkeypress", (getter)WebKit::_wrap_coredocument__get_onkeypress, (setter)WebKit::_wrap_coredocument__set_onkeypress, 0, 0 },
    { (char*)"onkeyup", (getter)WebKit::_wrap_coredocument__get_onkeyup, (setter)WebKit::_wrap_coredocument__set_onkeyup, 0, 0 },
    { (char*)"onload", (getter)WebKit::_wrap_coredocument__get_onload, (setter)WebKit::_wrap_coredocument__set_onload, 0, 0 },
    { (char*)"onmousedown", (getter)WebKit::_wrap_coredocument__get_onmousedown, (setter)WebKit::_wrap_coredocument__set_onmousedown, 0, 0 },
    { (char*)"onmousemove", (getter)WebKit::_wrap_coredocument__get_onmousemove, (setter)WebKit::_wrap_coredocument__set_onmousemove, 0, 0 },
    { (char*)"onmouseout", (getter)WebKit::_wrap_coredocument__get_onmouseout, (setter)WebKit::_wrap_coredocument__set_onmouseout, 0, 0 },
    { (char*)"onmouseover", (getter)WebKit::_wrap_coredocument__get_onmouseover, (setter)WebKit::_wrap_coredocument__set_onmouseover, 0, 0 },
    { (char*)"onmouseup", (getter)WebKit::_wrap_coredocument__get_onmouseup, (setter)WebKit::_wrap_coredocument__set_onmouseup, 0, 0 },
    { (char*)"onmousewheel", (getter)WebKit::_wrap_coredocument__get_onmousewheel, (setter)WebKit::_wrap_coredocument__set_onmousewheel, 0, 0 },
    { (char*)"onreadystatechange", (getter)WebKit::_wrap_coredocument__get_onreadystatechange, (setter)WebKit::_wrap_coredocument__set_onreadystatechange, 0, 0 },
    { (char*)"onscroll", (getter)WebKit::_wrap_coredocument__get_onscroll, (setter)WebKit::_wrap_coredocument__set_onscroll, 0, 0 },
    { (char*)"onselect", (getter)WebKit::_wrap_coredocument__get_onselect, (setter)WebKit::_wrap_coredocument__set_onselect, 0, 0 },
    { (char*)"onsubmit", (getter)WebKit::_wrap_coredocument__get_onsubmit, (setter)WebKit::_wrap_coredocument__set_onsubmit, 0, 0 },
    { (char*)"onbeforecut", (getter)WebKit::_wrap_coredocument__get_onbeforecut, (setter)WebKit::_wrap_coredocument__set_onbeforecut, 0, 0 },
    { (char*)"oncut", (getter)WebKit::_wrap_coredocument__get_oncut, (setter)WebKit::_wrap_coredocument__set_oncut, 0, 0 },
    { (char*)"onbeforecopy", (getter)WebKit::_wrap_coredocument__get_onbeforecopy, (setter)WebKit::_wrap_coredocument__set_onbeforecopy, 0, 0 },
    { (char*)"oncopy", (getter)WebKit::_wrap_coredocument__get_oncopy, (setter)WebKit::_wrap_coredocument__set_oncopy, 0, 0 },
    { (char*)"onbeforepaste", (getter)WebKit::_wrap_coredocument__get_onbeforepaste, (setter)WebKit::_wrap_coredocument__set_onbeforepaste, 0, 0 },
    { (char*)"onpaste", (getter)WebKit::_wrap_coredocument__get_onpaste, (setter)WebKit::_wrap_coredocument__set_onpaste, 0, 0 },
    { (char*)"onreset", (getter)WebKit::_wrap_coredocument__get_onreset, (setter)WebKit::_wrap_coredocument__set_onreset, 0, 0 },
    { (char*)"onsearch", (getter)WebKit::_wrap_coredocument__get_onsearch, (setter)WebKit::_wrap_coredocument__set_onsearch, 0, 0 },
    { (char*)"onselectstart", (getter)WebKit::_wrap_coredocument__get_onselectstart, (setter)WebKit::_wrap_coredocument__set_onselectstart, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Document(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Document* cobj = coreDocument(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMDocument_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Document",                   /* tp_name */
    sizeof(PyDOMDocument),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Document,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMDocument_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coredocument_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Document_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- DocumentType ----------- */

namespace WebKit {
using namespace WebCore;

static int
DocumentType_init(DocumentType *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMNode_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coredocumenttype__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocumentType((PyDOMObject*)(self))->name();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocumenttype__get_entities(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::NamedNodeMap* _ret;

    _ret = coreDocumentType((PyDOMObject*)(self))->entities();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocumenttype__get_notations(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::NamedNodeMap* _ret;

    _ret = coreDocumentType((PyDOMObject*)(self))->notations();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocumenttype__get_publicId(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocumentType((PyDOMObject*)(self))->publicId();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocumenttype__get_systemId(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocumentType((PyDOMObject*)(self))->systemId();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredocumenttype__get_internalSubset(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDocumentType((PyDOMObject*)(self))->internalSubset();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coredocumenttype_getsets[] = {
    { (char*)"name", (getter)WebKit::_wrap_coredocumenttype__get_name, (setter)0, 0, 0 },
    { (char*)"entities", (getter)WebKit::_wrap_coredocumenttype__get_entities, (setter)0, 0, 0 },
    { (char*)"notations", (getter)WebKit::_wrap_coredocumenttype__get_notations, (setter)0, 0, 0 },
    { (char*)"publicId", (getter)WebKit::_wrap_coredocumenttype__get_publicId, (setter)0, 0, 0 },
    { (char*)"systemId", (getter)WebKit::_wrap_coredocumenttype__get_systemId, (setter)0, 0, 0 },
    { (char*)"internalSubset", (getter)WebKit::_wrap_coredocumenttype__get_internalSubset, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_DocumentType(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::DocumentType* cobj = coreDocumentType(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMDocumentType_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.DocumentType",                   /* tp_name */
    sizeof(PyDOMDocumentType),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_DocumentType,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coredocumenttype_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::DocumentType_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- DOMCoreException ----------- */

namespace WebKit {
using namespace WebCore;

static int
DOMCoreException_init(DOMCoreException *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coredomcoreexception__get_code(PyObject *self, void *closure)
{
    int ret;

    ret = coreDOMCoreException((PyDOMObject*)(self))->code();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_coredomcoreexception__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDOMCoreException((PyDOMObject*)(self))->name();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomcoreexception__get_message(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDOMCoreException((PyDOMObject*)(self))->message();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coredomcoreexception_getsets[] = {
    { (char*)"code", (getter)WebKit::_wrap_coredomcoreexception__get_code, (setter)0, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_coredomcoreexception__get_name, (setter)0, 0, 0 },
    { (char*)"message", (getter)WebKit::_wrap_coredomcoreexception__get_message, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_DOMCoreException(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::DOMCoreException* cobj = coreDOMCoreException(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMDOMCoreException_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.DOMCoreException",                   /* tp_name */
    sizeof(PyDOMDOMCoreException),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_DOMCoreException,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coredomcoreexception_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::DOMCoreException_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- DOMImplementation ----------- */

namespace WebKit {
using namespace WebCore;

static int
DOMImplementation_init(DOMImplementation *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_DOMImplementation_hasFeature(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"feature", (char*)"version", NULL };
    char *feature, *version;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.DOMImplementation.hasFeature", kwlist, &feature, &version))
        return NULL;
    WTF::String cvt_feature = WTF::String::fromUTF8((const char*)feature);
    WTF::String cvt_version = WTF::String::fromUTF8((const char*)version);
    
    ret = coreDOMImplementation(self)->hasFeature(cvt_feature, cvt_version);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_DOMImplementation_createDocumentType(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"qualifiedName", (char*)"publicId", (char*)"systemId", NULL };
    char *qualifiedName, *publicId, *systemId;
    PyObject *py_ret;
    WebCore::DocumentType* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sss:pywebkit.DOMImplementation.createDocumentType", kwlist, &qualifiedName, &publicId, &systemId))
        return NULL;
    WTF::String cvt_qualifiedName = WTF::String::fromUTF8((const char*)qualifiedName);
    WTF::String cvt_publicId = WTF::String::fromUTF8((const char*)publicId);
    WTF::String cvt_systemId = WTF::String::fromUTF8((const char*)systemId);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDOMImplementation(self)->createDocumentType(cvt_qualifiedName, cvt_publicId, cvt_systemId, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_DOMImplementation_createDocument(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", (char*)"qualifiedName", (char*)"doctype", NULL };
    char *namespaceURI, *qualifiedName;
    PyDOMObject *doctype;
    WebCore::Document* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ssO!:pywebkit.DOMImplementation.createDocument", kwlist, &namespaceURI, &qualifiedName, PtrPyDOMDocumentType_Type, &doctype))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    WTF::String cvt_qualifiedName = WTF::String::fromUTF8((const char*)qualifiedName);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDOMImplementation(self)->createDocument(cvt_namespaceURI, cvt_qualifiedName, coreDocumentType(doctype), ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_DOMImplementation_createCSSStyleSheet(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"title", (char*)"media", NULL };
    char *title, *media;
    WebCore::CSSStyleSheet* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.DOMImplementation.createCSSStyleSheet", kwlist, &title, &media))
        return NULL;
    WTF::String cvt_title = WTF::String::fromUTF8((const char*)title);
    WTF::String cvt_media = WTF::String::fromUTF8((const char*)media);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDOMImplementation(self)->createCSSStyleSheet(cvt_title, cvt_media, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_DOMImplementation_createHTMLDocument(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"title", NULL };
    char *title;
    WebCore::HTMLDocument* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.DOMImplementation.createHTMLDocument", kwlist, &title))
        return NULL;
    WTF::String cvt_title = WTF::String::fromUTF8((const char*)title);
    
    _ret = WTF::getPtr(coreDOMImplementation(self)->createHTMLDocument(cvt_title));
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMDOMImplementation_methods[] = {
    { "hasFeature", (PyCFunction)WebKit::_wrap_DOMImplementation_hasFeature, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createDocumentType", (PyCFunction)WebKit::_wrap_DOMImplementation_createDocumentType, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createDocument", (PyCFunction)WebKit::_wrap_DOMImplementation_createDocument, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createCSSStyleSheet", (PyCFunction)WebKit::_wrap_DOMImplementation_createCSSStyleSheet, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "createHTMLDocument", (PyCFunction)WebKit::_wrap_DOMImplementation_createHTMLDocument, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
void dealloc_DOMImplementation(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::DOMImplementation* cobj = coreDOMImplementation(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMDOMImplementation_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.DOMImplementation",                   /* tp_name */
    sizeof(PyDOMDOMImplementation),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_DOMImplementation,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMDOMImplementation_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::DOMImplementation_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- DOMStringList ----------- */

namespace WebKit {
using namespace WebCore;

static int
DOMStringList_init(DOMStringList *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_DOMStringList_item(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    char *_ret;
    unsigned long index;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.DOMStringList.item", kwlist, &index))
        return NULL;
    
    ret = coreDOMStringList(self)->item(index);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_DOMStringList_contains(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"string", NULL };
    char *string;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.DOMStringList.contains", kwlist, &string))
        return NULL;
    WTF::String cvt_string = WTF::String::fromUTF8((const char*)string);
    
    ret = coreDOMStringList(self)->contains(cvt_string);
    
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMDOMStringList_methods[] = {
    { "item", (PyCFunction)WebKit::_wrap_DOMStringList_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "contains", (PyCFunction)WebKit::_wrap_DOMStringList_contains, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coredomstringlist__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreDOMStringList((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coredomstringlist_getsets[] = {
    { (char*)"length", (getter)WebKit::_wrap_coredomstringlist__get_length, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_DOMStringList(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::DOMStringList* cobj = coreDOMStringList(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMDOMStringList_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.DOMStringList",                   /* tp_name */
    sizeof(PyDOMDOMStringList),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_DOMStringList,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMDOMStringList_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coredomstringlist_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::DOMStringList_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- DOMStringMap ----------- */

namespace WebKit {
using namespace WebCore;

static int
DOMStringMap_init(DOMStringMap *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
void dealloc_DOMStringMap(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::DOMStringMap* cobj = coreDOMStringMap(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMDOMStringMap_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.DOMStringMap",                   /* tp_name */
    sizeof(PyDOMDOMStringMap),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_DOMStringMap,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::DOMStringMap_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Element ----------- */

namespace WebKit {
using namespace WebCore;

static int
Element_init(Element *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMNode_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_Element_getAttribute(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Element.getAttribute", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    
    ret = coreElement(self)->getAttribute(cvt_name);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_Element_setAttribute(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", (char*)"value", NULL };
    char *name, *value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.Element.setAttribute", kwlist, &name, &value))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    WebCore::ExceptionCode ec = 0;
    
    coreElement(self)->setAttribute(cvt_name, cvt_value, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Element_removeAttribute(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Element.removeAttribute", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    WebCore::ExceptionCode ec = 0;
    
    coreElement(self)->removeAttribute(cvt_name, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Element_getAttributeNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name;
    WebCore::Attr* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Element.getAttributeNode", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    
    _ret = WTF::getPtr(coreElement(self)->getAttributeNode(cvt_name));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Element_setAttributeNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"newAttr", NULL };
    PyObject *py_ret;
    PyDOMObject *newAttr;
    WebCore::Attr* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Element.setAttributeNode", kwlist, PtrPyDOMAttr_Type, &newAttr))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreElement(self)->setAttributeNode(coreAttr(newAttr), ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Element_removeAttributeNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"oldAttr", NULL };
    PyObject *py_ret;
    PyDOMObject *oldAttr;
    WebCore::Attr* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Element.removeAttributeNode", kwlist, PtrPyDOMAttr_Type, &oldAttr))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreElement(self)->removeAttributeNode(coreAttr(oldAttr), ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Element_getElementsByTagName(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name;
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Element.getElementsByTagName", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    
    _ret = WTF::getPtr(coreElement(self)->getElementsByTagName(cvt_name));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Element_getAttributeNS(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", (char*)"localName", NULL };
    char *namespaceURI, *localName, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.Element.getAttributeNS", kwlist, &namespaceURI, &localName))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    WTF::String cvt_localName = WTF::String::fromUTF8((const char*)localName);
    
    ret = coreElement(self)->getAttributeNS(cvt_namespaceURI, cvt_localName);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_Element_setAttributeNS(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", (char*)"qualifiedName", (char*)"value", NULL };
    char *namespaceURI, *qualifiedName, *value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sss:pywebkit.Element.setAttributeNS", kwlist, &namespaceURI, &qualifiedName, &value))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    WTF::String cvt_qualifiedName = WTF::String::fromUTF8((const char*)qualifiedName);
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    WebCore::ExceptionCode ec = 0;
    
    coreElement(self)->setAttributeNS(cvt_namespaceURI, cvt_qualifiedName, cvt_value, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Element_removeAttributeNS(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", (char*)"localName", NULL };
    char *namespaceURI, *localName;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.Element.removeAttributeNS", kwlist, &namespaceURI, &localName))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    WTF::String cvt_localName = WTF::String::fromUTF8((const char*)localName);
    WebCore::ExceptionCode ec = 0;
    
    coreElement(self)->removeAttributeNS(cvt_namespaceURI, cvt_localName, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Element_getElementsByTagNameNS(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", (char*)"localName", NULL };
    char *namespaceURI, *localName;
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.Element.getElementsByTagNameNS", kwlist, &namespaceURI, &localName))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    WTF::String cvt_localName = WTF::String::fromUTF8((const char*)localName);
    
    _ret = WTF::getPtr(coreElement(self)->getElementsByTagNameNS(cvt_namespaceURI, cvt_localName));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Element_getAttributeNodeNS(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", (char*)"localName", NULL };
    char *namespaceURI, *localName;
    WebCore::Attr* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.Element.getAttributeNodeNS", kwlist, &namespaceURI, &localName))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    WTF::String cvt_localName = WTF::String::fromUTF8((const char*)localName);
    
    _ret = WTF::getPtr(coreElement(self)->getAttributeNodeNS(cvt_namespaceURI, cvt_localName));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Element_setAttributeNodeNS(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"newAttr", NULL };
    PyObject *py_ret;
    PyDOMObject *newAttr;
    WebCore::Attr* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Element.setAttributeNodeNS", kwlist, PtrPyDOMAttr_Type, &newAttr))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreElement(self)->setAttributeNodeNS(coreAttr(newAttr), ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Element_hasAttribute(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Element.hasAttribute", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    
    ret = coreElement(self)->hasAttribute(cvt_name);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Element_hasAttributeNS(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", (char*)"localName", NULL };
    char *namespaceURI, *localName;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.Element.hasAttributeNS", kwlist, &namespaceURI, &localName))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    WTF::String cvt_localName = WTF::String::fromUTF8((const char*)localName);
    
    ret = coreElement(self)->hasAttributeNS(cvt_namespaceURI, cvt_localName);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Element_focus(PyDOMObject *self)
{
    
    coreElement(self)->focus();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Element_blur(PyDOMObject *self)
{
    
    coreElement(self)->blur();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Element_scrollIntoView(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"alignWithTop", NULL };
    int alignWithTop;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:pywebkit.Element.scrollIntoView", kwlist, &alignWithTop))
        return NULL;
    bool cvt_alignWithTop = (bool)alignWithTop;
    
    coreElement(self)->scrollIntoView(cvt_alignWithTop);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Element_contains(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"element", NULL };
    PyDOMObject *element;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Element.contains", kwlist, PtrPyDOMElement_Type, &element))
        return NULL;
    
    ret = coreElement(self)->contains(coreElement(element));
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Element_scrollIntoViewIfNeeded(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"centerIfNeeded", NULL };
    int centerIfNeeded;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:pywebkit.Element.scrollIntoViewIfNeeded", kwlist, &centerIfNeeded))
        return NULL;
    bool cvt_centerIfNeeded = (bool)centerIfNeeded;
    
    coreElement(self)->scrollIntoViewIfNeeded(cvt_centerIfNeeded);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Element_scrollByLines(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"lines", NULL };
    long lines;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.Element.scrollByLines", kwlist, &lines))
        return NULL;
    
    coreElement(self)->scrollByLines(lines);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Element_scrollByPages(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"pages", NULL };
    long pages;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.Element.scrollByPages", kwlist, &pages))
        return NULL;
    
    coreElement(self)->scrollByPages(pages);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Element_getElementsByClassName(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name;
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Element.getElementsByClassName", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    
    _ret = WTF::getPtr(coreElement(self)->getElementsByClassName(cvt_name));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Element_querySelector(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"selectors", NULL };
    char *selectors;
    WebCore::Element* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Element.querySelector", kwlist, &selectors))
        return NULL;
    WTF::String cvt_selectors = WTF::String::fromUTF8((const char*)selectors);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreElement(self)->querySelector(cvt_selectors, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Element_querySelectorAll(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"selectors", NULL };
    char *selectors;
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Element.querySelectorAll", kwlist, &selectors))
        return NULL;
    WTF::String cvt_selectors = WTF::String::fromUTF8((const char*)selectors);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreElement(self)->querySelectorAll(cvt_selectors, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Element_webkitMatchesSelector(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"selectors", NULL };
    char *selectors;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Element.webkitMatchesSelector", kwlist, &selectors))
        return NULL;
    WTF::String cvt_selectors = WTF::String::fromUTF8((const char*)selectors);
    WebCore::ExceptionCode ec = 0;
    
    ret = coreElement(self)->webkitMatchesSelector(cvt_selectors, ec);
    
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMElement_methods[] = {
    { "getAttribute", (PyCFunction)WebKit::_wrap_Element_getAttribute, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setAttribute", (PyCFunction)WebKit::_wrap_Element_setAttribute, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeAttribute", (PyCFunction)WebKit::_wrap_Element_removeAttribute, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getAttributeNode", (PyCFunction)WebKit::_wrap_Element_getAttributeNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setAttributeNode", (PyCFunction)WebKit::_wrap_Element_setAttributeNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeAttributeNode", (PyCFunction)WebKit::_wrap_Element_removeAttributeNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getElementsByTagName", (PyCFunction)WebKit::_wrap_Element_getElementsByTagName, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getAttributeNS", (PyCFunction)WebKit::_wrap_Element_getAttributeNS, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setAttributeNS", (PyCFunction)WebKit::_wrap_Element_setAttributeNS, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeAttributeNS", (PyCFunction)WebKit::_wrap_Element_removeAttributeNS, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getElementsByTagNameNS", (PyCFunction)WebKit::_wrap_Element_getElementsByTagNameNS, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getAttributeNodeNS", (PyCFunction)WebKit::_wrap_Element_getAttributeNodeNS, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setAttributeNodeNS", (PyCFunction)WebKit::_wrap_Element_setAttributeNodeNS, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "hasAttribute", (PyCFunction)WebKit::_wrap_Element_hasAttribute, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "hasAttributeNS", (PyCFunction)WebKit::_wrap_Element_hasAttributeNS, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "focus", (PyCFunction)WebKit::_wrap_Element_focus, METH_NOARGS,
      NULL },
    { "blur", (PyCFunction)WebKit::_wrap_Element_blur, METH_NOARGS,
      NULL },
    { "scrollIntoView", (PyCFunction)WebKit::_wrap_Element_scrollIntoView, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "contains", (PyCFunction)WebKit::_wrap_Element_contains, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "scrollIntoViewIfNeeded", (PyCFunction)WebKit::_wrap_Element_scrollIntoViewIfNeeded, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "scrollByLines", (PyCFunction)WebKit::_wrap_Element_scrollByLines, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "scrollByPages", (PyCFunction)WebKit::_wrap_Element_scrollByPages, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getElementsByClassName", (PyCFunction)WebKit::_wrap_Element_getElementsByClassName, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "querySelector", (PyCFunction)WebKit::_wrap_Element_querySelector, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "querySelectorAll", (PyCFunction)WebKit::_wrap_Element_querySelectorAll, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "webkitMatchesSelector", (PyCFunction)WebKit::_wrap_Element_webkitMatchesSelector, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coreelement__get_tagName(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreElement((PyDOMObject*)(self))->tagName();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreelement__get_style(PyObject *self, void *closure)
{
    WebCore::CSSStyleDeclaration* _ret;
    PyObject *py_ret;

    _ret = coreElement((PyDOMObject*)(self))->style();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreelement__get_offsetLeft(PyObject *self, void *closure)
{
    long ret;

    ret = coreElement((PyDOMObject*)(self))->offsetLeft();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreelement__get_offsetTop(PyObject *self, void *closure)
{
    long ret;

    ret = coreElement((PyDOMObject*)(self))->offsetTop();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreelement__get_offsetWidth(PyObject *self, void *closure)
{
    long ret;

    ret = coreElement((PyDOMObject*)(self))->offsetWidth();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreelement__get_offsetHeight(PyObject *self, void *closure)
{
    long ret;

    ret = coreElement((PyDOMObject*)(self))->offsetHeight();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreelement__get_offsetParent(PyObject *self, void *closure)
{
    WebCore::Element* _ret;
    PyObject *py_ret;

    _ret = coreElement((PyDOMObject*)(self))->offsetParent();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreelement__get_clientLeft(PyObject *self, void *closure)
{
    long ret;

    ret = coreElement((PyDOMObject*)(self))->clientLeft();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreelement__get_clientTop(PyObject *self, void *closure)
{
    long ret;

    ret = coreElement((PyDOMObject*)(self))->clientTop();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreelement__get_clientWidth(PyObject *self, void *closure)
{
    long ret;

    ret = coreElement((PyDOMObject*)(self))->clientWidth();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreelement__get_clientHeight(PyObject *self, void *closure)
{
    long ret;

    ret = coreElement((PyDOMObject*)(self))->clientHeight();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreelement__get_scrollLeft(PyObject *self, void *closure)
{
    long ret;

    ret = coreElement((PyDOMObject*)(self))->scrollLeft();
    return PyInt_FromLong(ret);

}

static int
_wrap_coreelement__set_scrollLeft(PyObject *self, PyObject *args, void *closure)
{
    long scrollLeft;

    if (!PyArg_Parse(args,"l:_wrap_coreelement__set_scrollLeft", &scrollLeft))
        return -1;
    coreElement((PyDOMObject*)(self))->setScrollLeft(scrollLeft);

    return 0;
}

static PyObject *
_wrap_coreelement__get_scrollTop(PyObject *self, void *closure)
{
    long ret;

    ret = coreElement((PyDOMObject*)(self))->scrollTop();
    return PyInt_FromLong(ret);

}

static int
_wrap_coreelement__set_scrollTop(PyObject *self, PyObject *args, void *closure)
{
    long scrollTop;

    if (!PyArg_Parse(args,"l:_wrap_coreelement__set_scrollTop", &scrollTop))
        return -1;
    coreElement((PyDOMObject*)(self))->setScrollTop(scrollTop);

    return 0;
}

static PyObject *
_wrap_coreelement__get_scrollWidth(PyObject *self, void *closure)
{
    long ret;

    ret = coreElement((PyDOMObject*)(self))->scrollWidth();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreelement__get_scrollHeight(PyObject *self, void *closure)
{
    long ret;

    ret = coreElement((PyDOMObject*)(self))->scrollHeight();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreelement__get_firstElementChild(PyObject *self, void *closure)
{
    WebCore::Element* _ret;
    PyObject *py_ret;

    _ret = coreElement((PyDOMObject*)(self))->firstElementChild();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreelement__get_lastElementChild(PyObject *self, void *closure)
{
    WebCore::Element* _ret;
    PyObject *py_ret;

    _ret = coreElement((PyDOMObject*)(self))->lastElementChild();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreelement__get_previousElementSibling(PyObject *self, void *closure)
{
    WebCore::Element* _ret;
    PyObject *py_ret;

    _ret = coreElement((PyDOMObject*)(self))->previousElementSibling();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreelement__get_nextElementSibling(PyObject *self, void *closure)
{
    WebCore::Element* _ret;
    PyObject *py_ret;

    _ret = coreElement((PyDOMObject*)(self))->nextElementSibling();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreelement__get_childElementCount(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreElement((PyDOMObject*)(self))->childElementCount();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_coreelement__get_onabort(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onabort();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onabort(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onabort;
    EventListener *onabort = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onabort", &py_onabort))
        return -1;
    if (py_onabort)
        onabort = coreEventListener(py_onabort);
    coreElement((PyDOMObject*)(self))->setOnabort((EventListener *) onabort);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onblur(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onblur();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onblur(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onblur;
    EventListener *onblur = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onblur", &py_onblur))
        return -1;
    if (py_onblur)
        onblur = coreEventListener(py_onblur);
    coreElement((PyDOMObject*)(self))->setOnblur((EventListener *) onblur);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onchange(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onchange();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onchange(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onchange;
    EventListener *onchange = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onchange", &py_onchange))
        return -1;
    if (py_onchange)
        onchange = coreEventListener(py_onchange);
    coreElement((PyDOMObject*)(self))->setOnchange((EventListener *) onchange);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onclick(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onclick();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onclick(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onclick;
    EventListener *onclick = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onclick", &py_onclick))
        return -1;
    if (py_onclick)
        onclick = coreEventListener(py_onclick);
    coreElement((PyDOMObject*)(self))->setOnclick((EventListener *) onclick);

    return 0;
}

static PyObject *
_wrap_coreelement__get_oncontextmenu(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->oncontextmenu();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_oncontextmenu(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oncontextmenu;
    EventListener *oncontextmenu = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_oncontextmenu", &py_oncontextmenu))
        return -1;
    if (py_oncontextmenu)
        oncontextmenu = coreEventListener(py_oncontextmenu);
    coreElement((PyDOMObject*)(self))->setOncontextmenu((EventListener *) oncontextmenu);

    return 0;
}

static PyObject *
_wrap_coreelement__get_ondblclick(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->ondblclick();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_ondblclick(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondblclick;
    EventListener *ondblclick = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_ondblclick", &py_ondblclick))
        return -1;
    if (py_ondblclick)
        ondblclick = coreEventListener(py_ondblclick);
    coreElement((PyDOMObject*)(self))->setOndblclick((EventListener *) ondblclick);

    return 0;
}

static PyObject *
_wrap_coreelement__get_ondrag(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->ondrag();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_ondrag(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondrag;
    EventListener *ondrag = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_ondrag", &py_ondrag))
        return -1;
    if (py_ondrag)
        ondrag = coreEventListener(py_ondrag);
    coreElement((PyDOMObject*)(self))->setOndrag((EventListener *) ondrag);

    return 0;
}

static PyObject *
_wrap_coreelement__get_ondragend(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->ondragend();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_ondragend(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragend;
    EventListener *ondragend = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_ondragend", &py_ondragend))
        return -1;
    if (py_ondragend)
        ondragend = coreEventListener(py_ondragend);
    coreElement((PyDOMObject*)(self))->setOndragend((EventListener *) ondragend);

    return 0;
}

static PyObject *
_wrap_coreelement__get_ondragenter(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->ondragenter();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_ondragenter(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragenter;
    EventListener *ondragenter = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_ondragenter", &py_ondragenter))
        return -1;
    if (py_ondragenter)
        ondragenter = coreEventListener(py_ondragenter);
    coreElement((PyDOMObject*)(self))->setOndragenter((EventListener *) ondragenter);

    return 0;
}

static PyObject *
_wrap_coreelement__get_ondragleave(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->ondragleave();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_ondragleave(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragleave;
    EventListener *ondragleave = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_ondragleave", &py_ondragleave))
        return -1;
    if (py_ondragleave)
        ondragleave = coreEventListener(py_ondragleave);
    coreElement((PyDOMObject*)(self))->setOndragleave((EventListener *) ondragleave);

    return 0;
}

static PyObject *
_wrap_coreelement__get_ondragover(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->ondragover();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_ondragover(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragover;
    EventListener *ondragover = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_ondragover", &py_ondragover))
        return -1;
    if (py_ondragover)
        ondragover = coreEventListener(py_ondragover);
    coreElement((PyDOMObject*)(self))->setOndragover((EventListener *) ondragover);

    return 0;
}

static PyObject *
_wrap_coreelement__get_ondragstart(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->ondragstart();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_ondragstart(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragstart;
    EventListener *ondragstart = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_ondragstart", &py_ondragstart))
        return -1;
    if (py_ondragstart)
        ondragstart = coreEventListener(py_ondragstart);
    coreElement((PyDOMObject*)(self))->setOndragstart((EventListener *) ondragstart);

    return 0;
}

static PyObject *
_wrap_coreelement__get_ondrop(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->ondrop();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_ondrop(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondrop;
    EventListener *ondrop = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_ondrop", &py_ondrop))
        return -1;
    if (py_ondrop)
        ondrop = coreEventListener(py_ondrop);
    coreElement((PyDOMObject*)(self))->setOndrop((EventListener *) ondrop);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onerror(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onerror();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onerror(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onerror;
    EventListener *onerror = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onerror", &py_onerror))
        return -1;
    if (py_onerror)
        onerror = coreEventListener(py_onerror);
    coreElement((PyDOMObject*)(self))->setOnerror((EventListener *) onerror);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onfocus(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onfocus();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onfocus(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onfocus;
    EventListener *onfocus = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onfocus", &py_onfocus))
        return -1;
    if (py_onfocus)
        onfocus = coreEventListener(py_onfocus);
    coreElement((PyDOMObject*)(self))->setOnfocus((EventListener *) onfocus);

    return 0;
}

static PyObject *
_wrap_coreelement__get_oninput(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->oninput();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_oninput(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oninput;
    EventListener *oninput = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_oninput", &py_oninput))
        return -1;
    if (py_oninput)
        oninput = coreEventListener(py_oninput);
    coreElement((PyDOMObject*)(self))->setOninput((EventListener *) oninput);

    return 0;
}

static PyObject *
_wrap_coreelement__get_oninvalid(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->oninvalid();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_oninvalid(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oninvalid;
    EventListener *oninvalid = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_oninvalid", &py_oninvalid))
        return -1;
    if (py_oninvalid)
        oninvalid = coreEventListener(py_oninvalid);
    coreElement((PyDOMObject*)(self))->setOninvalid((EventListener *) oninvalid);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onkeydown(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onkeydown();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onkeydown(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onkeydown;
    EventListener *onkeydown = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onkeydown", &py_onkeydown))
        return -1;
    if (py_onkeydown)
        onkeydown = coreEventListener(py_onkeydown);
    coreElement((PyDOMObject*)(self))->setOnkeydown((EventListener *) onkeydown);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onkeypress(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onkeypress();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onkeypress(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onkeypress;
    EventListener *onkeypress = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onkeypress", &py_onkeypress))
        return -1;
    if (py_onkeypress)
        onkeypress = coreEventListener(py_onkeypress);
    coreElement((PyDOMObject*)(self))->setOnkeypress((EventListener *) onkeypress);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onkeyup(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onkeyup();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onkeyup(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onkeyup;
    EventListener *onkeyup = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onkeyup", &py_onkeyup))
        return -1;
    if (py_onkeyup)
        onkeyup = coreEventListener(py_onkeyup);
    coreElement((PyDOMObject*)(self))->setOnkeyup((EventListener *) onkeyup);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onload();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onload(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onload;
    EventListener *onload = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onload", &py_onload))
        return -1;
    if (py_onload)
        onload = coreEventListener(py_onload);
    coreElement((PyDOMObject*)(self))->setOnload((EventListener *) onload);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onmousedown(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onmousedown();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onmousedown(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmousedown;
    EventListener *onmousedown = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onmousedown", &py_onmousedown))
        return -1;
    if (py_onmousedown)
        onmousedown = coreEventListener(py_onmousedown);
    coreElement((PyDOMObject*)(self))->setOnmousedown((EventListener *) onmousedown);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onmousemove(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onmousemove();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onmousemove(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmousemove;
    EventListener *onmousemove = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onmousemove", &py_onmousemove))
        return -1;
    if (py_onmousemove)
        onmousemove = coreEventListener(py_onmousemove);
    coreElement((PyDOMObject*)(self))->setOnmousemove((EventListener *) onmousemove);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onmouseout(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onmouseout();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onmouseout(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmouseout;
    EventListener *onmouseout = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onmouseout", &py_onmouseout))
        return -1;
    if (py_onmouseout)
        onmouseout = coreEventListener(py_onmouseout);
    coreElement((PyDOMObject*)(self))->setOnmouseout((EventListener *) onmouseout);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onmouseover(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onmouseover();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onmouseover(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmouseover;
    EventListener *onmouseover = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onmouseover", &py_onmouseover))
        return -1;
    if (py_onmouseover)
        onmouseover = coreEventListener(py_onmouseover);
    coreElement((PyDOMObject*)(self))->setOnmouseover((EventListener *) onmouseover);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onmouseup(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onmouseup();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onmouseup(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmouseup;
    EventListener *onmouseup = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onmouseup", &py_onmouseup))
        return -1;
    if (py_onmouseup)
        onmouseup = coreEventListener(py_onmouseup);
    coreElement((PyDOMObject*)(self))->setOnmouseup((EventListener *) onmouseup);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onmousewheel(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onmousewheel();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onmousewheel(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmousewheel;
    EventListener *onmousewheel = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onmousewheel", &py_onmousewheel))
        return -1;
    if (py_onmousewheel)
        onmousewheel = coreEventListener(py_onmousewheel);
    coreElement((PyDOMObject*)(self))->setOnmousewheel((EventListener *) onmousewheel);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onscroll(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onscroll();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onscroll(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onscroll;
    EventListener *onscroll = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onscroll", &py_onscroll))
        return -1;
    if (py_onscroll)
        onscroll = coreEventListener(py_onscroll);
    coreElement((PyDOMObject*)(self))->setOnscroll((EventListener *) onscroll);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onselect(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onselect();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onselect(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onselect;
    EventListener *onselect = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onselect", &py_onselect))
        return -1;
    if (py_onselect)
        onselect = coreEventListener(py_onselect);
    coreElement((PyDOMObject*)(self))->setOnselect((EventListener *) onselect);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onsubmit(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onsubmit();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onsubmit(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onsubmit;
    EventListener *onsubmit = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onsubmit", &py_onsubmit))
        return -1;
    if (py_onsubmit)
        onsubmit = coreEventListener(py_onsubmit);
    coreElement((PyDOMObject*)(self))->setOnsubmit((EventListener *) onsubmit);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onbeforecut(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onbeforecut();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onbeforecut(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onbeforecut;
    EventListener *onbeforecut = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onbeforecut", &py_onbeforecut))
        return -1;
    if (py_onbeforecut)
        onbeforecut = coreEventListener(py_onbeforecut);
    coreElement((PyDOMObject*)(self))->setOnbeforecut((EventListener *) onbeforecut);

    return 0;
}

static PyObject *
_wrap_coreelement__get_oncut(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->oncut();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_oncut(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oncut;
    EventListener *oncut = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_oncut", &py_oncut))
        return -1;
    if (py_oncut)
        oncut = coreEventListener(py_oncut);
    coreElement((PyDOMObject*)(self))->setOncut((EventListener *) oncut);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onbeforecopy(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onbeforecopy();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onbeforecopy(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onbeforecopy;
    EventListener *onbeforecopy = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onbeforecopy", &py_onbeforecopy))
        return -1;
    if (py_onbeforecopy)
        onbeforecopy = coreEventListener(py_onbeforecopy);
    coreElement((PyDOMObject*)(self))->setOnbeforecopy((EventListener *) onbeforecopy);

    return 0;
}

static PyObject *
_wrap_coreelement__get_oncopy(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->oncopy();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_oncopy(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oncopy;
    EventListener *oncopy = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_oncopy", &py_oncopy))
        return -1;
    if (py_oncopy)
        oncopy = coreEventListener(py_oncopy);
    coreElement((PyDOMObject*)(self))->setOncopy((EventListener *) oncopy);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onbeforepaste(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onbeforepaste();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onbeforepaste(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onbeforepaste;
    EventListener *onbeforepaste = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onbeforepaste", &py_onbeforepaste))
        return -1;
    if (py_onbeforepaste)
        onbeforepaste = coreEventListener(py_onbeforepaste);
    coreElement((PyDOMObject*)(self))->setOnbeforepaste((EventListener *) onbeforepaste);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onpaste(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onpaste();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onpaste(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onpaste;
    EventListener *onpaste = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onpaste", &py_onpaste))
        return -1;
    if (py_onpaste)
        onpaste = coreEventListener(py_onpaste);
    coreElement((PyDOMObject*)(self))->setOnpaste((EventListener *) onpaste);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onreset(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onreset();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onreset(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onreset;
    EventListener *onreset = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onreset", &py_onreset))
        return -1;
    if (py_onreset)
        onreset = coreEventListener(py_onreset);
    coreElement((PyDOMObject*)(self))->setOnreset((EventListener *) onreset);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onsearch(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onsearch();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onsearch(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onsearch;
    EventListener *onsearch = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onsearch", &py_onsearch))
        return -1;
    if (py_onsearch)
        onsearch = coreEventListener(py_onsearch);
    coreElement((PyDOMObject*)(self))->setOnsearch((EventListener *) onsearch);

    return 0;
}

static PyObject *
_wrap_coreelement__get_onselectstart(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreElement((PyDOMObject*)(self))->onselectstart();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreelement__set_onselectstart(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onselectstart;
    EventListener *onselectstart = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreelement__set_onselectstart", &py_onselectstart))
        return -1;
    if (py_onselectstart)
        onselectstart = coreEventListener(py_onselectstart);
    coreElement((PyDOMObject*)(self))->setOnselectstart((EventListener *) onselectstart);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreelement_getsets[] = {
    { (char*)"tagName", (getter)WebKit::_wrap_coreelement__get_tagName, (setter)0, 0, 0 },
    { (char*)"style", (getter)WebKit::_wrap_coreelement__get_style, (setter)0, 0, 0 },
    { (char*)"offsetLeft", (getter)WebKit::_wrap_coreelement__get_offsetLeft, (setter)0, 0, 0 },
    { (char*)"offsetTop", (getter)WebKit::_wrap_coreelement__get_offsetTop, (setter)0, 0, 0 },
    { (char*)"offsetWidth", (getter)WebKit::_wrap_coreelement__get_offsetWidth, (setter)0, 0, 0 },
    { (char*)"offsetHeight", (getter)WebKit::_wrap_coreelement__get_offsetHeight, (setter)0, 0, 0 },
    { (char*)"offsetParent", (getter)WebKit::_wrap_coreelement__get_offsetParent, (setter)0, 0, 0 },
    { (char*)"clientLeft", (getter)WebKit::_wrap_coreelement__get_clientLeft, (setter)0, 0, 0 },
    { (char*)"clientTop", (getter)WebKit::_wrap_coreelement__get_clientTop, (setter)0, 0, 0 },
    { (char*)"clientWidth", (getter)WebKit::_wrap_coreelement__get_clientWidth, (setter)0, 0, 0 },
    { (char*)"clientHeight", (getter)WebKit::_wrap_coreelement__get_clientHeight, (setter)0, 0, 0 },
    { (char*)"scrollLeft", (getter)WebKit::_wrap_coreelement__get_scrollLeft, (setter)WebKit::_wrap_coreelement__set_scrollLeft, 0, 0 },
    { (char*)"scrollTop", (getter)WebKit::_wrap_coreelement__get_scrollTop, (setter)WebKit::_wrap_coreelement__set_scrollTop, 0, 0 },
    { (char*)"scrollWidth", (getter)WebKit::_wrap_coreelement__get_scrollWidth, (setter)0, 0, 0 },
    { (char*)"scrollHeight", (getter)WebKit::_wrap_coreelement__get_scrollHeight, (setter)0, 0, 0 },
    { (char*)"firstElementChild", (getter)WebKit::_wrap_coreelement__get_firstElementChild, (setter)0, 0, 0 },
    { (char*)"lastElementChild", (getter)WebKit::_wrap_coreelement__get_lastElementChild, (setter)0, 0, 0 },
    { (char*)"previousElementSibling", (getter)WebKit::_wrap_coreelement__get_previousElementSibling, (setter)0, 0, 0 },
    { (char*)"nextElementSibling", (getter)WebKit::_wrap_coreelement__get_nextElementSibling, (setter)0, 0, 0 },
    { (char*)"childElementCount", (getter)WebKit::_wrap_coreelement__get_childElementCount, (setter)0, 0, 0 },
    { (char*)"onabort", (getter)WebKit::_wrap_coreelement__get_onabort, (setter)WebKit::_wrap_coreelement__set_onabort, 0, 0 },
    { (char*)"onblur", (getter)WebKit::_wrap_coreelement__get_onblur, (setter)WebKit::_wrap_coreelement__set_onblur, 0, 0 },
    { (char*)"onchange", (getter)WebKit::_wrap_coreelement__get_onchange, (setter)WebKit::_wrap_coreelement__set_onchange, 0, 0 },
    { (char*)"onclick", (getter)WebKit::_wrap_coreelement__get_onclick, (setter)WebKit::_wrap_coreelement__set_onclick, 0, 0 },
    { (char*)"oncontextmenu", (getter)WebKit::_wrap_coreelement__get_oncontextmenu, (setter)WebKit::_wrap_coreelement__set_oncontextmenu, 0, 0 },
    { (char*)"ondblclick", (getter)WebKit::_wrap_coreelement__get_ondblclick, (setter)WebKit::_wrap_coreelement__set_ondblclick, 0, 0 },
    { (char*)"ondrag", (getter)WebKit::_wrap_coreelement__get_ondrag, (setter)WebKit::_wrap_coreelement__set_ondrag, 0, 0 },
    { (char*)"ondragend", (getter)WebKit::_wrap_coreelement__get_ondragend, (setter)WebKit::_wrap_coreelement__set_ondragend, 0, 0 },
    { (char*)"ondragenter", (getter)WebKit::_wrap_coreelement__get_ondragenter, (setter)WebKit::_wrap_coreelement__set_ondragenter, 0, 0 },
    { (char*)"ondragleave", (getter)WebKit::_wrap_coreelement__get_ondragleave, (setter)WebKit::_wrap_coreelement__set_ondragleave, 0, 0 },
    { (char*)"ondragover", (getter)WebKit::_wrap_coreelement__get_ondragover, (setter)WebKit::_wrap_coreelement__set_ondragover, 0, 0 },
    { (char*)"ondragstart", (getter)WebKit::_wrap_coreelement__get_ondragstart, (setter)WebKit::_wrap_coreelement__set_ondragstart, 0, 0 },
    { (char*)"ondrop", (getter)WebKit::_wrap_coreelement__get_ondrop, (setter)WebKit::_wrap_coreelement__set_ondrop, 0, 0 },
    { (char*)"onerror", (getter)WebKit::_wrap_coreelement__get_onerror, (setter)WebKit::_wrap_coreelement__set_onerror, 0, 0 },
    { (char*)"onfocus", (getter)WebKit::_wrap_coreelement__get_onfocus, (setter)WebKit::_wrap_coreelement__set_onfocus, 0, 0 },
    { (char*)"oninput", (getter)WebKit::_wrap_coreelement__get_oninput, (setter)WebKit::_wrap_coreelement__set_oninput, 0, 0 },
    { (char*)"oninvalid", (getter)WebKit::_wrap_coreelement__get_oninvalid, (setter)WebKit::_wrap_coreelement__set_oninvalid, 0, 0 },
    { (char*)"onkeydown", (getter)WebKit::_wrap_coreelement__get_onkeydown, (setter)WebKit::_wrap_coreelement__set_onkeydown, 0, 0 },
    { (char*)"onkeypress", (getter)WebKit::_wrap_coreelement__get_onkeypress, (setter)WebKit::_wrap_coreelement__set_onkeypress, 0, 0 },
    { (char*)"onkeyup", (getter)WebKit::_wrap_coreelement__get_onkeyup, (setter)WebKit::_wrap_coreelement__set_onkeyup, 0, 0 },
    { (char*)"onload", (getter)WebKit::_wrap_coreelement__get_onload, (setter)WebKit::_wrap_coreelement__set_onload, 0, 0 },
    { (char*)"onmousedown", (getter)WebKit::_wrap_coreelement__get_onmousedown, (setter)WebKit::_wrap_coreelement__set_onmousedown, 0, 0 },
    { (char*)"onmousemove", (getter)WebKit::_wrap_coreelement__get_onmousemove, (setter)WebKit::_wrap_coreelement__set_onmousemove, 0, 0 },
    { (char*)"onmouseout", (getter)WebKit::_wrap_coreelement__get_onmouseout, (setter)WebKit::_wrap_coreelement__set_onmouseout, 0, 0 },
    { (char*)"onmouseover", (getter)WebKit::_wrap_coreelement__get_onmouseover, (setter)WebKit::_wrap_coreelement__set_onmouseover, 0, 0 },
    { (char*)"onmouseup", (getter)WebKit::_wrap_coreelement__get_onmouseup, (setter)WebKit::_wrap_coreelement__set_onmouseup, 0, 0 },
    { (char*)"onmousewheel", (getter)WebKit::_wrap_coreelement__get_onmousewheel, (setter)WebKit::_wrap_coreelement__set_onmousewheel, 0, 0 },
    { (char*)"onscroll", (getter)WebKit::_wrap_coreelement__get_onscroll, (setter)WebKit::_wrap_coreelement__set_onscroll, 0, 0 },
    { (char*)"onselect", (getter)WebKit::_wrap_coreelement__get_onselect, (setter)WebKit::_wrap_coreelement__set_onselect, 0, 0 },
    { (char*)"onsubmit", (getter)WebKit::_wrap_coreelement__get_onsubmit, (setter)WebKit::_wrap_coreelement__set_onsubmit, 0, 0 },
    { (char*)"onbeforecut", (getter)WebKit::_wrap_coreelement__get_onbeforecut, (setter)WebKit::_wrap_coreelement__set_onbeforecut, 0, 0 },
    { (char*)"oncut", (getter)WebKit::_wrap_coreelement__get_oncut, (setter)WebKit::_wrap_coreelement__set_oncut, 0, 0 },
    { (char*)"onbeforecopy", (getter)WebKit::_wrap_coreelement__get_onbeforecopy, (setter)WebKit::_wrap_coreelement__set_onbeforecopy, 0, 0 },
    { (char*)"oncopy", (getter)WebKit::_wrap_coreelement__get_oncopy, (setter)WebKit::_wrap_coreelement__set_oncopy, 0, 0 },
    { (char*)"onbeforepaste", (getter)WebKit::_wrap_coreelement__get_onbeforepaste, (setter)WebKit::_wrap_coreelement__set_onbeforepaste, 0, 0 },
    { (char*)"onpaste", (getter)WebKit::_wrap_coreelement__get_onpaste, (setter)WebKit::_wrap_coreelement__set_onpaste, 0, 0 },
    { (char*)"onreset", (getter)WebKit::_wrap_coreelement__get_onreset, (setter)WebKit::_wrap_coreelement__set_onreset, 0, 0 },
    { (char*)"onsearch", (getter)WebKit::_wrap_coreelement__get_onsearch, (setter)WebKit::_wrap_coreelement__set_onsearch, 0, 0 },
    { (char*)"onselectstart", (getter)WebKit::_wrap_coreelement__get_onselectstart, (setter)WebKit::_wrap_coreelement__set_onselectstart, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Element(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Element* cobj = coreElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Element",                   /* tp_name */
    sizeof(PyDOMElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Element,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Element_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Entity ----------- */

namespace WebKit {
using namespace WebCore;

static int
Entity_init(Entity *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMNode_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coreentity__get_publicId(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreEntity((PyDOMObject*)(self))->publicId();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreentity__get_systemId(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreEntity((PyDOMObject*)(self))->systemId();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreentity__get_notationName(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreEntity((PyDOMObject*)(self))->notationName();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreentity_getsets[] = {
    { (char*)"publicId", (getter)WebKit::_wrap_coreentity__get_publicId, (setter)0, 0, 0 },
    { (char*)"systemId", (getter)WebKit::_wrap_coreentity__get_systemId, (setter)0, 0, 0 },
    { (char*)"notationName", (getter)WebKit::_wrap_coreentity__get_notationName, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Entity(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Entity* cobj = coreEntity(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMEntity_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Entity",                   /* tp_name */
    sizeof(PyDOMEntity),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Entity,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreentity_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Entity_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- EntityReference ----------- */

namespace WebKit {
using namespace WebCore;

static int
EntityReference_init(EntityReference *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMNode_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
void dealloc_EntityReference(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::EntityReference* cobj = coreEntityReference(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMEntityReference_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.EntityReference",                   /* tp_name */
    sizeof(PyDOMEntityReference),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_EntityReference,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::EntityReference_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- ErrorEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
ErrorEvent_init(ErrorEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_ErrorEvent_initErrorEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"typeArg", (char*)"canBubbleArg", (char*)"cancelableArg", (char*)"messageArg", (char*)"filenameArg", (char*)"linenoArg", NULL };
    char *typeArg, *messageArg, *filenameArg;
    int canBubbleArg, cancelableArg;
    unsigned long linenoArg;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siissk:pywebkit.ErrorEvent.initErrorEvent", kwlist, &typeArg, &canBubbleArg, &cancelableArg, &messageArg, &filenameArg, &linenoArg))
        return NULL;
    WTF::String cvt_typeArg = WTF::String::fromUTF8((const char*)typeArg);
    bool cvt_canBubbleArg = (bool)canBubbleArg;
    bool cvt_cancelableArg = (bool)cancelableArg;
    WTF::String cvt_messageArg = WTF::String::fromUTF8((const char*)messageArg);
    WTF::String cvt_filenameArg = WTF::String::fromUTF8((const char*)filenameArg);
    
    coreErrorEvent(self)->initErrorEvent(cvt_typeArg, cvt_canBubbleArg, cvt_cancelableArg, cvt_messageArg, cvt_filenameArg, linenoArg);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMErrorEvent_methods[] = {
    { "initErrorEvent", (PyCFunction)WebKit::_wrap_ErrorEvent_initErrorEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coreerrorevent__get_message(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreErrorEvent((PyDOMObject*)(self))->message();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreerrorevent__get_filename(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreErrorEvent((PyDOMObject*)(self))->filename();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreerrorevent__get_lineno(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreErrorEvent((PyDOMObject*)(self))->lineno();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreerrorevent_getsets[] = {
    { (char*)"message", (getter)WebKit::_wrap_coreerrorevent__get_message, (setter)0, 0, 0 },
    { (char*)"filename", (getter)WebKit::_wrap_coreerrorevent__get_filename, (setter)0, 0, 0 },
    { (char*)"lineno", (getter)WebKit::_wrap_coreerrorevent__get_lineno, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_ErrorEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::ErrorEvent* cobj = coreErrorEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMErrorEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.ErrorEvent",                   /* tp_name */
    sizeof(PyDOMErrorEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_ErrorEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMErrorEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreerrorevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::ErrorEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- EventException ----------- */

namespace WebKit {
using namespace WebCore;

static int
EventException_init(EventException *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coreeventexception__get_code(PyObject *self, void *closure)
{
    int ret;

    ret = coreEventException((PyDOMObject*)(self))->code();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_coreeventexception__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreEventException((PyDOMObject*)(self))->name();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreeventexception__get_message(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreEventException((PyDOMObject*)(self))->message();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreeventexception_getsets[] = {
    { (char*)"code", (getter)WebKit::_wrap_coreeventexception__get_code, (setter)0, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_coreeventexception__get_name, (setter)0, 0, 0 },
    { (char*)"message", (getter)WebKit::_wrap_coreeventexception__get_message, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_EventException(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::EventException* cobj = coreEventException(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMEventException_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.EventException",                   /* tp_name */
    sizeof(PyDOMEventException),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_EventException,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreeventexception_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::EventException_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- EventListener ----------- */

namespace WebKit {
using namespace WebCore;

static int
EventListener_init(EventListener *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
void dealloc_EventListener(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::EventListener* cobj = coreEventListener(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMEventListener_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.EventListener",                   /* tp_name */
    sizeof(PyDOMEventListener),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_EventListener,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::EventListener_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- EventTarget ----------- */

namespace WebKit {
using namespace WebCore;

static int
EventTarget_init(EventTarget *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_EventTarget_addEventListener(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"listener", (char*)"useCapture", NULL };
    char *type;
    PyDOMObject *py_listener;
    int useCapture;
    EventListener *listener = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sOi:pywebkit.EventTarget.addEventListener", kwlist, &type, &py_listener, &useCapture))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    if (py_listener)
        listener = coreEventListener(py_listener);
    bool cvt_useCapture = (bool)useCapture;
    
    coreEventTarget(self)->addEventListener(cvt_type, (EventListener *) listener, cvt_useCapture);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_EventTarget_removeEventListener(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"listener", (char*)"useCapture", NULL };
    char *type;
    PyDOMObject *py_listener;
    int useCapture;
    EventListener *listener = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sOi:pywebkit.EventTarget.removeEventListener", kwlist, &type, &py_listener, &useCapture))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    if (py_listener)
        listener = coreEventListener(py_listener);
    bool cvt_useCapture = (bool)useCapture;
    
    coreEventTarget(self)->removeEventListener(cvt_type, (EventListener *) listener, cvt_useCapture);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_EventTarget_dispatchEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"event", NULL };
    PyDOMObject *event;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.EventTarget.dispatchEvent", kwlist, PtrPyDOMEvent_Type, &event))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreEventTarget(self)->dispatchEvent(coreEvent(event), ec);
    
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMEventTarget_methods[] = {
    { "addEventListener", (PyCFunction)WebKit::_wrap_EventTarget_addEventListener, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeEventListener", (PyCFunction)WebKit::_wrap_EventTarget_removeEventListener, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "dispatchEvent", (PyCFunction)WebKit::_wrap_EventTarget_dispatchEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
void dealloc_EventTarget(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::EventTarget* cobj = coreEventTarget(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMEventTarget_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.EventTarget",                   /* tp_name */
    sizeof(PyDOMEventTarget),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_EventTarget,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMEventTarget_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::EventTarget_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HashChangeEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
HashChangeEvent_init(HashChangeEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HashChangeEvent_initHashChangeEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"canBubble", (char*)"cancelable", (char*)"oldURL", (char*)"newURL", NULL };
    char *type, *oldURL, *newURL;
    int canBubble, cancelable;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siiss:pywebkit.HashChangeEvent.initHashChangeEvent", kwlist, &type, &canBubble, &cancelable, &oldURL, &newURL))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    bool cvt_canBubble = (bool)canBubble;
    bool cvt_cancelable = (bool)cancelable;
    WTF::String cvt_oldURL = WTF::String::fromUTF8((const char*)oldURL);
    WTF::String cvt_newURL = WTF::String::fromUTF8((const char*)newURL);
    
    coreHashChangeEvent(self)->initHashChangeEvent(cvt_type, cvt_canBubble, cvt_cancelable, cvt_oldURL, cvt_newURL);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHashChangeEvent_methods[] = {
    { "initHashChangeEvent", (PyCFunction)WebKit::_wrap_HashChangeEvent_initHashChangeEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehashchangeevent__get_oldURL(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHashChangeEvent((PyDOMObject*)(self))->oldURL();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehashchangeevent__get_newURL(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHashChangeEvent((PyDOMObject*)(self))->newURL();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehashchangeevent_getsets[] = {
    { (char*)"oldURL", (getter)WebKit::_wrap_corehashchangeevent__get_oldURL, (setter)0, 0, 0 },
    { (char*)"newURL", (getter)WebKit::_wrap_corehashchangeevent__get_newURL, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HashChangeEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HashChangeEvent* cobj = coreHashChangeEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHashChangeEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HashChangeEvent",                   /* tp_name */
    sizeof(PyDOMHashChangeEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HashChangeEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHashChangeEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehashchangeevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HashChangeEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- KeyboardEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
KeyboardEvent_init(KeyboardEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMUIEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_KeyboardEvent_getModifierState(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"keyIdentifierArg", NULL };
    char *keyIdentifierArg;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.KeyboardEvent.getModifierState", kwlist, &keyIdentifierArg))
        return NULL;
    WTF::String cvt_keyIdentifierArg = WTF::String::fromUTF8((const char*)keyIdentifierArg);
    
    ret = coreKeyboardEvent(self)->getModifierState(cvt_keyIdentifierArg);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_KeyboardEvent_initKeyboardEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"canBubble", (char*)"cancelable", (char*)"view", (char*)"keyIdentifier", (char*)"keyLocation", (char*)"ctrlKey", (char*)"altKey", (char*)"shiftKey", (char*)"metaKey", (char*)"altGraphKey", NULL };
    char *type, *keyIdentifier;
    int canBubble, cancelable, ctrlKey, altKey, shiftKey, metaKey, altGraphKey;
    unsigned long keyLocation;
    PyDOMObject *view;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siiO!skiiiii:pywebkit.KeyboardEvent.initKeyboardEvent", kwlist, &type, &canBubble, &cancelable, PtrPyDOMDOMWindow_Type, &view, &keyIdentifier, &keyLocation, &ctrlKey, &altKey, &shiftKey, &metaKey, &altGraphKey))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    bool cvt_canBubble = (bool)canBubble;
    bool cvt_cancelable = (bool)cancelable;
    WTF::String cvt_keyIdentifier = WTF::String::fromUTF8((const char*)keyIdentifier);
    bool cvt_ctrlKey = (bool)ctrlKey;
    bool cvt_altKey = (bool)altKey;
    bool cvt_shiftKey = (bool)shiftKey;
    bool cvt_metaKey = (bool)metaKey;
    bool cvt_altGraphKey = (bool)altGraphKey;
    
    coreKeyboardEvent(self)->initKeyboardEvent(cvt_type, cvt_canBubble, cvt_cancelable, coreDOMWindow(view), cvt_keyIdentifier, keyLocation, cvt_ctrlKey, cvt_altKey, cvt_shiftKey, cvt_metaKey, cvt_altGraphKey);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMKeyboardEvent_methods[] = {
    { "getModifierState", (PyCFunction)WebKit::_wrap_KeyboardEvent_getModifierState, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "initKeyboardEvent", (PyCFunction)WebKit::_wrap_KeyboardEvent_initKeyboardEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corekeyboardevent__get_keyIdentifier(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreKeyboardEvent((PyDOMObject*)(self))->keyIdentifier();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corekeyboardevent__get_keyLocation(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreKeyboardEvent((PyDOMObject*)(self))->keyLocation();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_corekeyboardevent__get_ctrlKey(PyObject *self, void *closure)
{
    bool ret;

    ret = coreKeyboardEvent((PyDOMObject*)(self))->ctrlKey();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corekeyboardevent__get_shiftKey(PyObject *self, void *closure)
{
    bool ret;

    ret = coreKeyboardEvent((PyDOMObject*)(self))->shiftKey();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corekeyboardevent__get_altKey(PyObject *self, void *closure)
{
    bool ret;

    ret = coreKeyboardEvent((PyDOMObject*)(self))->altKey();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corekeyboardevent__get_metaKey(PyObject *self, void *closure)
{
    bool ret;

    ret = coreKeyboardEvent((PyDOMObject*)(self))->metaKey();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corekeyboardevent__get_altGraphKey(PyObject *self, void *closure)
{
    bool ret;

    ret = coreKeyboardEvent((PyDOMObject*)(self))->altGraphKey();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corekeyboardevent__get_keyCode(PyObject *self, void *closure)
{
    long ret;

    ret = coreKeyboardEvent((PyDOMObject*)(self))->keyCode();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corekeyboardevent__get_charCode(PyObject *self, void *closure)
{
    long ret;

    ret = coreKeyboardEvent((PyDOMObject*)(self))->charCode();
    return PyInt_FromLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corekeyboardevent_getsets[] = {
    { (char*)"keyIdentifier", (getter)WebKit::_wrap_corekeyboardevent__get_keyIdentifier, (setter)0, 0, 0 },
    { (char*)"keyLocation", (getter)WebKit::_wrap_corekeyboardevent__get_keyLocation, (setter)0, 0, 0 },
    { (char*)"ctrlKey", (getter)WebKit::_wrap_corekeyboardevent__get_ctrlKey, (setter)0, 0, 0 },
    { (char*)"shiftKey", (getter)WebKit::_wrap_corekeyboardevent__get_shiftKey, (setter)0, 0, 0 },
    { (char*)"altKey", (getter)WebKit::_wrap_corekeyboardevent__get_altKey, (setter)0, 0, 0 },
    { (char*)"metaKey", (getter)WebKit::_wrap_corekeyboardevent__get_metaKey, (setter)0, 0, 0 },
    { (char*)"altGraphKey", (getter)WebKit::_wrap_corekeyboardevent__get_altGraphKey, (setter)0, 0, 0 },
    { (char*)"keyCode", (getter)WebKit::_wrap_corekeyboardevent__get_keyCode, (setter)0, 0, 0 },
    { (char*)"charCode", (getter)WebKit::_wrap_corekeyboardevent__get_charCode, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_KeyboardEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::KeyboardEvent* cobj = coreKeyboardEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMKeyboardEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.KeyboardEvent",                   /* tp_name */
    sizeof(PyDOMKeyboardEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_KeyboardEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMKeyboardEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corekeyboardevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::KeyboardEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- MessageChannel ----------- */

namespace WebKit {
using namespace WebCore;

static int
MessageChannel_init(MessageChannel *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coremessagechannel__get_port1(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::MessagePort* _ret;

    _ret = coreMessageChannel((PyDOMObject*)(self))->port1();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coremessagechannel__get_port2(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::MessagePort* _ret;

    _ret = coreMessageChannel((PyDOMObject*)(self))->port2();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coremessagechannel_getsets[] = {
    { (char*)"port1", (getter)WebKit::_wrap_coremessagechannel__get_port1, (setter)0, 0, 0 },
    { (char*)"port2", (getter)WebKit::_wrap_coremessagechannel__get_port2, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_MessageChannel(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::MessageChannel* cobj = coreMessageChannel(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMMessageChannel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.MessageChannel",                   /* tp_name */
    sizeof(PyDOMMessageChannel),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_MessageChannel,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coremessagechannel_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::MessageChannel_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- MessageEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
MessageEvent_init(MessageEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coremessageevent__get_origin(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreMessageEvent((PyDOMObject*)(self))->origin();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coremessageevent__get_lastEventId(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreMessageEvent((PyDOMObject*)(self))->lastEventId();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coremessageevent__get_source(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::DOMWindow* _ret;

    _ret = coreMessageEvent((PyDOMObject*)(self))->source();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coremessageevent__get_messagePort(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::MessagePort* _ret;

    _ret = coreMessageEvent((PyDOMObject*)(self))->messagePort();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coremessageevent_getsets[] = {
    { (char*)"origin", (getter)WebKit::_wrap_coremessageevent__get_origin, (setter)0, 0, 0 },
    { (char*)"lastEventId", (getter)WebKit::_wrap_coremessageevent__get_lastEventId, (setter)0, 0, 0 },
    { (char*)"source", (getter)WebKit::_wrap_coremessageevent__get_source, (setter)0, 0, 0 },
    { (char*)"messagePort", (getter)WebKit::_wrap_coremessageevent__get_messagePort, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_MessageEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::MessageEvent* cobj = coreMessageEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMMessageEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.MessageEvent",                   /* tp_name */
    sizeof(PyDOMMessageEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_MessageEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coremessageevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::MessageEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- MessagePort ----------- */

namespace WebKit {
using namespace WebCore;

static int
MessagePort_init(MessagePort *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
void dealloc_MessagePort(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::MessagePort* cobj = coreMessagePort(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMMessagePort_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.MessagePort",                   /* tp_name */
    sizeof(PyDOMMessagePort),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_MessagePort,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::MessagePort_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- MouseEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
MouseEvent_init(MouseEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMUIEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_MouseEvent_initMouseEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"canBubble", (char*)"cancelable", (char*)"view", (char*)"detail", (char*)"screenX", (char*)"screenY", (char*)"clientX", (char*)"clientY", (char*)"ctrlKey", (char*)"altKey", (char*)"shiftKey", (char*)"metaKey", (char*)"button", (char*)"relatedTarget", NULL };
    char *type;
    int canBubble, cancelable, ctrlKey, altKey, shiftKey, metaKey, button;
    long detail, screenX, screenY, clientX, clientY;
    PyDOMObject *view, *relatedTarget;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siiO!llllliiiiiO!:pywebkit.MouseEvent.initMouseEvent", kwlist, &type, &canBubble, &cancelable, PtrPyDOMDOMWindow_Type, &view, &detail, &screenX, &screenY, &clientX, &clientY, &ctrlKey, &altKey, &shiftKey, &metaKey, &button, PtrPyDOMEventTarget_Type, &relatedTarget))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    bool cvt_canBubble = (bool)canBubble;
    bool cvt_cancelable = (bool)cancelable;
    bool cvt_ctrlKey = (bool)ctrlKey;
    bool cvt_altKey = (bool)altKey;
    bool cvt_shiftKey = (bool)shiftKey;
    bool cvt_metaKey = (bool)metaKey;
    
    coreMouseEvent(self)->initMouseEvent(cvt_type, cvt_canBubble, cvt_cancelable, coreDOMWindow(view), detail, screenX, screenY, clientX, clientY, cvt_ctrlKey, cvt_altKey, cvt_shiftKey, cvt_metaKey, button, coreEventTarget(relatedTarget));
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMMouseEvent_methods[] = {
    { "initMouseEvent", (PyCFunction)WebKit::_wrap_MouseEvent_initMouseEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coremouseevent__get_screenX(PyObject *self, void *closure)
{
    long ret;

    ret = coreMouseEvent((PyDOMObject*)(self))->screenX();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coremouseevent__get_screenY(PyObject *self, void *closure)
{
    long ret;

    ret = coreMouseEvent((PyDOMObject*)(self))->screenY();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coremouseevent__get_clientX(PyObject *self, void *closure)
{
    long ret;

    ret = coreMouseEvent((PyDOMObject*)(self))->clientX();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coremouseevent__get_clientY(PyObject *self, void *closure)
{
    long ret;

    ret = coreMouseEvent((PyDOMObject*)(self))->clientY();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coremouseevent__get_ctrlKey(PyObject *self, void *closure)
{
    bool ret;

    ret = coreMouseEvent((PyDOMObject*)(self))->ctrlKey();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coremouseevent__get_shiftKey(PyObject *self, void *closure)
{
    bool ret;

    ret = coreMouseEvent((PyDOMObject*)(self))->shiftKey();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coremouseevent__get_altKey(PyObject *self, void *closure)
{
    bool ret;

    ret = coreMouseEvent((PyDOMObject*)(self))->altKey();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coremouseevent__get_metaKey(PyObject *self, void *closure)
{
    bool ret;

    ret = coreMouseEvent((PyDOMObject*)(self))->metaKey();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coremouseevent__get_button(PyObject *self, void *closure)
{
    int ret;

    ret = coreMouseEvent((PyDOMObject*)(self))->button();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_coremouseevent__get_relatedTarget(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventTarget* _ret;

    _ret = coreMouseEvent((PyDOMObject*)(self))->relatedTarget();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coremouseevent__get_offsetX(PyObject *self, void *closure)
{
    long ret;

    ret = coreMouseEvent((PyDOMObject*)(self))->offsetX();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coremouseevent__get_offsetY(PyObject *self, void *closure)
{
    long ret;

    ret = coreMouseEvent((PyDOMObject*)(self))->offsetY();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coremouseevent__get_x(PyObject *self, void *closure)
{
    long ret;

    ret = coreMouseEvent((PyDOMObject*)(self))->x();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coremouseevent__get_y(PyObject *self, void *closure)
{
    long ret;

    ret = coreMouseEvent((PyDOMObject*)(self))->y();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coremouseevent__get_fromElement(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreMouseEvent((PyDOMObject*)(self))->fromElement();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coremouseevent__get_toElement(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreMouseEvent((PyDOMObject*)(self))->toElement();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coremouseevent_getsets[] = {
    { (char*)"screenX", (getter)WebKit::_wrap_coremouseevent__get_screenX, (setter)0, 0, 0 },
    { (char*)"screenY", (getter)WebKit::_wrap_coremouseevent__get_screenY, (setter)0, 0, 0 },
    { (char*)"clientX", (getter)WebKit::_wrap_coremouseevent__get_clientX, (setter)0, 0, 0 },
    { (char*)"clientY", (getter)WebKit::_wrap_coremouseevent__get_clientY, (setter)0, 0, 0 },
    { (char*)"ctrlKey", (getter)WebKit::_wrap_coremouseevent__get_ctrlKey, (setter)0, 0, 0 },
    { (char*)"shiftKey", (getter)WebKit::_wrap_coremouseevent__get_shiftKey, (setter)0, 0, 0 },
    { (char*)"altKey", (getter)WebKit::_wrap_coremouseevent__get_altKey, (setter)0, 0, 0 },
    { (char*)"metaKey", (getter)WebKit::_wrap_coremouseevent__get_metaKey, (setter)0, 0, 0 },
    { (char*)"button", (getter)WebKit::_wrap_coremouseevent__get_button, (setter)0, 0, 0 },
    { (char*)"relatedTarget", (getter)WebKit::_wrap_coremouseevent__get_relatedTarget, (setter)0, 0, 0 },
    { (char*)"offsetX", (getter)WebKit::_wrap_coremouseevent__get_offsetX, (setter)0, 0, 0 },
    { (char*)"offsetY", (getter)WebKit::_wrap_coremouseevent__get_offsetY, (setter)0, 0, 0 },
    { (char*)"x", (getter)WebKit::_wrap_coremouseevent__get_x, (setter)0, 0, 0 },
    { (char*)"y", (getter)WebKit::_wrap_coremouseevent__get_y, (setter)0, 0, 0 },
    { (char*)"fromElement", (getter)WebKit::_wrap_coremouseevent__get_fromElement, (setter)0, 0, 0 },
    { (char*)"toElement", (getter)WebKit::_wrap_coremouseevent__get_toElement, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_MouseEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::MouseEvent* cobj = coreMouseEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMMouseEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.MouseEvent",                   /* tp_name */
    sizeof(PyDOMMouseEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_MouseEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMMouseEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coremouseevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::MouseEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- MutationEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
MutationEvent_init(MutationEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_MutationEvent_initMutationEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"canBubble", (char*)"cancelable", (char*)"relatedNode", (char*)"prevValue", (char*)"newValue", (char*)"attrName", (char*)"attrChange", NULL };
    char *type, *prevValue, *newValue, *attrName;
    int canBubble, cancelable, attrChange;
    PyDOMObject *relatedNode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siiO!sssi:pywebkit.MutationEvent.initMutationEvent", kwlist, &type, &canBubble, &cancelable, PtrPyDOMNode_Type, &relatedNode, &prevValue, &newValue, &attrName, &attrChange))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    bool cvt_canBubble = (bool)canBubble;
    bool cvt_cancelable = (bool)cancelable;
    WTF::String cvt_prevValue = WTF::String::fromUTF8((const char*)prevValue);
    WTF::String cvt_newValue = WTF::String::fromUTF8((const char*)newValue);
    WTF::String cvt_attrName = WTF::String::fromUTF8((const char*)attrName);
    
    coreMutationEvent(self)->initMutationEvent(cvt_type, cvt_canBubble, cvt_cancelable, coreNode(relatedNode), cvt_prevValue, cvt_newValue, cvt_attrName, attrChange);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMMutationEvent_methods[] = {
    { "initMutationEvent", (PyCFunction)WebKit::_wrap_MutationEvent_initMutationEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coremutationevent__get_relatedNode(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreMutationEvent((PyDOMObject*)(self))->relatedNode();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coremutationevent__get_prevValue(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreMutationEvent((PyDOMObject*)(self))->prevValue();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coremutationevent__get_newValue(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreMutationEvent((PyDOMObject*)(self))->newValue();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coremutationevent__get_attrName(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreMutationEvent((PyDOMObject*)(self))->attrName();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coremutationevent__get_attrChange(PyObject *self, void *closure)
{
    int ret;

    ret = coreMutationEvent((PyDOMObject*)(self))->attrChange();
    return PyInt_FromLong(ret);
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coremutationevent_getsets[] = {
    { (char*)"relatedNode", (getter)WebKit::_wrap_coremutationevent__get_relatedNode, (setter)0, 0, 0 },
    { (char*)"prevValue", (getter)WebKit::_wrap_coremutationevent__get_prevValue, (setter)0, 0, 0 },
    { (char*)"newValue", (getter)WebKit::_wrap_coremutationevent__get_newValue, (setter)0, 0, 0 },
    { (char*)"attrName", (getter)WebKit::_wrap_coremutationevent__get_attrName, (setter)0, 0, 0 },
    { (char*)"attrChange", (getter)WebKit::_wrap_coremutationevent__get_attrChange, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_MutationEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::MutationEvent* cobj = coreMutationEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMMutationEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.MutationEvent",                   /* tp_name */
    sizeof(PyDOMMutationEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_MutationEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMMutationEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coremutationevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::MutationEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- NamedNodeMap ----------- */

namespace WebKit {
using namespace WebCore;

static int
NamedNodeMap_init(NamedNodeMap *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_NamedNodeMap_getNamedItem(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name;
    PyObject *py_ret;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.NamedNodeMap.getNamedItem", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    
    _ret = WTF::getPtr(coreNamedNodeMap(self)->getNamedItem(cvt_name));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_NamedNodeMap_setNamedItem(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"node", NULL };
    PyObject *py_ret;
    PyDOMObject *node;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.NamedNodeMap.setNamedItem", kwlist, PtrPyDOMNode_Type, &node))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreNamedNodeMap(self)->setNamedItem(coreNode(node), ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_NamedNodeMap_removeNamedItem(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name;
    PyObject *py_ret;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.NamedNodeMap.removeNamedItem", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreNamedNodeMap(self)->removeNamedItem(cvt_name, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_NamedNodeMap_item(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    PyObject *py_ret;
    unsigned long index;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.NamedNodeMap.item", kwlist, &index))
        return NULL;
    
    _ret = WTF::getPtr(coreNamedNodeMap(self)->item(index));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_NamedNodeMap_getNamedItemNS(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", (char*)"localName", NULL };
    char *namespaceURI, *localName;
    PyObject *py_ret;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.NamedNodeMap.getNamedItemNS", kwlist, &namespaceURI, &localName))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    WTF::String cvt_localName = WTF::String::fromUTF8((const char*)localName);
    
    _ret = WTF::getPtr(coreNamedNodeMap(self)->getNamedItemNS(cvt_namespaceURI, cvt_localName));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_NamedNodeMap_setNamedItemNS(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"node", NULL };
    PyObject *py_ret;
    PyDOMObject *node;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.NamedNodeMap.setNamedItemNS", kwlist, PtrPyDOMNode_Type, &node))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreNamedNodeMap(self)->setNamedItemNS(coreNode(node), ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_NamedNodeMap_removeNamedItemNS(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"namespaceURI", (char*)"localName", NULL };
    char *namespaceURI, *localName;
    PyObject *py_ret;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.NamedNodeMap.removeNamedItemNS", kwlist, &namespaceURI, &localName))
        return NULL;
    WTF::String cvt_namespaceURI = WTF::String::fromUTF8((const char*)namespaceURI);
    WTF::String cvt_localName = WTF::String::fromUTF8((const char*)localName);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreNamedNodeMap(self)->removeNamedItemNS(cvt_namespaceURI, cvt_localName, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMNamedNodeMap_methods[] = {
    { "getNamedItem", (PyCFunction)WebKit::_wrap_NamedNodeMap_getNamedItem, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setNamedItem", (PyCFunction)WebKit::_wrap_NamedNodeMap_setNamedItem, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeNamedItem", (PyCFunction)WebKit::_wrap_NamedNodeMap_removeNamedItem, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "item", (PyCFunction)WebKit::_wrap_NamedNodeMap_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getNamedItemNS", (PyCFunction)WebKit::_wrap_NamedNodeMap_getNamedItemNS, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setNamedItemNS", (PyCFunction)WebKit::_wrap_NamedNodeMap_setNamedItemNS, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeNamedItemNS", (PyCFunction)WebKit::_wrap_NamedNodeMap_removeNamedItemNS, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corenamednodemap__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreNamedNodeMap((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corenamednodemap_getsets[] = {
    { (char*)"length", (getter)WebKit::_wrap_corenamednodemap__get_length, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_NamedNodeMap(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::NamedNodeMap* cobj = coreNamedNodeMap(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMNamedNodeMap_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.NamedNodeMap",                   /* tp_name */
    sizeof(PyDOMNamedNodeMap),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_NamedNodeMap,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMNamedNodeMap_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corenamednodemap_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::NamedNodeMap_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- NodeFilter ----------- */

namespace WebKit {
using namespace WebCore;

static int
NodeFilter_init(NodeFilter *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_NodeFilter_acceptNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"n", NULL };
    int ret;
    PyDOMObject *n;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.NodeFilter.acceptNode", kwlist, PtrPyDOMNode_Type, &n))
        return NULL;
    
    ret = coreNodeFilter(self)->acceptNode(coreNode(n));
    
    return PyInt_FromLong(ret);
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMNodeFilter_methods[] = {
    { "acceptNode", (PyCFunction)WebKit::_wrap_NodeFilter_acceptNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
void dealloc_NodeFilter(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::NodeFilter* cobj = coreNodeFilter(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMNodeFilter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.NodeFilter",                   /* tp_name */
    sizeof(PyDOMNodeFilter),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_NodeFilter,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMNodeFilter_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::NodeFilter_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- NodeIterator ----------- */

namespace WebKit {
using namespace WebCore;

static int
NodeIterator_init(NodeIterator *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_NodeIterator_nextNode(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreNodeIterator(self)->nextNode(ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_NodeIterator_previousNode(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreNodeIterator(self)->previousNode(ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_NodeIterator_detach(PyDOMObject *self)
{
    
    coreNodeIterator(self)->detach();
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMNodeIterator_methods[] = {
    { "nextNode", (PyCFunction)WebKit::_wrap_NodeIterator_nextNode, METH_NOARGS,
      NULL },
    { "previousNode", (PyCFunction)WebKit::_wrap_NodeIterator_previousNode, METH_NOARGS,
      NULL },
    { "detach", (PyCFunction)WebKit::_wrap_NodeIterator_detach, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corenodeiterator__get_root(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreNodeIterator((PyDOMObject*)(self))->root();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenodeiterator__get_whatToShow(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreNodeIterator((PyDOMObject*)(self))->whatToShow();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_corenodeiterator__get_filter(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::NodeFilter* _ret;

    _ret = coreNodeIterator((PyDOMObject*)(self))->filter();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenodeiterator__get_expandEntityReferences(PyObject *self, void *closure)
{
    bool ret;

    ret = coreNodeIterator((PyDOMObject*)(self))->expandEntityReferences();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corenodeiterator__get_referenceNode(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreNodeIterator((PyDOMObject*)(self))->referenceNode();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenodeiterator__get_pointerBeforeReferenceNode(PyObject *self, void *closure)
{
    bool ret;

    ret = coreNodeIterator((PyDOMObject*)(self))->pointerBeforeReferenceNode();
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corenodeiterator_getsets[] = {
    { (char*)"root", (getter)WebKit::_wrap_corenodeiterator__get_root, (setter)0, 0, 0 },
    { (char*)"whatToShow", (getter)WebKit::_wrap_corenodeiterator__get_whatToShow, (setter)0, 0, 0 },
    { (char*)"filter", (getter)WebKit::_wrap_corenodeiterator__get_filter, (setter)0, 0, 0 },
    { (char*)"expandEntityReferences", (getter)WebKit::_wrap_corenodeiterator__get_expandEntityReferences, (setter)0, 0, 0 },
    { (char*)"referenceNode", (getter)WebKit::_wrap_corenodeiterator__get_referenceNode, (setter)0, 0, 0 },
    { (char*)"pointerBeforeReferenceNode", (getter)WebKit::_wrap_corenodeiterator__get_pointerBeforeReferenceNode, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_NodeIterator(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::NodeIterator* cobj = coreNodeIterator(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMNodeIterator_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.NodeIterator",                   /* tp_name */
    sizeof(PyDOMNodeIterator),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_NodeIterator,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMNodeIterator_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corenodeiterator_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::NodeIterator_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- NodeList ----------- */

namespace WebKit {
using namespace WebCore;

static int
NodeList_init(NodeList *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_NodeList_item(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    PyObject *py_ret;
    unsigned long index;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.NodeList.item", kwlist, &index))
        return NULL;
    
    _ret = coreNodeList(self)->item(index);
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMNodeList_methods[] = {
    { "item", (PyCFunction)WebKit::_wrap_NodeList_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corenodelist__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreNodeList((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corenodelist_getsets[] = {
    { (char*)"length", (getter)WebKit::_wrap_corenodelist__get_length, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_NodeList(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::NodeList* cobj = coreNodeList(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMNodeList_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.NodeList",                   /* tp_name */
    sizeof(PyDOMNodeList),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_NodeList,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMNodeList_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corenodelist_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::NodeList_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Notation ----------- */

namespace WebKit {
using namespace WebCore;

static int
Notation_init(Notation *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMNode_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corenotation__get_publicId(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNotation((PyDOMObject*)(self))->publicId();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenotation__get_systemId(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNotation((PyDOMObject*)(self))->systemId();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corenotation_getsets[] = {
    { (char*)"publicId", (getter)WebKit::_wrap_corenotation__get_publicId, (setter)0, 0, 0 },
    { (char*)"systemId", (getter)WebKit::_wrap_corenotation__get_systemId, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Notation(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Notation* cobj = coreNotation(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMNotation_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Notation",                   /* tp_name */
    sizeof(PyDOMNotation),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Notation,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corenotation_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Notation_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- OverflowEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
OverflowEvent_init(OverflowEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_OverflowEvent_initOverflowEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"orient", (char*)"horizontalOverflow", (char*)"verticalOverflow", NULL };
    int orient, horizontalOverflow, verticalOverflow;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iii:pywebkit.OverflowEvent.initOverflowEvent", kwlist, &orient, &horizontalOverflow, &verticalOverflow))
        return NULL;
    bool cvt_horizontalOverflow = (bool)horizontalOverflow;
    bool cvt_verticalOverflow = (bool)verticalOverflow;
    
    coreOverflowEvent(self)->initOverflowEvent(orient, cvt_horizontalOverflow, cvt_verticalOverflow);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMOverflowEvent_methods[] = {
    { "initOverflowEvent", (PyCFunction)WebKit::_wrap_OverflowEvent_initOverflowEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coreoverflowevent__get_orient(PyObject *self, void *closure)
{
    int ret;

    ret = coreOverflowEvent((PyDOMObject*)(self))->orient();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_coreoverflowevent__get_horizontalOverflow(PyObject *self, void *closure)
{
    bool ret;

    ret = coreOverflowEvent((PyDOMObject*)(self))->horizontalOverflow();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coreoverflowevent__get_verticalOverflow(PyObject *self, void *closure)
{
    bool ret;

    ret = coreOverflowEvent((PyDOMObject*)(self))->verticalOverflow();
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreoverflowevent_getsets[] = {
    { (char*)"orient", (getter)WebKit::_wrap_coreoverflowevent__get_orient, (setter)0, 0, 0 },
    { (char*)"horizontalOverflow", (getter)WebKit::_wrap_coreoverflowevent__get_horizontalOverflow, (setter)0, 0, 0 },
    { (char*)"verticalOverflow", (getter)WebKit::_wrap_coreoverflowevent__get_verticalOverflow, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_OverflowEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::OverflowEvent* cobj = coreOverflowEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMOverflowEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.OverflowEvent",                   /* tp_name */
    sizeof(PyDOMOverflowEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_OverflowEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMOverflowEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreoverflowevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::OverflowEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- PageTransitionEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
PageTransitionEvent_init(PageTransitionEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_PageTransitionEvent_initPageTransitionEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"typeArg", (char*)"canBubbleArg", (char*)"cancelableArg", (char*)"persisted", NULL };
    char *typeArg;
    int canBubbleArg, cancelableArg, persisted;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siii:pywebkit.PageTransitionEvent.initPageTransitionEvent", kwlist, &typeArg, &canBubbleArg, &cancelableArg, &persisted))
        return NULL;
    WTF::String cvt_typeArg = WTF::String::fromUTF8((const char*)typeArg);
    bool cvt_canBubbleArg = (bool)canBubbleArg;
    bool cvt_cancelableArg = (bool)cancelableArg;
    bool cvt_persisted = (bool)persisted;
    
    corePageTransitionEvent(self)->initPageTransitionEvent(cvt_typeArg, cvt_canBubbleArg, cvt_cancelableArg, cvt_persisted);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMPageTransitionEvent_methods[] = {
    { "initPageTransitionEvent", (PyCFunction)WebKit::_wrap_PageTransitionEvent_initPageTransitionEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corepagetransitionevent__get_persisted(PyObject *self, void *closure)
{
    bool ret;

    ret = corePageTransitionEvent((PyDOMObject*)(self))->persisted();
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corepagetransitionevent_getsets[] = {
    { (char*)"persisted", (getter)WebKit::_wrap_corepagetransitionevent__get_persisted, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_PageTransitionEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::PageTransitionEvent* cobj = corePageTransitionEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMPageTransitionEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.PageTransitionEvent",                   /* tp_name */
    sizeof(PyDOMPageTransitionEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_PageTransitionEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMPageTransitionEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corepagetransitionevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::PageTransitionEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- PopStateEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
PopStateEvent_init(PopStateEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corepopstateevent__get_state(PyObject *self, void *closure)
{
    WebCore::SerializedScriptValue* ret;

    ret = corePopStateEvent((PyDOMObject*)(self))->state();
    PyObject *py_ret = PyString_FromString(cpUTF8(ret->toString()));
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corepopstateevent_getsets[] = {
    { (char*)"state", (getter)WebKit::_wrap_corepopstateevent__get_state, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_PopStateEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::PopStateEvent* cobj = corePopStateEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMPopStateEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.PopStateEvent",                   /* tp_name */
    sizeof(PyDOMPopStateEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_PopStateEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corepopstateevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::PopStateEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- ProcessingInstruction ----------- */

namespace WebKit {
using namespace WebCore;

static int
ProcessingInstruction_init(ProcessingInstruction *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMNode_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coreprocessinginstruction__get_target(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreProcessingInstruction((PyDOMObject*)(self))->target();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreprocessinginstruction__get_data(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreProcessingInstruction((PyDOMObject*)(self))->data();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_coreprocessinginstruction__set_data(PyObject *self, PyObject *args, void *closure)
{
    char *data;

    if (!PyArg_Parse(args,"s:_wrap_coreprocessinginstruction__set_data", &data))
        return -1;
    WTF::String cvt_data = WTF::String::fromUTF8((const char*)data);
    WebCore::ExceptionCode ec = 0;
    coreProcessingInstruction((PyDOMObject*)(self))->setData(cvt_data, ec);

    return 0;
}

static PyObject *
_wrap_coreprocessinginstruction__get_sheet(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::StyleSheet* _ret;

    _ret = coreProcessingInstruction((PyDOMObject*)(self))->sheet();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreprocessinginstruction_getsets[] = {
    { (char*)"target", (getter)WebKit::_wrap_coreprocessinginstruction__get_target, (setter)0, 0, 0 },
    { (char*)"data", (getter)WebKit::_wrap_coreprocessinginstruction__get_data, (setter)WebKit::_wrap_coreprocessinginstruction__set_data, 0, 0 },
    { (char*)"sheet", (getter)WebKit::_wrap_coreprocessinginstruction__get_sheet, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_ProcessingInstruction(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::ProcessingInstruction* cobj = coreProcessingInstruction(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMProcessingInstruction_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.ProcessingInstruction",                   /* tp_name */
    sizeof(PyDOMProcessingInstruction),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_ProcessingInstruction,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreprocessinginstruction_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::ProcessingInstruction_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- ProgressEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
ProgressEvent_init(ProgressEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_ProgressEvent_initProgressEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"typeArg", (char*)"canBubbleArg", (char*)"cancelableArg", (char*)"lengthComputableArg", (char*)"loadedArg", (char*)"totalArg", NULL };
    char *typeArg;
    int canBubbleArg, cancelableArg, lengthComputableArg;
    unsigned long loadedArg, totalArg;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siiikk:pywebkit.ProgressEvent.initProgressEvent", kwlist, &typeArg, &canBubbleArg, &cancelableArg, &lengthComputableArg, &loadedArg, &totalArg))
        return NULL;
    WTF::String cvt_typeArg = WTF::String::fromUTF8((const char*)typeArg);
    bool cvt_canBubbleArg = (bool)canBubbleArg;
    bool cvt_cancelableArg = (bool)cancelableArg;
    bool cvt_lengthComputableArg = (bool)lengthComputableArg;
    
    coreProgressEvent(self)->initProgressEvent(cvt_typeArg, cvt_canBubbleArg, cvt_cancelableArg, cvt_lengthComputableArg, loadedArg, totalArg);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMProgressEvent_methods[] = {
    { "initProgressEvent", (PyCFunction)WebKit::_wrap_ProgressEvent_initProgressEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coreprogressevent__get_lengthComputable(PyObject *self, void *closure)
{
    bool ret;

    ret = coreProgressEvent((PyDOMObject*)(self))->lengthComputable();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coreprogressevent__get_loaded(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreProgressEvent((PyDOMObject*)(self))->loaded();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_coreprogressevent__get_total(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreProgressEvent((PyDOMObject*)(self))->total();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreprogressevent_getsets[] = {
    { (char*)"lengthComputable", (getter)WebKit::_wrap_coreprogressevent__get_lengthComputable, (setter)0, 0, 0 },
    { (char*)"loaded", (getter)WebKit::_wrap_coreprogressevent__get_loaded, (setter)0, 0, 0 },
    { (char*)"total", (getter)WebKit::_wrap_coreprogressevent__get_total, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_ProgressEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::ProgressEvent* cobj = coreProgressEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMProgressEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.ProgressEvent",                   /* tp_name */
    sizeof(PyDOMProgressEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_ProgressEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMProgressEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreprogressevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::ProgressEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- RangeException ----------- */

namespace WebKit {
using namespace WebCore;

static int
RangeException_init(RangeException *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corerangeexception__get_code(PyObject *self, void *closure)
{
    int ret;

    ret = coreRangeException((PyDOMObject*)(self))->code();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_corerangeexception__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreRangeException((PyDOMObject*)(self))->name();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corerangeexception__get_message(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreRangeException((PyDOMObject*)(self))->message();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corerangeexception_getsets[] = {
    { (char*)"code", (getter)WebKit::_wrap_corerangeexception__get_code, (setter)0, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corerangeexception__get_name, (setter)0, 0, 0 },
    { (char*)"message", (getter)WebKit::_wrap_corerangeexception__get_message, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_RangeException(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::RangeException* cobj = coreRangeException(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMRangeException_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.RangeException",                   /* tp_name */
    sizeof(PyDOMRangeException),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_RangeException,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corerangeexception_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::RangeException_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Range ----------- */

namespace WebKit {
using namespace WebCore;

static int
Range_init(Range *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_Range_setStart(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"refNode", (char*)"offset", NULL };
    PyDOMObject *refNode;
    long offset;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!l:pywebkit.Range.setStart", kwlist, PtrPyDOMNode_Type, &refNode, &offset))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->setStart(coreNode(refNode), offset, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Range_setEnd(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"refNode", (char*)"offset", NULL };
    PyDOMObject *refNode;
    long offset;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!l:pywebkit.Range.setEnd", kwlist, PtrPyDOMNode_Type, &refNode, &offset))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->setEnd(coreNode(refNode), offset, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Range_setStartBefore(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"refNode", NULL };
    PyDOMObject *refNode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Range.setStartBefore", kwlist, PtrPyDOMNode_Type, &refNode))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->setStartBefore(coreNode(refNode), ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Range_setStartAfter(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"refNode", NULL };
    PyDOMObject *refNode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Range.setStartAfter", kwlist, PtrPyDOMNode_Type, &refNode))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->setStartAfter(coreNode(refNode), ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Range_setEndBefore(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"refNode", NULL };
    PyDOMObject *refNode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Range.setEndBefore", kwlist, PtrPyDOMNode_Type, &refNode))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->setEndBefore(coreNode(refNode), ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Range_setEndAfter(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"refNode", NULL };
    PyDOMObject *refNode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Range.setEndAfter", kwlist, PtrPyDOMNode_Type, &refNode))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->setEndAfter(coreNode(refNode), ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Range_collapse(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"toStart", NULL };
    int toStart;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:pywebkit.Range.collapse", kwlist, &toStart))
        return NULL;
    bool cvt_toStart = (bool)toStart;
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->collapse(cvt_toStart, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Range_selectNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"refNode", NULL };
    PyDOMObject *refNode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Range.selectNode", kwlist, PtrPyDOMNode_Type, &refNode))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->selectNode(coreNode(refNode), ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Range_selectNodeContents(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"refNode", NULL };
    PyDOMObject *refNode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Range.selectNodeContents", kwlist, PtrPyDOMNode_Type, &refNode))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->selectNodeContents(coreNode(refNode), ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Range_compareBoundaryPoints(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"how", (char*)"sourceRange", NULL };
    int how, ret;
    PyDOMObject *sourceRange;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO!:pywebkit.Range.compareBoundaryPoints", kwlist, &how, PtrPyDOMRange_Type, &sourceRange))
        return NULL;
    WebCore::Range::CompareHow cvt_how = static_cast<WebCore::Range::CompareHow>(how);
    WebCore::ExceptionCode ec = 0;
    
    ret = coreRange(self)->compareBoundaryPoints(cvt_how, coreRange(sourceRange), ec);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_Range_deleteContents(PyDOMObject *self)
{
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->deleteContents(ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Range_extractContents(PyDOMObject *self)
{
    WebCore::DocumentFragment* _ret;
    PyObject *py_ret;

    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreRange(self)->extractContents(ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Range_cloneContents(PyDOMObject *self)
{
    WebCore::DocumentFragment* _ret;
    PyObject *py_ret;

    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreRange(self)->cloneContents(ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Range_insertNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"newNode", NULL };
    PyDOMObject *newNode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Range.insertNode", kwlist, PtrPyDOMNode_Type, &newNode))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->insertNode(coreNode(newNode), ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Range_surroundContents(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"newParent", NULL };
    PyDOMObject *newParent;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Range.surroundContents", kwlist, PtrPyDOMNode_Type, &newParent))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->surroundContents(coreNode(newParent), ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Range_cloneRange(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::Range* _ret;

    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreRange(self)->cloneRange(ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Range_toString(PyDOMObject *self)
{
    char *_ret;
    WTF::String ret;

    WebCore::ExceptionCode ec = 0;
    
    ret = coreRange(self)->toString(ec);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_Range_detach(PyDOMObject *self)
{
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->detach(ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_Range_createContextualFragment(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"html", NULL };
    char *html;
    WebCore::DocumentFragment* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Range.createContextualFragment", kwlist, &html))
        return NULL;
    WTF::String cvt_html = WTF::String::fromUTF8((const char*)html);
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreRange(self)->createContextualFragment(cvt_html, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_Range_intersectsNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"refNode", NULL };
    PyDOMObject *refNode;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Range.intersectsNode", kwlist, PtrPyDOMNode_Type, &refNode))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreRange(self)->intersectsNode(coreNode(refNode), ec);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Range_compareNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"refNode", NULL };
    int ret;
    PyDOMObject *refNode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.Range.compareNode", kwlist, PtrPyDOMNode_Type, &refNode))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreRange(self)->compareNode(coreNode(refNode), ec);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_Range_comparePoint(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"refNode", (char*)"offset", NULL };
    int ret;
    PyDOMObject *refNode;
    long offset;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!l:pywebkit.Range.comparePoint", kwlist, PtrPyDOMNode_Type, &refNode, &offset))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreRange(self)->comparePoint(coreNode(refNode), offset, ec);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_Range_isPointInRange(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"refNode", (char*)"offset", NULL };
    PyDOMObject *refNode;
    bool ret;
    long offset;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!l:pywebkit.Range.isPointInRange", kwlist, PtrPyDOMNode_Type, &refNode, &offset))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreRange(self)->isPointInRange(coreNode(refNode), offset, ec);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_Range_expand(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"unit", NULL };
    char *unit;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Range.expand", kwlist, &unit))
        return NULL;
    WTF::String cvt_unit = WTF::String::fromUTF8((const char*)unit);
    WebCore::ExceptionCode ec = 0;
    
    coreRange(self)->expand(cvt_unit, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMRange_methods[] = {
    { "setStart", (PyCFunction)WebKit::_wrap_Range_setStart, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setEnd", (PyCFunction)WebKit::_wrap_Range_setEnd, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setStartBefore", (PyCFunction)WebKit::_wrap_Range_setStartBefore, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setStartAfter", (PyCFunction)WebKit::_wrap_Range_setStartAfter, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setEndBefore", (PyCFunction)WebKit::_wrap_Range_setEndBefore, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setEndAfter", (PyCFunction)WebKit::_wrap_Range_setEndAfter, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "collapse", (PyCFunction)WebKit::_wrap_Range_collapse, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "selectNode", (PyCFunction)WebKit::_wrap_Range_selectNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "selectNodeContents", (PyCFunction)WebKit::_wrap_Range_selectNodeContents, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "compareBoundaryPoints", (PyCFunction)WebKit::_wrap_Range_compareBoundaryPoints, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "deleteContents", (PyCFunction)WebKit::_wrap_Range_deleteContents, METH_NOARGS,
      NULL },
    { "extractContents", (PyCFunction)WebKit::_wrap_Range_extractContents, METH_NOARGS,
      NULL },
    { "cloneContents", (PyCFunction)WebKit::_wrap_Range_cloneContents, METH_NOARGS,
      NULL },
    { "insertNode", (PyCFunction)WebKit::_wrap_Range_insertNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "surroundContents", (PyCFunction)WebKit::_wrap_Range_surroundContents, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "cloneRange", (PyCFunction)WebKit::_wrap_Range_cloneRange, METH_NOARGS,
      NULL },
    { "toString", (PyCFunction)WebKit::_wrap_Range_toString, METH_NOARGS,
      NULL },
    { "detach", (PyCFunction)WebKit::_wrap_Range_detach, METH_NOARGS,
      NULL },
    { "createContextualFragment", (PyCFunction)WebKit::_wrap_Range_createContextualFragment, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "intersectsNode", (PyCFunction)WebKit::_wrap_Range_intersectsNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "compareNode", (PyCFunction)WebKit::_wrap_Range_compareNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "comparePoint", (PyCFunction)WebKit::_wrap_Range_comparePoint, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "isPointInRange", (PyCFunction)WebKit::_wrap_Range_isPointInRange, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "expand", (PyCFunction)WebKit::_wrap_Range_expand, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corerange__get_startContainer(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    WebCore::ExceptionCode ec = 0;
    _ret = coreRange((PyDOMObject*)(self))->startContainer(ec);
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corerange__get_startOffset(PyObject *self, void *closure)
{
    long ret;

    WebCore::ExceptionCode ec = 0;
    ret = coreRange((PyDOMObject*)(self))->startOffset(ec);
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corerange__get_endContainer(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    WebCore::ExceptionCode ec = 0;
    _ret = coreRange((PyDOMObject*)(self))->endContainer(ec);
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corerange__get_endOffset(PyObject *self, void *closure)
{
    long ret;

    WebCore::ExceptionCode ec = 0;
    ret = coreRange((PyDOMObject*)(self))->endOffset(ec);
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corerange__get_collapsed(PyObject *self, void *closure)
{
    bool ret;

    WebCore::ExceptionCode ec = 0;
    ret = coreRange((PyDOMObject*)(self))->collapsed(ec);
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corerange__get_commonAncestorContainer(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    WebCore::ExceptionCode ec = 0;
    _ret = coreRange((PyDOMObject*)(self))->commonAncestorContainer(ec);
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corerange__get_text(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreRange((PyDOMObject*)(self))->text();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corerange_getsets[] = {
    { (char*)"startContainer", (getter)WebKit::_wrap_corerange__get_startContainer, (setter)0, 0, 0 },
    { (char*)"startOffset", (getter)WebKit::_wrap_corerange__get_startOffset, (setter)0, 0, 0 },
    { (char*)"endContainer", (getter)WebKit::_wrap_corerange__get_endContainer, (setter)0, 0, 0 },
    { (char*)"endOffset", (getter)WebKit::_wrap_corerange__get_endOffset, (setter)0, 0, 0 },
    { (char*)"collapsed", (getter)WebKit::_wrap_corerange__get_collapsed, (setter)0, 0, 0 },
    { (char*)"commonAncestorContainer", (getter)WebKit::_wrap_corerange__get_commonAncestorContainer, (setter)0, 0, 0 },
    { (char*)"text", (getter)WebKit::_wrap_corerange__get_text, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Range(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Range* cobj = coreRange(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMRange_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Range",                   /* tp_name */
    sizeof(PyDOMRange),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Range,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMRange_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corerange_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Range_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- TextEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
TextEvent_init(TextEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMUIEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_TextEvent_initTextEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"typeArg", (char*)"canBubbleArg", (char*)"cancelableArg", (char*)"viewArg", (char*)"dataArg", NULL };
    char *typeArg, *dataArg;
    int canBubbleArg, cancelableArg;
    PyDOMObject *viewArg;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siiO!s:pywebkit.TextEvent.initTextEvent", kwlist, &typeArg, &canBubbleArg, &cancelableArg, PtrPyDOMDOMWindow_Type, &viewArg, &dataArg))
        return NULL;
    WTF::String cvt_typeArg = WTF::String::fromUTF8((const char*)typeArg);
    bool cvt_canBubbleArg = (bool)canBubbleArg;
    bool cvt_cancelableArg = (bool)cancelableArg;
    WTF::String cvt_dataArg = WTF::String::fromUTF8((const char*)dataArg);
    
    coreTextEvent(self)->initTextEvent(cvt_typeArg, cvt_canBubbleArg, cvt_cancelableArg, coreDOMWindow(viewArg), cvt_dataArg);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMTextEvent_methods[] = {
    { "initTextEvent", (PyCFunction)WebKit::_wrap_TextEvent_initTextEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coretextevent__get_data(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreTextEvent((PyDOMObject*)(self))->data();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coretextevent_getsets[] = {
    { (char*)"data", (getter)WebKit::_wrap_coretextevent__get_data, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_TextEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::TextEvent* cobj = coreTextEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMTextEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.TextEvent",                   /* tp_name */
    sizeof(PyDOMTextEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_TextEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMTextEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coretextevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::TextEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- TreeWalker ----------- */

namespace WebKit {
using namespace WebCore;

static int
TreeWalker_init(TreeWalker *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_TreeWalker_parentNode(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    
    _ret = coreTreeWalker(self)->parentNode();
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_TreeWalker_firstChild(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    
    _ret = coreTreeWalker(self)->firstChild();
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_TreeWalker_lastChild(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    
    _ret = coreTreeWalker(self)->lastChild();
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_TreeWalker_previousSibling(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    
    _ret = coreTreeWalker(self)->previousSibling();
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_TreeWalker_nextSibling(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    
    _ret = coreTreeWalker(self)->nextSibling();
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_TreeWalker_previousNode(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    
    _ret = coreTreeWalker(self)->previousNode();
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_TreeWalker_nextNode(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    
    _ret = coreTreeWalker(self)->nextNode();
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMTreeWalker_methods[] = {
    { "parentNode", (PyCFunction)WebKit::_wrap_TreeWalker_parentNode, METH_NOARGS,
      NULL },
    { "firstChild", (PyCFunction)WebKit::_wrap_TreeWalker_firstChild, METH_NOARGS,
      NULL },
    { "lastChild", (PyCFunction)WebKit::_wrap_TreeWalker_lastChild, METH_NOARGS,
      NULL },
    { "previousSibling", (PyCFunction)WebKit::_wrap_TreeWalker_previousSibling, METH_NOARGS,
      NULL },
    { "nextSibling", (PyCFunction)WebKit::_wrap_TreeWalker_nextSibling, METH_NOARGS,
      NULL },
    { "previousNode", (PyCFunction)WebKit::_wrap_TreeWalker_previousNode, METH_NOARGS,
      NULL },
    { "nextNode", (PyCFunction)WebKit::_wrap_TreeWalker_nextNode, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coretreewalker__get_root(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreTreeWalker((PyDOMObject*)(self))->root();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coretreewalker__get_whatToShow(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreTreeWalker((PyDOMObject*)(self))->whatToShow();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_coretreewalker__get_filter(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::NodeFilter* _ret;

    _ret = coreTreeWalker((PyDOMObject*)(self))->filter();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coretreewalker__get_expandEntityReferences(PyObject *self, void *closure)
{
    bool ret;

    ret = coreTreeWalker((PyDOMObject*)(self))->expandEntityReferences();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coretreewalker__get_currentNode(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreTreeWalker((PyDOMObject*)(self))->currentNode();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coretreewalker__set_currentNode(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *currentNode;

    if (!PyArg_Parse(args,"O!:_wrap_coretreewalker__set_currentNode", PtrPyDOMNode_Type, &currentNode))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreTreeWalker((PyDOMObject*)(self))->setCurrentNode(coreNode(currentNode), ec);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coretreewalker_getsets[] = {
    { (char*)"root", (getter)WebKit::_wrap_coretreewalker__get_root, (setter)0, 0, 0 },
    { (char*)"whatToShow", (getter)WebKit::_wrap_coretreewalker__get_whatToShow, (setter)0, 0, 0 },
    { (char*)"filter", (getter)WebKit::_wrap_coretreewalker__get_filter, (setter)0, 0, 0 },
    { (char*)"expandEntityReferences", (getter)WebKit::_wrap_coretreewalker__get_expandEntityReferences, (setter)0, 0, 0 },
    { (char*)"currentNode", (getter)WebKit::_wrap_coretreewalker__get_currentNode, (setter)WebKit::_wrap_coretreewalker__set_currentNode, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_TreeWalker(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::TreeWalker* cobj = coreTreeWalker(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMTreeWalker_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.TreeWalker",                   /* tp_name */
    sizeof(PyDOMTreeWalker),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_TreeWalker,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMTreeWalker_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coretreewalker_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::TreeWalker_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- WebKitAnimationEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
WebKitAnimationEvent_init(WebKitAnimationEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_WebKitAnimationEvent_initWebKitAnimationEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"typeArg", (char*)"canBubbleArg", (char*)"cancelableArg", (char*)"animationNameArg", (char*)"elapsedTimeArg", NULL };
    char *typeArg, *animationNameArg;
    int canBubbleArg, cancelableArg;
    double elapsedTimeArg;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siisd:pywebkit.WebKitAnimationEvent.initWebKitAnimationEvent", kwlist, &typeArg, &canBubbleArg, &cancelableArg, &animationNameArg, &elapsedTimeArg))
        return NULL;
    WTF::String cvt_typeArg = WTF::String::fromUTF8((const char*)typeArg);
    bool cvt_canBubbleArg = (bool)canBubbleArg;
    bool cvt_cancelableArg = (bool)cancelableArg;
    WTF::String cvt_animationNameArg = WTF::String::fromUTF8((const char*)animationNameArg);
    
    coreWebKitAnimationEvent(self)->initWebKitAnimationEvent(cvt_typeArg, cvt_canBubbleArg, cvt_cancelableArg, cvt_animationNameArg, elapsedTimeArg);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMWebKitAnimationEvent_methods[] = {
    { "initWebKitAnimationEvent", (PyCFunction)WebKit::_wrap_WebKitAnimationEvent_initWebKitAnimationEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corewebkitanimationevent__get_animationName(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreWebKitAnimationEvent((PyDOMObject*)(self))->animationName();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corewebkitanimationevent__get_elapsedTime(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitAnimationEvent((PyDOMObject*)(self))->elapsedTime();
    return PyFloat_FromDouble(ret);
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corewebkitanimationevent_getsets[] = {
    { (char*)"animationName", (getter)WebKit::_wrap_corewebkitanimationevent__get_animationName, (setter)0, 0, 0 },
    { (char*)"elapsedTime", (getter)WebKit::_wrap_corewebkitanimationevent__get_elapsedTime, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_WebKitAnimationEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::WebKitAnimationEvent* cobj = coreWebKitAnimationEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMWebKitAnimationEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.WebKitAnimationEvent",                   /* tp_name */
    sizeof(PyDOMWebKitAnimationEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_WebKitAnimationEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMWebKitAnimationEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corewebkitanimationevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::WebKitAnimationEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- WebKitTransitionEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
WebKitTransitionEvent_init(WebKitTransitionEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_WebKitTransitionEvent_initWebKitTransitionEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"typeArg", (char*)"canBubbleArg", (char*)"cancelableArg", (char*)"propertyNameArg", (char*)"elapsedTimeArg", NULL };
    char *typeArg, *propertyNameArg;
    int canBubbleArg, cancelableArg;
    double elapsedTimeArg;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siisd:pywebkit.WebKitTransitionEvent.initWebKitTransitionEvent", kwlist, &typeArg, &canBubbleArg, &cancelableArg, &propertyNameArg, &elapsedTimeArg))
        return NULL;
    WTF::String cvt_typeArg = WTF::String::fromUTF8((const char*)typeArg);
    bool cvt_canBubbleArg = (bool)canBubbleArg;
    bool cvt_cancelableArg = (bool)cancelableArg;
    WTF::String cvt_propertyNameArg = WTF::String::fromUTF8((const char*)propertyNameArg);
    
    coreWebKitTransitionEvent(self)->initWebKitTransitionEvent(cvt_typeArg, cvt_canBubbleArg, cvt_cancelableArg, cvt_propertyNameArg, elapsedTimeArg);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMWebKitTransitionEvent_methods[] = {
    { "initWebKitTransitionEvent", (PyCFunction)WebKit::_wrap_WebKitTransitionEvent_initWebKitTransitionEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corewebkittransitionevent__get_propertyName(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreWebKitTransitionEvent((PyDOMObject*)(self))->propertyName();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corewebkittransitionevent__get_elapsedTime(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitTransitionEvent((PyDOMObject*)(self))->elapsedTime();
    return PyFloat_FromDouble(ret);
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corewebkittransitionevent_getsets[] = {
    { (char*)"propertyName", (getter)WebKit::_wrap_corewebkittransitionevent__get_propertyName, (setter)0, 0, 0 },
    { (char*)"elapsedTime", (getter)WebKit::_wrap_corewebkittransitionevent__get_elapsedTime, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_WebKitTransitionEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::WebKitTransitionEvent* cobj = coreWebKitTransitionEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMWebKitTransitionEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.WebKitTransitionEvent",                   /* tp_name */
    sizeof(PyDOMWebKitTransitionEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_WebKitTransitionEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMWebKitTransitionEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corewebkittransitionevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::WebKitTransitionEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- WheelEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
WheelEvent_init(WheelEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMUIEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_WheelEvent_initWheelEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"wheelDeltaX", (char*)"wheelDeltaY", (char*)"view", (char*)"screenX", (char*)"screenY", (char*)"clientX", (char*)"clientY", (char*)"ctrlKey", (char*)"altKey", (char*)"shiftKey", (char*)"metaKey", NULL };
    int ctrlKey, altKey, shiftKey, metaKey;
    PyDOMObject *view;
    long wheelDeltaX, wheelDeltaY, screenX, screenY, clientX, clientY;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"llO!lllliiii:pywebkit.WheelEvent.initWheelEvent", kwlist, &wheelDeltaX, &wheelDeltaY, PtrPyDOMDOMWindow_Type, &view, &screenX, &screenY, &clientX, &clientY, &ctrlKey, &altKey, &shiftKey, &metaKey))
        return NULL;
    bool cvt_ctrlKey = (bool)ctrlKey;
    bool cvt_altKey = (bool)altKey;
    bool cvt_shiftKey = (bool)shiftKey;
    bool cvt_metaKey = (bool)metaKey;
    
    coreWheelEvent(self)->initWheelEvent(wheelDeltaX, wheelDeltaY, coreDOMWindow(view), screenX, screenY, clientX, clientY, cvt_ctrlKey, cvt_altKey, cvt_shiftKey, cvt_metaKey);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMWheelEvent_methods[] = {
    { "initWheelEvent", (PyCFunction)WebKit::_wrap_WheelEvent_initWheelEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corewheelevent__get_screenX(PyObject *self, void *closure)
{
    long ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->screenX();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corewheelevent__get_screenY(PyObject *self, void *closure)
{
    long ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->screenY();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corewheelevent__get_clientX(PyObject *self, void *closure)
{
    long ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->clientX();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corewheelevent__get_clientY(PyObject *self, void *closure)
{
    long ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->clientY();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corewheelevent__get_ctrlKey(PyObject *self, void *closure)
{
    bool ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->ctrlKey();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corewheelevent__get_shiftKey(PyObject *self, void *closure)
{
    bool ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->shiftKey();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corewheelevent__get_altKey(PyObject *self, void *closure)
{
    bool ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->altKey();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corewheelevent__get_metaKey(PyObject *self, void *closure)
{
    bool ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->metaKey();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corewheelevent__get_wheelDelta(PyObject *self, void *closure)
{
    long ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->wheelDelta();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corewheelevent__get_wheelDeltaX(PyObject *self, void *closure)
{
    long ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->wheelDeltaX();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corewheelevent__get_wheelDeltaY(PyObject *self, void *closure)
{
    long ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->wheelDeltaY();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corewheelevent__get_offsetX(PyObject *self, void *closure)
{
    long ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->offsetX();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corewheelevent__get_offsetY(PyObject *self, void *closure)
{
    long ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->offsetY();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corewheelevent__get_x(PyObject *self, void *closure)
{
    long ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->x();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corewheelevent__get_y(PyObject *self, void *closure)
{
    long ret;

    ret = coreWheelEvent((PyDOMObject*)(self))->y();
    return PyInt_FromLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corewheelevent_getsets[] = {
    { (char*)"screenX", (getter)WebKit::_wrap_corewheelevent__get_screenX, (setter)0, 0, 0 },
    { (char*)"screenY", (getter)WebKit::_wrap_corewheelevent__get_screenY, (setter)0, 0, 0 },
    { (char*)"clientX", (getter)WebKit::_wrap_corewheelevent__get_clientX, (setter)0, 0, 0 },
    { (char*)"clientY", (getter)WebKit::_wrap_corewheelevent__get_clientY, (setter)0, 0, 0 },
    { (char*)"ctrlKey", (getter)WebKit::_wrap_corewheelevent__get_ctrlKey, (setter)0, 0, 0 },
    { (char*)"shiftKey", (getter)WebKit::_wrap_corewheelevent__get_shiftKey, (setter)0, 0, 0 },
    { (char*)"altKey", (getter)WebKit::_wrap_corewheelevent__get_altKey, (setter)0, 0, 0 },
    { (char*)"metaKey", (getter)WebKit::_wrap_corewheelevent__get_metaKey, (setter)0, 0, 0 },
    { (char*)"wheelDelta", (getter)WebKit::_wrap_corewheelevent__get_wheelDelta, (setter)0, 0, 0 },
    { (char*)"wheelDeltaX", (getter)WebKit::_wrap_corewheelevent__get_wheelDeltaX, (setter)0, 0, 0 },
    { (char*)"wheelDeltaY", (getter)WebKit::_wrap_corewheelevent__get_wheelDeltaY, (setter)0, 0, 0 },
    { (char*)"offsetX", (getter)WebKit::_wrap_corewheelevent__get_offsetX, (setter)0, 0, 0 },
    { (char*)"offsetY", (getter)WebKit::_wrap_corewheelevent__get_offsetY, (setter)0, 0, 0 },
    { (char*)"x", (getter)WebKit::_wrap_corewheelevent__get_x, (setter)0, 0, 0 },
    { (char*)"y", (getter)WebKit::_wrap_corewheelevent__get_y, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_WheelEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::WheelEvent* cobj = coreWheelEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMWheelEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.WheelEvent",                   /* tp_name */
    sizeof(PyDOMWheelEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_WheelEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMWheelEvent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corewheelevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::WheelEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- DOMFormData ----------- */

namespace WebKit {
using namespace WebCore;

static int
DOMFormData_init(DOMFormData *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_DOMFormData_append(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", (char*)"value", NULL };
    char *name, *value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.DOMFormData.append", kwlist, &name, &value))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    
    coreDOMFormData(self)->append(cvt_name, cvt_value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMDOMFormData_methods[] = {
    { "append", (PyCFunction)WebKit::_wrap_DOMFormData_append, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
void dealloc_DOMFormData(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::DOMFormData* cobj = coreDOMFormData(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMDOMFormData_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.DOMFormData",                   /* tp_name */
    sizeof(PyDOMDOMFormData),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_DOMFormData,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMDOMFormData_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::DOMFormData_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLAllCollection ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLAllCollection_init(HTMLAllCollection *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLAllCollection_item(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    PyObject *py_ret;
    unsigned long index;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.HTMLAllCollection.item", kwlist, &index))
        return NULL;
    
    _ret = coreHTMLAllCollection(self)->item(index);
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_HTMLAllCollection_namedItem(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name;
    PyObject *py_ret;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLAllCollection.namedItem", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    
    _ret = coreHTMLAllCollection(self)->namedItem(cvt_name);
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_HTMLAllCollection_tags(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name;
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLAllCollection.tags", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    
    _ret = WTF::getPtr(coreHTMLAllCollection(self)->tags(cvt_name));
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLAllCollection_methods[] = {
    { "item", (PyCFunction)WebKit::_wrap_HTMLAllCollection_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "namedItem", (PyCFunction)WebKit::_wrap_HTMLAllCollection_namedItem, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "tags", (PyCFunction)WebKit::_wrap_HTMLAllCollection_tags, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmlallcollection__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreHTMLAllCollection((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlallcollection_getsets[] = {
    { (char*)"length", (getter)WebKit::_wrap_corehtmlallcollection__get_length, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLAllCollection(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLAllCollection* cobj = coreHTMLAllCollection(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLAllCollection_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLAllCollection",                   /* tp_name */
    sizeof(PyDOMHTMLAllCollection),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLAllCollection,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLAllCollection_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlallcollection_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLAllCollection_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLElement_init(HTMLElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLElement_insertAdjacentElement(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"where", (char*)"element", NULL };
    char *where;
    PyDOMObject *element;
    PyObject *py_ret;
    WebCore::Element* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO!:pywebkit.HTMLElement.insertAdjacentElement", kwlist, &where, PtrPyDOMElement_Type, &element))
        return NULL;
    WTF::String cvt_where = WTF::String::fromUTF8((const char*)where);
    WebCore::ExceptionCode ec = 0;
    
    _ret = coreHTMLElement(self)->insertAdjacentElement(cvt_where, coreElement(element), ec);
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_HTMLElement_insertAdjacentHTML(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"where", (char*)"html", NULL };
    char *where, *html;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.HTMLElement.insertAdjacentHTML", kwlist, &where, &html))
        return NULL;
    WTF::String cvt_where = WTF::String::fromUTF8((const char*)where);
    WTF::String cvt_html = WTF::String::fromUTF8((const char*)html);
    WebCore::ExceptionCode ec = 0;
    
    coreHTMLElement(self)->insertAdjacentHTML(cvt_where, cvt_html, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLElement_insertAdjacentText(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"where", (char*)"text", NULL };
    char *where, *text;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.HTMLElement.insertAdjacentText", kwlist, &where, &text))
        return NULL;
    WTF::String cvt_where = WTF::String::fromUTF8((const char*)where);
    WTF::String cvt_text = WTF::String::fromUTF8((const char*)text);
    WebCore::ExceptionCode ec = 0;
    
    coreHTMLElement(self)->insertAdjacentText(cvt_where, cvt_text, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLElement_methods[] = {
    { "insertAdjacentElement", (PyCFunction)WebKit::_wrap_HTMLElement_insertAdjacentElement, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "insertAdjacentHTML", (PyCFunction)WebKit::_wrap_HTMLElement_insertAdjacentHTML, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "insertAdjacentText", (PyCFunction)WebKit::_wrap_HTMLElement_insertAdjacentText, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmlelement__get_id(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::idAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlelement__set_id(PyObject *self, PyObject *args, void *closure)
{
    char *id;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlelement__set_id", &id))
        return -1;
    WTF::String cvt_id = WTF::String::fromUTF8((const char*)id);
    coreHTMLElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::idAttr, cvt_id);

    return 0;
}

static PyObject *
_wrap_corehtmlelement__get_title(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::titleAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlelement__set_title(PyObject *self, PyObject *args, void *closure)
{
    char *title;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlelement__set_title", &title))
        return -1;
    WTF::String cvt_title = WTF::String::fromUTF8((const char*)title);
    coreHTMLElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::titleAttr, cvt_title);

    return 0;
}

static PyObject *
_wrap_corehtmlelement__get_lang(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::langAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlelement__set_lang(PyObject *self, PyObject *args, void *closure)
{
    char *lang;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlelement__set_lang", &lang))
        return -1;
    WTF::String cvt_lang = WTF::String::fromUTF8((const char*)lang);
    coreHTMLElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::langAttr, cvt_lang);

    return 0;
}

static PyObject *
_wrap_corehtmlelement__get_dir(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::dirAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlelement__set_dir(PyObject *self, PyObject *args, void *closure)
{
    char *dir;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlelement__set_dir", &dir))
        return -1;
    WTF::String cvt_dir = WTF::String::fromUTF8((const char*)dir);
    coreHTMLElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::dirAttr, cvt_dir);

    return 0;
}

static PyObject *
_wrap_corehtmlelement__get_className(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::classAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlelement__set_className(PyObject *self, PyObject *args, void *closure)
{
    char *className;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlelement__set_className", &className))
        return -1;
    WTF::String cvt_className = WTF::String::fromUTF8((const char*)className);
    coreHTMLElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::classAttr, cvt_className);

    return 0;
}

static PyObject *
_wrap_corehtmlelement__get_tabIndex(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLElement((PyDOMObject*)(self))->tabIndex();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlelement__set_tabIndex(PyObject *self, PyObject *args, void *closure)
{
    long tabIndex;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlelement__set_tabIndex", &tabIndex))
        return -1;
    coreHTMLElement((PyDOMObject*)(self))->setTabIndex(tabIndex);

    return 0;
}

static PyObject *
_wrap_corehtmlelement__get_draggable(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLElement((PyDOMObject*)(self))->draggable();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlelement__set_draggable(PyObject *self, PyObject *args, void *closure)
{
    int draggable;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlelement__set_draggable", &draggable))
        return -1;
    bool cvt_draggable = (bool)draggable;
    coreHTMLElement((PyDOMObject*)(self))->setDraggable(cvt_draggable);

    return 0;
}

static PyObject *
_wrap_corehtmlelement__get_hidden(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::hiddenAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlelement__set_hidden(PyObject *self, PyObject *args, void *closure)
{
    int hidden;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlelement__set_hidden", &hidden))
        return -1;
    bool cvt_hidden = (bool)hidden;
    coreHTMLElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::hiddenAttr, cvt_hidden);

    return 0;
}

static PyObject *
_wrap_corehtmlelement__get_innerHTML(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLElement((PyDOMObject*)(self))->innerHTML();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlelement__set_innerHTML(PyObject *self, PyObject *args, void *closure)
{
    char *innerHTML;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlelement__set_innerHTML", &innerHTML))
        return -1;
    WTF::String cvt_innerHTML = WTF::String::fromUTF8((const char*)innerHTML);
    WebCore::ExceptionCode ec = 0;
    coreHTMLElement((PyDOMObject*)(self))->setInnerHTML(cvt_innerHTML, ec);

    return 0;
}

static PyObject *
_wrap_corehtmlelement__get_innerText(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLElement((PyDOMObject*)(self))->innerText();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlelement__set_innerText(PyObject *self, PyObject *args, void *closure)
{
    char *innerText;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlelement__set_innerText", &innerText))
        return -1;
    WTF::String cvt_innerText = WTF::String::fromUTF8((const char*)innerText);
    WebCore::ExceptionCode ec = 0;
    coreHTMLElement((PyDOMObject*)(self))->setInnerText(cvt_innerText, ec);

    return 0;
}

static PyObject *
_wrap_corehtmlelement__get_outerHTML(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLElement((PyDOMObject*)(self))->outerHTML();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlelement__set_outerHTML(PyObject *self, PyObject *args, void *closure)
{
    char *outerHTML;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlelement__set_outerHTML", &outerHTML))
        return -1;
    WTF::String cvt_outerHTML = WTF::String::fromUTF8((const char*)outerHTML);
    WebCore::ExceptionCode ec = 0;
    coreHTMLElement((PyDOMObject*)(self))->setOuterHTML(cvt_outerHTML, ec);

    return 0;
}

static PyObject *
_wrap_corehtmlelement__get_outerText(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLElement((PyDOMObject*)(self))->outerText();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlelement__set_outerText(PyObject *self, PyObject *args, void *closure)
{
    char *outerText;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlelement__set_outerText", &outerText))
        return -1;
    WTF::String cvt_outerText = WTF::String::fromUTF8((const char*)outerText);
    WebCore::ExceptionCode ec = 0;
    coreHTMLElement((PyDOMObject*)(self))->setOuterText(cvt_outerText, ec);

    return 0;
}

static PyObject *
_wrap_corehtmlelement__get_children(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreHTMLElement((PyDOMObject*)(self))->children());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlelement__get_isContentEditable(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLElement((PyDOMObject*)(self))->isContentEditable();
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlelement_getsets[] = {
    { (char*)"id", (getter)WebKit::_wrap_corehtmlelement__get_id, (setter)WebKit::_wrap_corehtmlelement__set_id, 0, 0 },
    { (char*)"title", (getter)WebKit::_wrap_corehtmlelement__get_title, (setter)WebKit::_wrap_corehtmlelement__set_title, 0, 0 },
    { (char*)"lang", (getter)WebKit::_wrap_corehtmlelement__get_lang, (setter)WebKit::_wrap_corehtmlelement__set_lang, 0, 0 },
    { (char*)"dir", (getter)WebKit::_wrap_corehtmlelement__get_dir, (setter)WebKit::_wrap_corehtmlelement__set_dir, 0, 0 },
    { (char*)"className", (getter)WebKit::_wrap_corehtmlelement__get_className, (setter)WebKit::_wrap_corehtmlelement__set_className, 0, 0 },
    { (char*)"tabIndex", (getter)WebKit::_wrap_corehtmlelement__get_tabIndex, (setter)WebKit::_wrap_corehtmlelement__set_tabIndex, 0, 0 },
    { (char*)"draggable", (getter)WebKit::_wrap_corehtmlelement__get_draggable, (setter)WebKit::_wrap_corehtmlelement__set_draggable, 0, 0 },
    { (char*)"hidden", (getter)WebKit::_wrap_corehtmlelement__get_hidden, (setter)WebKit::_wrap_corehtmlelement__set_hidden, 0, 0 },
    { (char*)"innerHTML", (getter)WebKit::_wrap_corehtmlelement__get_innerHTML, (setter)WebKit::_wrap_corehtmlelement__set_innerHTML, 0, 0 },
    { (char*)"innerText", (getter)WebKit::_wrap_corehtmlelement__get_innerText, (setter)WebKit::_wrap_corehtmlelement__set_innerText, 0, 0 },
    { (char*)"outerHTML", (getter)WebKit::_wrap_corehtmlelement__get_outerHTML, (setter)WebKit::_wrap_corehtmlelement__set_outerHTML, 0, 0 },
    { (char*)"outerText", (getter)WebKit::_wrap_corehtmlelement__get_outerText, (setter)WebKit::_wrap_corehtmlelement__set_outerText, 0, 0 },
    { (char*)"children", (getter)WebKit::_wrap_corehtmlelement__get_children, (setter)0, 0, 0 },
    { (char*)"isContentEditable", (getter)WebKit::_wrap_corehtmlelement__get_isContentEditable, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLElement* cobj = coreHTMLElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLElement",                   /* tp_name */
    sizeof(PyDOMHTMLElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLAnchorElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLAnchorElement_init(HTMLAnchorElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLAnchorElement_getParameter(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLAnchorElement.getParameter", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    
    ret = coreHTMLAnchorElement(self)->getParameter(cvt_name);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLAnchorElement_methods[] = {
    { "getParameter", (PyCFunction)WebKit::_wrap_HTMLAnchorElement_getParameter, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmlanchorelement__get_accessKey(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::accesskeyAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_accessKey(PyObject *self, PyObject *args, void *closure)
{
    char *accessKey;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_accessKey", &accessKey))
        return -1;
    WTF::String cvt_accessKey = WTF::String::fromUTF8((const char*)accessKey);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::accesskeyAttr, cvt_accessKey);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_charset(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::charsetAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_charset(PyObject *self, PyObject *args, void *closure)
{
    char *charset;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_charset", &charset))
        return -1;
    WTF::String cvt_charset = WTF::String::fromUTF8((const char*)charset);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::charsetAttr, cvt_charset);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_coords(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::coordsAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_coords(PyObject *self, PyObject *args, void *closure)
{
    char *coords;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_coords", &coords))
        return -1;
    WTF::String cvt_coords = WTF::String::fromUTF8((const char*)coords);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::coordsAttr, cvt_coords);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_href(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::hrefAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_href(PyObject *self, PyObject *args, void *closure)
{
    char *href;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_href", &href))
        return -1;
    WTF::String cvt_href = WTF::String::fromUTF8((const char*)href);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::hrefAttr, cvt_href);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_hreflang(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::hreflangAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_hreflang(PyObject *self, PyObject *args, void *closure)
{
    char *hreflang;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_hreflang", &hreflang))
        return -1;
    WTF::String cvt_hreflang = WTF::String::fromUTF8((const char*)hreflang);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::hreflangAttr, cvt_hreflang);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::nameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::nameAttr, cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_rel(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::relAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_rel(PyObject *self, PyObject *args, void *closure)
{
    char *rel;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_rel", &rel))
        return -1;
    WTF::String cvt_rel = WTF::String::fromUTF8((const char*)rel);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::relAttr, cvt_rel);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_rev(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::revAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_rev(PyObject *self, PyObject *args, void *closure)
{
    char *rev;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_rev", &rev))
        return -1;
    WTF::String cvt_rev = WTF::String::fromUTF8((const char*)rev);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::revAttr, cvt_rev);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_shape(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::shapeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_shape(PyObject *self, PyObject *args, void *closure)
{
    char *shape;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_shape", &shape))
        return -1;
    WTF::String cvt_shape = WTF::String::fromUTF8((const char*)shape);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::shapeAttr, cvt_shape);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_target(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::targetAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_target(PyObject *self, PyObject *args, void *closure)
{
    char *target;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_target", &target))
        return -1;
    WTF::String cvt_target = WTF::String::fromUTF8((const char*)target);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::targetAttr, cvt_target);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::typeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_type(PyObject *self, PyObject *args, void *closure)
{
    char *type;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_type", &type))
        return -1;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::typeAttr, cvt_type);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_hash(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->hash();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_hash(PyObject *self, PyObject *args, void *closure)
{
    char *hash;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_hash", &hash))
        return -1;
    WTF::String cvt_hash = WTF::String::fromUTF8((const char*)hash);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setHash(cvt_hash);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_host(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->host();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_host(PyObject *self, PyObject *args, void *closure)
{
    char *host;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_host", &host))
        return -1;
    WTF::String cvt_host = WTF::String::fromUTF8((const char*)host);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setHost(cvt_host);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_hostname(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->hostname();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_hostname(PyObject *self, PyObject *args, void *closure)
{
    char *hostname;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_hostname", &hostname))
        return -1;
    WTF::String cvt_hostname = WTF::String::fromUTF8((const char*)hostname);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setHostname(cvt_hostname);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_pathname(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->pathname();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_pathname(PyObject *self, PyObject *args, void *closure)
{
    char *pathname;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_pathname", &pathname))
        return -1;
    WTF::String cvt_pathname = WTF::String::fromUTF8((const char*)pathname);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setPathname(cvt_pathname);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_port(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->port();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_port(PyObject *self, PyObject *args, void *closure)
{
    char *port;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_port", &port))
        return -1;
    WTF::String cvt_port = WTF::String::fromUTF8((const char*)port);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setPort(cvt_port);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_protocol(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->protocol();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_protocol(PyObject *self, PyObject *args, void *closure)
{
    char *protocol;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_protocol", &protocol))
        return -1;
    WTF::String cvt_protocol = WTF::String::fromUTF8((const char*)protocol);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setProtocol(cvt_protocol);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_search(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->search();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlanchorelement__set_search(PyObject *self, PyObject *args, void *closure)
{
    char *search;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlanchorelement__set_search", &search))
        return -1;
    WTF::String cvt_search = WTF::String::fromUTF8((const char*)search);
    coreHTMLAnchorElement((PyDOMObject*)(self))->setSearch(cvt_search);

    return 0;
}

static PyObject *
_wrap_corehtmlanchorelement__get_origin(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->origin();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlanchorelement__get_text(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAnchorElement((PyDOMObject*)(self))->text();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlanchorelement_getsets[] = {
    { (char*)"accessKey", (getter)WebKit::_wrap_corehtmlanchorelement__get_accessKey, (setter)WebKit::_wrap_corehtmlanchorelement__set_accessKey, 0, 0 },
    { (char*)"charset", (getter)WebKit::_wrap_corehtmlanchorelement__get_charset, (setter)WebKit::_wrap_corehtmlanchorelement__set_charset, 0, 0 },
    { (char*)"coords", (getter)WebKit::_wrap_corehtmlanchorelement__get_coords, (setter)WebKit::_wrap_corehtmlanchorelement__set_coords, 0, 0 },
    { (char*)"href", (getter)WebKit::_wrap_corehtmlanchorelement__get_href, (setter)WebKit::_wrap_corehtmlanchorelement__set_href, 0, 0 },
    { (char*)"hreflang", (getter)WebKit::_wrap_corehtmlanchorelement__get_hreflang, (setter)WebKit::_wrap_corehtmlanchorelement__set_hreflang, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corehtmlanchorelement__get_name, (setter)WebKit::_wrap_corehtmlanchorelement__set_name, 0, 0 },
    { (char*)"rel", (getter)WebKit::_wrap_corehtmlanchorelement__get_rel, (setter)WebKit::_wrap_corehtmlanchorelement__set_rel, 0, 0 },
    { (char*)"rev", (getter)WebKit::_wrap_corehtmlanchorelement__get_rev, (setter)WebKit::_wrap_corehtmlanchorelement__set_rev, 0, 0 },
    { (char*)"shape", (getter)WebKit::_wrap_corehtmlanchorelement__get_shape, (setter)WebKit::_wrap_corehtmlanchorelement__set_shape, 0, 0 },
    { (char*)"target", (getter)WebKit::_wrap_corehtmlanchorelement__get_target, (setter)WebKit::_wrap_corehtmlanchorelement__set_target, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_corehtmlanchorelement__get_type, (setter)WebKit::_wrap_corehtmlanchorelement__set_type, 0, 0 },
    { (char*)"hash", (getter)WebKit::_wrap_corehtmlanchorelement__get_hash, (setter)WebKit::_wrap_corehtmlanchorelement__set_hash, 0, 0 },
    { (char*)"host", (getter)WebKit::_wrap_corehtmlanchorelement__get_host, (setter)WebKit::_wrap_corehtmlanchorelement__set_host, 0, 0 },
    { (char*)"hostname", (getter)WebKit::_wrap_corehtmlanchorelement__get_hostname, (setter)WebKit::_wrap_corehtmlanchorelement__set_hostname, 0, 0 },
    { (char*)"pathname", (getter)WebKit::_wrap_corehtmlanchorelement__get_pathname, (setter)WebKit::_wrap_corehtmlanchorelement__set_pathname, 0, 0 },
    { (char*)"port", (getter)WebKit::_wrap_corehtmlanchorelement__get_port, (setter)WebKit::_wrap_corehtmlanchorelement__set_port, 0, 0 },
    { (char*)"protocol", (getter)WebKit::_wrap_corehtmlanchorelement__get_protocol, (setter)WebKit::_wrap_corehtmlanchorelement__set_protocol, 0, 0 },
    { (char*)"search", (getter)WebKit::_wrap_corehtmlanchorelement__get_search, (setter)WebKit::_wrap_corehtmlanchorelement__set_search, 0, 0 },
    { (char*)"origin", (getter)WebKit::_wrap_corehtmlanchorelement__get_origin, (setter)0, 0, 0 },
    { (char*)"text", (getter)WebKit::_wrap_corehtmlanchorelement__get_text, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLAnchorElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLAnchorElement* cobj = coreHTMLAnchorElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLAnchorElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLAnchorElement",                   /* tp_name */
    sizeof(PyDOMHTMLAnchorElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLAnchorElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLAnchorElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlanchorelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLAnchorElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLAppletElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLAppletElement_init(HTMLAppletElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlappletelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAppletElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlappletelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlappletelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLAppletElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

static PyObject *
_wrap_corehtmlappletelement__get_alt(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAppletElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::altAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlappletelement__set_alt(PyObject *self, PyObject *args, void *closure)
{
    char *alt;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlappletelement__set_alt", &alt))
        return -1;
    WTF::String cvt_alt = WTF::String::fromUTF8((const char*)alt);
    coreHTMLAppletElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::altAttr, cvt_alt);

    return 0;
}

static PyObject *
_wrap_corehtmlappletelement__get_archive(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAppletElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::archiveAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlappletelement__set_archive(PyObject *self, PyObject *args, void *closure)
{
    char *archive;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlappletelement__set_archive", &archive))
        return -1;
    WTF::String cvt_archive = WTF::String::fromUTF8((const char*)archive);
    coreHTMLAppletElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::archiveAttr, cvt_archive);

    return 0;
}

static PyObject *
_wrap_corehtmlappletelement__get_code(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAppletElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::codeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlappletelement__set_code(PyObject *self, PyObject *args, void *closure)
{
    char *code;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlappletelement__set_code", &code))
        return -1;
    WTF::String cvt_code = WTF::String::fromUTF8((const char*)code);
    coreHTMLAppletElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::codeAttr, cvt_code);

    return 0;
}

static PyObject *
_wrap_corehtmlappletelement__get_codeBase(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAppletElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::codebaseAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlappletelement__set_codeBase(PyObject *self, PyObject *args, void *closure)
{
    char *codeBase;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlappletelement__set_codeBase", &codeBase))
        return -1;
    WTF::String cvt_codeBase = WTF::String::fromUTF8((const char*)codeBase);
    coreHTMLAppletElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::codebaseAttr, cvt_codeBase);

    return 0;
}

static PyObject *
_wrap_corehtmlappletelement__get_height(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAppletElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::heightAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlappletelement__set_height(PyObject *self, PyObject *args, void *closure)
{
    char *height;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlappletelement__set_height", &height))
        return -1;
    WTF::String cvt_height = WTF::String::fromUTF8((const char*)height);
    coreHTMLAppletElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::heightAttr, cvt_height);

    return 0;
}

static PyObject *
_wrap_corehtmlappletelement__get_hspace(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLAppletElement((PyDOMObject*)(self))->getIntegralAttribute(WebCore::HTMLNames::hspaceAttr);
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlappletelement__set_hspace(PyObject *self, PyObject *args, void *closure)
{
    long hspace;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlappletelement__set_hspace", &hspace))
        return -1;
    coreHTMLAppletElement((PyDOMObject*)(self))->setIntegralAttribute(WebCore::HTMLNames::hspaceAttr, hspace);

    return 0;
}

static PyObject *
_wrap_corehtmlappletelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAppletElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::nameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlappletelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlappletelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLAppletElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::nameAttr, cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmlappletelement__get_object(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAppletElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::objectAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlappletelement__set_object(PyObject *self, PyObject *args, void *closure)
{
    char *object;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlappletelement__set_object", &object))
        return -1;
    WTF::String cvt_object = WTF::String::fromUTF8((const char*)object);
    coreHTMLAppletElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::objectAttr, cvt_object);

    return 0;
}

static PyObject *
_wrap_corehtmlappletelement__get_vspace(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLAppletElement((PyDOMObject*)(self))->getIntegralAttribute(WebCore::HTMLNames::vspaceAttr);
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlappletelement__set_vspace(PyObject *self, PyObject *args, void *closure)
{
    long vspace;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlappletelement__set_vspace", &vspace))
        return -1;
    coreHTMLAppletElement((PyDOMObject*)(self))->setIntegralAttribute(WebCore::HTMLNames::vspaceAttr, vspace);

    return 0;
}

static PyObject *
_wrap_corehtmlappletelement__get_width(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAppletElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::widthAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlappletelement__set_width(PyObject *self, PyObject *args, void *closure)
{
    char *width;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlappletelement__set_width", &width))
        return -1;
    WTF::String cvt_width = WTF::String::fromUTF8((const char*)width);
    coreHTMLAppletElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::widthAttr, cvt_width);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlappletelement_getsets[] = {
    { (char*)"align", (getter)WebKit::_wrap_corehtmlappletelement__get_align, (setter)WebKit::_wrap_corehtmlappletelement__set_align, 0, 0 },
    { (char*)"alt", (getter)WebKit::_wrap_corehtmlappletelement__get_alt, (setter)WebKit::_wrap_corehtmlappletelement__set_alt, 0, 0 },
    { (char*)"archive", (getter)WebKit::_wrap_corehtmlappletelement__get_archive, (setter)WebKit::_wrap_corehtmlappletelement__set_archive, 0, 0 },
    { (char*)"code", (getter)WebKit::_wrap_corehtmlappletelement__get_code, (setter)WebKit::_wrap_corehtmlappletelement__set_code, 0, 0 },
    { (char*)"codeBase", (getter)WebKit::_wrap_corehtmlappletelement__get_codeBase, (setter)WebKit::_wrap_corehtmlappletelement__set_codeBase, 0, 0 },
    { (char*)"height", (getter)WebKit::_wrap_corehtmlappletelement__get_height, (setter)WebKit::_wrap_corehtmlappletelement__set_height, 0, 0 },
    { (char*)"hspace", (getter)WebKit::_wrap_corehtmlappletelement__get_hspace, (setter)WebKit::_wrap_corehtmlappletelement__set_hspace, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corehtmlappletelement__get_name, (setter)WebKit::_wrap_corehtmlappletelement__set_name, 0, 0 },
    { (char*)"object", (getter)WebKit::_wrap_corehtmlappletelement__get_object, (setter)WebKit::_wrap_corehtmlappletelement__set_object, 0, 0 },
    { (char*)"vspace", (getter)WebKit::_wrap_corehtmlappletelement__get_vspace, (setter)WebKit::_wrap_corehtmlappletelement__set_vspace, 0, 0 },
    { (char*)"width", (getter)WebKit::_wrap_corehtmlappletelement__get_width, (setter)WebKit::_wrap_corehtmlappletelement__set_width, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLAppletElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLAppletElement* cobj = coreHTMLAppletElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLAppletElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLAppletElement",                   /* tp_name */
    sizeof(PyDOMHTMLAppletElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLAppletElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlappletelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLAppletElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLAreaElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLAreaElement_init(HTMLAreaElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlareaelement__get_accessKey(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::accesskeyAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlareaelement__set_accessKey(PyObject *self, PyObject *args, void *closure)
{
    char *accessKey;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlareaelement__set_accessKey", &accessKey))
        return -1;
    WTF::String cvt_accessKey = WTF::String::fromUTF8((const char*)accessKey);
    coreHTMLAreaElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::accesskeyAttr, cvt_accessKey);

    return 0;
}

static PyObject *
_wrap_corehtmlareaelement__get_alt(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::altAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlareaelement__set_alt(PyObject *self, PyObject *args, void *closure)
{
    char *alt;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlareaelement__set_alt", &alt))
        return -1;
    WTF::String cvt_alt = WTF::String::fromUTF8((const char*)alt);
    coreHTMLAreaElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::altAttr, cvt_alt);

    return 0;
}

static PyObject *
_wrap_corehtmlareaelement__get_coords(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::coordsAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlareaelement__set_coords(PyObject *self, PyObject *args, void *closure)
{
    char *coords;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlareaelement__set_coords", &coords))
        return -1;
    WTF::String cvt_coords = WTF::String::fromUTF8((const char*)coords);
    coreHTMLAreaElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::coordsAttr, cvt_coords);

    return 0;
}

static PyObject *
_wrap_corehtmlareaelement__get_href(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::hrefAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlareaelement__set_href(PyObject *self, PyObject *args, void *closure)
{
    char *href;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlareaelement__set_href", &href))
        return -1;
    WTF::String cvt_href = WTF::String::fromUTF8((const char*)href);
    coreHTMLAreaElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::hrefAttr, cvt_href);

    return 0;
}

static PyObject *
_wrap_corehtmlareaelement__get_noHref(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::nohrefAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlareaelement__set_noHref(PyObject *self, PyObject *args, void *closure)
{
    int noHref;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlareaelement__set_noHref", &noHref))
        return -1;
    bool cvt_noHref = (bool)noHref;
    coreHTMLAreaElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::nohrefAttr, cvt_noHref);

    return 0;
}

static PyObject *
_wrap_corehtmlareaelement__get_shape(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::shapeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlareaelement__set_shape(PyObject *self, PyObject *args, void *closure)
{
    char *shape;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlareaelement__set_shape", &shape))
        return -1;
    WTF::String cvt_shape = WTF::String::fromUTF8((const char*)shape);
    coreHTMLAreaElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::shapeAttr, cvt_shape);

    return 0;
}

static PyObject *
_wrap_corehtmlareaelement__get_target(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::targetAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlareaelement__set_target(PyObject *self, PyObject *args, void *closure)
{
    char *target;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlareaelement__set_target", &target))
        return -1;
    WTF::String cvt_target = WTF::String::fromUTF8((const char*)target);
    coreHTMLAreaElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::targetAttr, cvt_target);

    return 0;
}

static PyObject *
_wrap_corehtmlareaelement__get_hash(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->hash();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlareaelement__get_host(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->host();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlareaelement__get_hostname(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->hostname();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlareaelement__get_pathname(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->pathname();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlareaelement__get_port(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->port();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlareaelement__get_protocol(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->protocol();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlareaelement__get_search(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLAreaElement((PyDOMObject*)(self))->search();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlareaelement_getsets[] = {
    { (char*)"accessKey", (getter)WebKit::_wrap_corehtmlareaelement__get_accessKey, (setter)WebKit::_wrap_corehtmlareaelement__set_accessKey, 0, 0 },
    { (char*)"alt", (getter)WebKit::_wrap_corehtmlareaelement__get_alt, (setter)WebKit::_wrap_corehtmlareaelement__set_alt, 0, 0 },
    { (char*)"coords", (getter)WebKit::_wrap_corehtmlareaelement__get_coords, (setter)WebKit::_wrap_corehtmlareaelement__set_coords, 0, 0 },
    { (char*)"href", (getter)WebKit::_wrap_corehtmlareaelement__get_href, (setter)WebKit::_wrap_corehtmlareaelement__set_href, 0, 0 },
    { (char*)"noHref", (getter)WebKit::_wrap_corehtmlareaelement__get_noHref, (setter)WebKit::_wrap_corehtmlareaelement__set_noHref, 0, 0 },
    { (char*)"shape", (getter)WebKit::_wrap_corehtmlareaelement__get_shape, (setter)WebKit::_wrap_corehtmlareaelement__set_shape, 0, 0 },
    { (char*)"target", (getter)WebKit::_wrap_corehtmlareaelement__get_target, (setter)WebKit::_wrap_corehtmlareaelement__set_target, 0, 0 },
    { (char*)"hash", (getter)WebKit::_wrap_corehtmlareaelement__get_hash, (setter)0, 0, 0 },
    { (char*)"host", (getter)WebKit::_wrap_corehtmlareaelement__get_host, (setter)0, 0, 0 },
    { (char*)"hostname", (getter)WebKit::_wrap_corehtmlareaelement__get_hostname, (setter)0, 0, 0 },
    { (char*)"pathname", (getter)WebKit::_wrap_corehtmlareaelement__get_pathname, (setter)0, 0, 0 },
    { (char*)"port", (getter)WebKit::_wrap_corehtmlareaelement__get_port, (setter)0, 0, 0 },
    { (char*)"protocol", (getter)WebKit::_wrap_corehtmlareaelement__get_protocol, (setter)0, 0, 0 },
    { (char*)"search", (getter)WebKit::_wrap_corehtmlareaelement__get_search, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLAreaElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLAreaElement* cobj = coreHTMLAreaElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLAreaElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLAreaElement",                   /* tp_name */
    sizeof(PyDOMHTMLAreaElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLAreaElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlareaelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLAreaElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLMediaElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLMediaElement_init(HTMLMediaElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLMediaElement_canPlayType(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", NULL };
    char *type, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLMediaElement.canPlayType", kwlist, &type))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    
    ret = coreHTMLMediaElement(self)->canPlayType(cvt_type);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLMediaElement_methods[] = {
    { "canPlayType", (PyCFunction)WebKit::_wrap_HTMLMediaElement_canPlayType, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmlmediaelement__get_error(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::MediaError* _ret;

    _ret = WTF::getPtr(coreHTMLMediaElement((PyDOMObject*)(self))->error());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlmediaelement__get_src(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::srcAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlmediaelement__set_src(PyObject *self, PyObject *args, void *closure)
{
    char *src;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlmediaelement__set_src", &src))
        return -1;
    WTF::String cvt_src = WTF::String::fromUTF8((const char*)src);
    coreHTMLMediaElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::srcAttr, cvt_src);

    return 0;
}

static PyObject *
_wrap_corehtmlmediaelement__get_currentSrc(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->currentSrc();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlmediaelement__get_networkState(PyObject *self, void *closure)
{
    int ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->networkState();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_corehtmlmediaelement__get_preload(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->preload();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlmediaelement__set_preload(PyObject *self, PyObject *args, void *closure)
{
    char *preload;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlmediaelement__set_preload", &preload))
        return -1;
    WTF::String cvt_preload = WTF::String::fromUTF8((const char*)preload);
    coreHTMLMediaElement((PyDOMObject*)(self))->setPreload(cvt_preload);

    return 0;
}

static PyObject *
_wrap_corehtmlmediaelement__get_buffered(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::TimeRanges* _ret;

    _ret = WTF::getPtr(coreHTMLMediaElement((PyDOMObject*)(self))->buffered());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlmediaelement__get_readyState(PyObject *self, void *closure)
{
    int ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->readyState();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_corehtmlmediaelement__get_seeking(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->seeking();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corehtmlmediaelement__get_currentTime(PyObject *self, void *closure)
{
    double ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->currentTime();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corehtmlmediaelement__set_currentTime(PyObject *self, PyObject *args, void *closure)
{
    double currentTime;

    if (!PyArg_Parse(args,"d:_wrap_corehtmlmediaelement__set_currentTime", &currentTime))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreHTMLMediaElement((PyDOMObject*)(self))->setCurrentTime(currentTime, ec);

    return 0;
}

static PyObject *
_wrap_corehtmlmediaelement__get_startTime(PyObject *self, void *closure)
{
    double ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->startTime();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_corehtmlmediaelement__get_duration(PyObject *self, void *closure)
{
    double ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->duration();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_corehtmlmediaelement__get_paused(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->paused();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corehtmlmediaelement__get_defaultPlaybackRate(PyObject *self, void *closure)
{
    double ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->defaultPlaybackRate();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corehtmlmediaelement__set_defaultPlaybackRate(PyObject *self, PyObject *args, void *closure)
{
    double defaultPlaybackRate;

    if (!PyArg_Parse(args,"d:_wrap_corehtmlmediaelement__set_defaultPlaybackRate", &defaultPlaybackRate))
        return -1;
    coreHTMLMediaElement((PyDOMObject*)(self))->setDefaultPlaybackRate(defaultPlaybackRate);

    return 0;
}

static PyObject *
_wrap_corehtmlmediaelement__get_playbackRate(PyObject *self, void *closure)
{
    double ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->playbackRate();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corehtmlmediaelement__set_playbackRate(PyObject *self, PyObject *args, void *closure)
{
    double playbackRate;

    if (!PyArg_Parse(args,"d:_wrap_corehtmlmediaelement__set_playbackRate", &playbackRate))
        return -1;
    coreHTMLMediaElement((PyDOMObject*)(self))->setPlaybackRate(playbackRate);

    return 0;
}

static PyObject *
_wrap_corehtmlmediaelement__get_played(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::TimeRanges* _ret;

    _ret = WTF::getPtr(coreHTMLMediaElement((PyDOMObject*)(self))->played());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlmediaelement__get_seekable(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::TimeRanges* _ret;

    _ret = WTF::getPtr(coreHTMLMediaElement((PyDOMObject*)(self))->seekable());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlmediaelement__get_ended(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->ended();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corehtmlmediaelement__get_autoplay(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::autoplayAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlmediaelement__set_autoplay(PyObject *self, PyObject *args, void *closure)
{
    int autoplay;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlmediaelement__set_autoplay", &autoplay))
        return -1;
    bool cvt_autoplay = (bool)autoplay;
    coreHTMLMediaElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::autoplayAttr, cvt_autoplay);

    return 0;
}

static PyObject *
_wrap_corehtmlmediaelement__get_loop(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::loopAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlmediaelement__set_loop(PyObject *self, PyObject *args, void *closure)
{
    int loop;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlmediaelement__set_loop", &loop))
        return -1;
    bool cvt_loop = (bool)loop;
    coreHTMLMediaElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::loopAttr, cvt_loop);

    return 0;
}

static PyObject *
_wrap_corehtmlmediaelement__get_controls(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->controls();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlmediaelement__set_controls(PyObject *self, PyObject *args, void *closure)
{
    int controls;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlmediaelement__set_controls", &controls))
        return -1;
    bool cvt_controls = (bool)controls;
    coreHTMLMediaElement((PyDOMObject*)(self))->setControls(cvt_controls);

    return 0;
}

static PyObject *
_wrap_corehtmlmediaelement__get_volume(PyObject *self, void *closure)
{
    double ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->volume();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corehtmlmediaelement__set_volume(PyObject *self, PyObject *args, void *closure)
{
    double volume;

    if (!PyArg_Parse(args,"d:_wrap_corehtmlmediaelement__set_volume", &volume))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreHTMLMediaElement((PyDOMObject*)(self))->setVolume(volume, ec);

    return 0;
}

static PyObject *
_wrap_corehtmlmediaelement__get_muted(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->muted();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlmediaelement__set_muted(PyObject *self, PyObject *args, void *closure)
{
    int muted;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlmediaelement__set_muted", &muted))
        return -1;
    bool cvt_muted = (bool)muted;
    coreHTMLMediaElement((PyDOMObject*)(self))->setMuted(cvt_muted);

    return 0;
}

static PyObject *
_wrap_corehtmlmediaelement__get_webkitPreservesPitch(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->webkitPreservesPitch();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlmediaelement__set_webkitPreservesPitch(PyObject *self, PyObject *args, void *closure)
{
    int webkitPreservesPitch;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlmediaelement__set_webkitPreservesPitch", &webkitPreservesPitch))
        return -1;
    bool cvt_webkitPreservesPitch = (bool)webkitPreservesPitch;
    coreHTMLMediaElement((PyDOMObject*)(self))->setWebkitPreservesPitch(cvt_webkitPreservesPitch);

    return 0;
}

static PyObject *
_wrap_corehtmlmediaelement__get_webkitHasClosedCaptions(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->webkitHasClosedCaptions();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corehtmlmediaelement__get_webkitClosedCaptionsVisible(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLMediaElement((PyDOMObject*)(self))->webkitClosedCaptionsVisible();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlmediaelement__set_webkitClosedCaptionsVisible(PyObject *self, PyObject *args, void *closure)
{
    int webkitClosedCaptionsVisible;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlmediaelement__set_webkitClosedCaptionsVisible", &webkitClosedCaptionsVisible))
        return -1;
    bool cvt_webkitClosedCaptionsVisible = (bool)webkitClosedCaptionsVisible;
    coreHTMLMediaElement((PyDOMObject*)(self))->setWebkitClosedCaptionsVisible(cvt_webkitClosedCaptionsVisible);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlmediaelement_getsets[] = {
    { (char*)"error", (getter)WebKit::_wrap_corehtmlmediaelement__get_error, (setter)0, 0, 0 },
    { (char*)"src", (getter)WebKit::_wrap_corehtmlmediaelement__get_src, (setter)WebKit::_wrap_corehtmlmediaelement__set_src, 0, 0 },
    { (char*)"currentSrc", (getter)WebKit::_wrap_corehtmlmediaelement__get_currentSrc, (setter)0, 0, 0 },
    { (char*)"networkState", (getter)WebKit::_wrap_corehtmlmediaelement__get_networkState, (setter)0, 0, 0 },
    { (char*)"preload", (getter)WebKit::_wrap_corehtmlmediaelement__get_preload, (setter)WebKit::_wrap_corehtmlmediaelement__set_preload, 0, 0 },
    { (char*)"buffered", (getter)WebKit::_wrap_corehtmlmediaelement__get_buffered, (setter)0, 0, 0 },
    { (char*)"readyState", (getter)WebKit::_wrap_corehtmlmediaelement__get_readyState, (setter)0, 0, 0 },
    { (char*)"seeking", (getter)WebKit::_wrap_corehtmlmediaelement__get_seeking, (setter)0, 0, 0 },
    { (char*)"currentTime", (getter)WebKit::_wrap_corehtmlmediaelement__get_currentTime, (setter)WebKit::_wrap_corehtmlmediaelement__set_currentTime, 0, 0 },
    { (char*)"startTime", (getter)WebKit::_wrap_corehtmlmediaelement__get_startTime, (setter)0, 0, 0 },
    { (char*)"duration", (getter)WebKit::_wrap_corehtmlmediaelement__get_duration, (setter)0, 0, 0 },
    { (char*)"paused", (getter)WebKit::_wrap_corehtmlmediaelement__get_paused, (setter)0, 0, 0 },
    { (char*)"defaultPlaybackRate", (getter)WebKit::_wrap_corehtmlmediaelement__get_defaultPlaybackRate, (setter)WebKit::_wrap_corehtmlmediaelement__set_defaultPlaybackRate, 0, 0 },
    { (char*)"playbackRate", (getter)WebKit::_wrap_corehtmlmediaelement__get_playbackRate, (setter)WebKit::_wrap_corehtmlmediaelement__set_playbackRate, 0, 0 },
    { (char*)"played", (getter)WebKit::_wrap_corehtmlmediaelement__get_played, (setter)0, 0, 0 },
    { (char*)"seekable", (getter)WebKit::_wrap_corehtmlmediaelement__get_seekable, (setter)0, 0, 0 },
    { (char*)"ended", (getter)WebKit::_wrap_corehtmlmediaelement__get_ended, (setter)0, 0, 0 },
    { (char*)"autoplay", (getter)WebKit::_wrap_corehtmlmediaelement__get_autoplay, (setter)WebKit::_wrap_corehtmlmediaelement__set_autoplay, 0, 0 },
    { (char*)"loop", (getter)WebKit::_wrap_corehtmlmediaelement__get_loop, (setter)WebKit::_wrap_corehtmlmediaelement__set_loop, 0, 0 },
    { (char*)"controls", (getter)WebKit::_wrap_corehtmlmediaelement__get_controls, (setter)WebKit::_wrap_corehtmlmediaelement__set_controls, 0, 0 },
    { (char*)"volume", (getter)WebKit::_wrap_corehtmlmediaelement__get_volume, (setter)WebKit::_wrap_corehtmlmediaelement__set_volume, 0, 0 },
    { (char*)"muted", (getter)WebKit::_wrap_corehtmlmediaelement__get_muted, (setter)WebKit::_wrap_corehtmlmediaelement__set_muted, 0, 0 },
    { (char*)"webkitPreservesPitch", (getter)WebKit::_wrap_corehtmlmediaelement__get_webkitPreservesPitch, (setter)WebKit::_wrap_corehtmlmediaelement__set_webkitPreservesPitch, 0, 0 },
    { (char*)"webkitHasClosedCaptions", (getter)WebKit::_wrap_corehtmlmediaelement__get_webkitHasClosedCaptions, (setter)0, 0, 0 },
    { (char*)"webkitClosedCaptionsVisible", (getter)WebKit::_wrap_corehtmlmediaelement__get_webkitClosedCaptionsVisible, (setter)WebKit::_wrap_corehtmlmediaelement__set_webkitClosedCaptionsVisible, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLMediaElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLMediaElement* cobj = coreHTMLMediaElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLMediaElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLMediaElement",                   /* tp_name */
    sizeof(PyDOMHTMLMediaElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLMediaElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLMediaElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlmediaelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLMediaElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLAudioElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLAudioElement_init(HTMLAudioElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLMediaElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
void dealloc_HTMLAudioElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLAudioElement* cobj = coreHTMLAudioElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLAudioElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLAudioElement",                   /* tp_name */
    sizeof(PyDOMHTMLAudioElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLAudioElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLAudioElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLBaseElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLBaseElement_init(HTMLBaseElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlbaseelement__get_href(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLBaseElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::hrefAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbaseelement__set_href(PyObject *self, PyObject *args, void *closure)
{
    char *href;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbaseelement__set_href", &href))
        return -1;
    WTF::String cvt_href = WTF::String::fromUTF8((const char*)href);
    coreHTMLBaseElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::hrefAttr, cvt_href);

    return 0;
}

static PyObject *
_wrap_corehtmlbaseelement__get_target(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLBaseElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::targetAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbaseelement__set_target(PyObject *self, PyObject *args, void *closure)
{
    char *target;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbaseelement__set_target", &target))
        return -1;
    WTF::String cvt_target = WTF::String::fromUTF8((const char*)target);
    coreHTMLBaseElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::targetAttr, cvt_target);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlbaseelement_getsets[] = {
    { (char*)"href", (getter)WebKit::_wrap_corehtmlbaseelement__get_href, (setter)WebKit::_wrap_corehtmlbaseelement__set_href, 0, 0 },
    { (char*)"target", (getter)WebKit::_wrap_corehtmlbaseelement__get_target, (setter)WebKit::_wrap_corehtmlbaseelement__set_target, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLBaseElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLBaseElement* cobj = coreHTMLBaseElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLBaseElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLBaseElement",                   /* tp_name */
    sizeof(PyDOMHTMLBaseElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLBaseElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlbaseelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLBaseElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLBaseFontElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLBaseFontElement_init(HTMLBaseFontElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlbasefontelement__get_color(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLBaseFontElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::colorAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbasefontelement__set_color(PyObject *self, PyObject *args, void *closure)
{
    char *color;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbasefontelement__set_color", &color))
        return -1;
    WTF::String cvt_color = WTF::String::fromUTF8((const char*)color);
    coreHTMLBaseFontElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::colorAttr, cvt_color);

    return 0;
}

static PyObject *
_wrap_corehtmlbasefontelement__get_face(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLBaseFontElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::faceAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbasefontelement__set_face(PyObject *self, PyObject *args, void *closure)
{
    char *face;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbasefontelement__set_face", &face))
        return -1;
    WTF::String cvt_face = WTF::String::fromUTF8((const char*)face);
    coreHTMLBaseFontElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::faceAttr, cvt_face);

    return 0;
}

static PyObject *
_wrap_corehtmlbasefontelement__get_size(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLBaseFontElement((PyDOMObject*)(self))->getIntegralAttribute(WebCore::HTMLNames::sizeAttr);
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlbasefontelement__set_size(PyObject *self, PyObject *args, void *closure)
{
    long size;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlbasefontelement__set_size", &size))
        return -1;
    coreHTMLBaseFontElement((PyDOMObject*)(self))->setIntegralAttribute(WebCore::HTMLNames::sizeAttr, size);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlbasefontelement_getsets[] = {
    { (char*)"color", (getter)WebKit::_wrap_corehtmlbasefontelement__get_color, (setter)WebKit::_wrap_corehtmlbasefontelement__set_color, 0, 0 },
    { (char*)"face", (getter)WebKit::_wrap_corehtmlbasefontelement__get_face, (setter)WebKit::_wrap_corehtmlbasefontelement__set_face, 0, 0 },
    { (char*)"size", (getter)WebKit::_wrap_corehtmlbasefontelement__get_size, (setter)WebKit::_wrap_corehtmlbasefontelement__set_size, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLBaseFontElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLBaseFontElement* cobj = coreHTMLBaseFontElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLBaseFontElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLBaseFontElement",                   /* tp_name */
    sizeof(PyDOMHTMLBaseFontElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLBaseFontElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlbasefontelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLBaseFontElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLBlockquoteElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLBlockquoteElement_init(HTMLBlockquoteElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlblockquoteelement__get_cite(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLBlockquoteElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::citeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlblockquoteelement__set_cite(PyObject *self, PyObject *args, void *closure)
{
    char *cite;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlblockquoteelement__set_cite", &cite))
        return -1;
    WTF::String cvt_cite = WTF::String::fromUTF8((const char*)cite);
    coreHTMLBlockquoteElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::citeAttr, cvt_cite);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlblockquoteelement_getsets[] = {
    { (char*)"cite", (getter)WebKit::_wrap_corehtmlblockquoteelement__get_cite, (setter)WebKit::_wrap_corehtmlblockquoteelement__set_cite, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLBlockquoteElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLBlockquoteElement* cobj = coreHTMLBlockquoteElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLBlockquoteElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLBlockquoteElement",                   /* tp_name */
    sizeof(PyDOMHTMLBlockquoteElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLBlockquoteElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlblockquoteelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLBlockquoteElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLBodyElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLBodyElement_init(HTMLBodyElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlbodyelement__get_aLink(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLBodyElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alinkAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_aLink(PyObject *self, PyObject *args, void *closure)
{
    char *aLink;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbodyelement__set_aLink", &aLink))
        return -1;
    WTF::String cvt_aLink = WTF::String::fromUTF8((const char*)aLink);
    coreHTMLBodyElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alinkAttr, cvt_aLink);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_background(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLBodyElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::backgroundAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_background(PyObject *self, PyObject *args, void *closure)
{
    char *background;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbodyelement__set_background", &background))
        return -1;
    WTF::String cvt_background = WTF::String::fromUTF8((const char*)background);
    coreHTMLBodyElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::backgroundAttr, cvt_background);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_bgColor(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLBodyElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::bgcolorAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_bgColor(PyObject *self, PyObject *args, void *closure)
{
    char *bgColor;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbodyelement__set_bgColor", &bgColor))
        return -1;
    WTF::String cvt_bgColor = WTF::String::fromUTF8((const char*)bgColor);
    coreHTMLBodyElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::bgcolorAttr, cvt_bgColor);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_link(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLBodyElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::linkAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_link(PyObject *self, PyObject *args, void *closure)
{
    char *link;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbodyelement__set_link", &link))
        return -1;
    WTF::String cvt_link = WTF::String::fromUTF8((const char*)link);
    coreHTMLBodyElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::linkAttr, cvt_link);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_text(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLBodyElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::textAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_text(PyObject *self, PyObject *args, void *closure)
{
    char *text;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbodyelement__set_text", &text))
        return -1;
    WTF::String cvt_text = WTF::String::fromUTF8((const char*)text);
    coreHTMLBodyElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::textAttr, cvt_text);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_vLink(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLBodyElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::vlinkAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_vLink(PyObject *self, PyObject *args, void *closure)
{
    char *vLink;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbodyelement__set_vLink", &vLink))
        return -1;
    WTF::String cvt_vLink = WTF::String::fromUTF8((const char*)vLink);
    coreHTMLBodyElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::vlinkAttr, cvt_vLink);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_onbeforeunload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLBodyElement((PyDOMObject*)(self))->onbeforeunload();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_onbeforeunload(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onbeforeunload;
    EventListener *onbeforeunload = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlbodyelement__set_onbeforeunload", &py_onbeforeunload))
        return -1;
    if (py_onbeforeunload)
        onbeforeunload = coreEventListener(py_onbeforeunload);
    coreHTMLBodyElement((PyDOMObject*)(self))->setOnbeforeunload((EventListener *) onbeforeunload);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_onhashchange(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLBodyElement((PyDOMObject*)(self))->onhashchange();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_onhashchange(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onhashchange;
    EventListener *onhashchange = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlbodyelement__set_onhashchange", &py_onhashchange))
        return -1;
    if (py_onhashchange)
        onhashchange = coreEventListener(py_onhashchange);
    coreHTMLBodyElement((PyDOMObject*)(self))->setOnhashchange((EventListener *) onhashchange);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_onmessage(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLBodyElement((PyDOMObject*)(self))->onmessage();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_onmessage(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmessage;
    EventListener *onmessage = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlbodyelement__set_onmessage", &py_onmessage))
        return -1;
    if (py_onmessage)
        onmessage = coreEventListener(py_onmessage);
    coreHTMLBodyElement((PyDOMObject*)(self))->setOnmessage((EventListener *) onmessage);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_onoffline(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLBodyElement((PyDOMObject*)(self))->onoffline();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_onoffline(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onoffline;
    EventListener *onoffline = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlbodyelement__set_onoffline", &py_onoffline))
        return -1;
    if (py_onoffline)
        onoffline = coreEventListener(py_onoffline);
    coreHTMLBodyElement((PyDOMObject*)(self))->setOnoffline((EventListener *) onoffline);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_ononline(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLBodyElement((PyDOMObject*)(self))->ononline();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_ononline(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ononline;
    EventListener *ononline = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlbodyelement__set_ononline", &py_ononline))
        return -1;
    if (py_ononline)
        ononline = coreEventListener(py_ononline);
    coreHTMLBodyElement((PyDOMObject*)(self))->setOnonline((EventListener *) ononline);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_onpopstate(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLBodyElement((PyDOMObject*)(self))->onpopstate();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_onpopstate(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onpopstate;
    EventListener *onpopstate = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlbodyelement__set_onpopstate", &py_onpopstate))
        return -1;
    if (py_onpopstate)
        onpopstate = coreEventListener(py_onpopstate);
    coreHTMLBodyElement((PyDOMObject*)(self))->setOnpopstate((EventListener *) onpopstate);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_onresize(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLBodyElement((PyDOMObject*)(self))->onresize();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_onresize(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onresize;
    EventListener *onresize = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlbodyelement__set_onresize", &py_onresize))
        return -1;
    if (py_onresize)
        onresize = coreEventListener(py_onresize);
    coreHTMLBodyElement((PyDOMObject*)(self))->setOnresize((EventListener *) onresize);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_onstorage(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLBodyElement((PyDOMObject*)(self))->onstorage();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_onstorage(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onstorage;
    EventListener *onstorage = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlbodyelement__set_onstorage", &py_onstorage))
        return -1;
    if (py_onstorage)
        onstorage = coreEventListener(py_onstorage);
    coreHTMLBodyElement((PyDOMObject*)(self))->setOnstorage((EventListener *) onstorage);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_onunload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLBodyElement((PyDOMObject*)(self))->onunload();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_onunload(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onunload;
    EventListener *onunload = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlbodyelement__set_onunload", &py_onunload))
        return -1;
    if (py_onunload)
        onunload = coreEventListener(py_onunload);
    coreHTMLBodyElement((PyDOMObject*)(self))->setOnunload((EventListener *) onunload);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_onblur(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLBodyElement((PyDOMObject*)(self))->onblur();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_onblur(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onblur;
    EventListener *onblur = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlbodyelement__set_onblur", &py_onblur))
        return -1;
    if (py_onblur)
        onblur = coreEventListener(py_onblur);
    coreHTMLBodyElement((PyDOMObject*)(self))->setOnblur((EventListener *) onblur);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_onerror(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLBodyElement((PyDOMObject*)(self))->onerror();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_onerror(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onerror;
    EventListener *onerror = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlbodyelement__set_onerror", &py_onerror))
        return -1;
    if (py_onerror)
        onerror = coreEventListener(py_onerror);
    coreHTMLBodyElement((PyDOMObject*)(self))->setOnerror((EventListener *) onerror);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_onfocus(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLBodyElement((PyDOMObject*)(self))->onfocus();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_onfocus(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onfocus;
    EventListener *onfocus = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlbodyelement__set_onfocus", &py_onfocus))
        return -1;
    if (py_onfocus)
        onfocus = coreEventListener(py_onfocus);
    coreHTMLBodyElement((PyDOMObject*)(self))->setOnfocus((EventListener *) onfocus);

    return 0;
}

static PyObject *
_wrap_corehtmlbodyelement__get_onload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLBodyElement((PyDOMObject*)(self))->onload();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbodyelement__set_onload(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onload;
    EventListener *onload = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlbodyelement__set_onload", &py_onload))
        return -1;
    if (py_onload)
        onload = coreEventListener(py_onload);
    coreHTMLBodyElement((PyDOMObject*)(self))->setOnload((EventListener *) onload);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlbodyelement_getsets[] = {
    { (char*)"aLink", (getter)WebKit::_wrap_corehtmlbodyelement__get_aLink, (setter)WebKit::_wrap_corehtmlbodyelement__set_aLink, 0, 0 },
    { (char*)"background", (getter)WebKit::_wrap_corehtmlbodyelement__get_background, (setter)WebKit::_wrap_corehtmlbodyelement__set_background, 0, 0 },
    { (char*)"bgColor", (getter)WebKit::_wrap_corehtmlbodyelement__get_bgColor, (setter)WebKit::_wrap_corehtmlbodyelement__set_bgColor, 0, 0 },
    { (char*)"link", (getter)WebKit::_wrap_corehtmlbodyelement__get_link, (setter)WebKit::_wrap_corehtmlbodyelement__set_link, 0, 0 },
    { (char*)"text", (getter)WebKit::_wrap_corehtmlbodyelement__get_text, (setter)WebKit::_wrap_corehtmlbodyelement__set_text, 0, 0 },
    { (char*)"vLink", (getter)WebKit::_wrap_corehtmlbodyelement__get_vLink, (setter)WebKit::_wrap_corehtmlbodyelement__set_vLink, 0, 0 },
    { (char*)"onbeforeunload", (getter)WebKit::_wrap_corehtmlbodyelement__get_onbeforeunload, (setter)WebKit::_wrap_corehtmlbodyelement__set_onbeforeunload, 0, 0 },
    { (char*)"onhashchange", (getter)WebKit::_wrap_corehtmlbodyelement__get_onhashchange, (setter)WebKit::_wrap_corehtmlbodyelement__set_onhashchange, 0, 0 },
    { (char*)"onmessage", (getter)WebKit::_wrap_corehtmlbodyelement__get_onmessage, (setter)WebKit::_wrap_corehtmlbodyelement__set_onmessage, 0, 0 },
    { (char*)"onoffline", (getter)WebKit::_wrap_corehtmlbodyelement__get_onoffline, (setter)WebKit::_wrap_corehtmlbodyelement__set_onoffline, 0, 0 },
    { (char*)"ononline", (getter)WebKit::_wrap_corehtmlbodyelement__get_ononline, (setter)WebKit::_wrap_corehtmlbodyelement__set_ononline, 0, 0 },
    { (char*)"onpopstate", (getter)WebKit::_wrap_corehtmlbodyelement__get_onpopstate, (setter)WebKit::_wrap_corehtmlbodyelement__set_onpopstate, 0, 0 },
    { (char*)"onresize", (getter)WebKit::_wrap_corehtmlbodyelement__get_onresize, (setter)WebKit::_wrap_corehtmlbodyelement__set_onresize, 0, 0 },
    { (char*)"onstorage", (getter)WebKit::_wrap_corehtmlbodyelement__get_onstorage, (setter)WebKit::_wrap_corehtmlbodyelement__set_onstorage, 0, 0 },
    { (char*)"onunload", (getter)WebKit::_wrap_corehtmlbodyelement__get_onunload, (setter)WebKit::_wrap_corehtmlbodyelement__set_onunload, 0, 0 },
    { (char*)"onblur", (getter)WebKit::_wrap_corehtmlbodyelement__get_onblur, (setter)WebKit::_wrap_corehtmlbodyelement__set_onblur, 0, 0 },
    { (char*)"onerror", (getter)WebKit::_wrap_corehtmlbodyelement__get_onerror, (setter)WebKit::_wrap_corehtmlbodyelement__set_onerror, 0, 0 },
    { (char*)"onfocus", (getter)WebKit::_wrap_corehtmlbodyelement__get_onfocus, (setter)WebKit::_wrap_corehtmlbodyelement__set_onfocus, 0, 0 },
    { (char*)"onload", (getter)WebKit::_wrap_corehtmlbodyelement__get_onload, (setter)WebKit::_wrap_corehtmlbodyelement__set_onload, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLBodyElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLBodyElement* cobj = coreHTMLBodyElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLBodyElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLBodyElement",                   /* tp_name */
    sizeof(PyDOMHTMLBodyElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLBodyElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlbodyelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLBodyElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLBRElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLBRElement_init(HTMLBRElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlbrelement__get_clear(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLBRElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::clearAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbrelement__set_clear(PyObject *self, PyObject *args, void *closure)
{
    char *clear;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbrelement__set_clear", &clear))
        return -1;
    WTF::String cvt_clear = WTF::String::fromUTF8((const char*)clear);
    coreHTMLBRElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::clearAttr, cvt_clear);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlbrelement_getsets[] = {
    { (char*)"clear", (getter)WebKit::_wrap_corehtmlbrelement__get_clear, (setter)WebKit::_wrap_corehtmlbrelement__set_clear, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLBRElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLBRElement* cobj = coreHTMLBRElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLBRElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLBRElement",                   /* tp_name */
    sizeof(PyDOMHTMLBRElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLBRElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlbrelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLBRElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLButtonElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLButtonElement_init(HTMLButtonElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLButtonElement_checkValidity(PyDOMObject *self)
{
    bool ret;

    
    ret = coreHTMLButtonElement(self)->checkValidity();
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_HTMLButtonElement_setCustomValidity(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"error", NULL };
    char *error;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLButtonElement.setCustomValidity", kwlist, &error))
        return NULL;
    WTF::String cvt_error = WTF::String::fromUTF8((const char*)error);
    
    coreHTMLButtonElement(self)->setCustomValidity(cvt_error);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLButtonElement_click(PyDOMObject *self)
{
    
    coreHTMLButtonElement(self)->click();
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLButtonElement_methods[] = {
    { "checkValidity", (PyCFunction)WebKit::_wrap_HTMLButtonElement_checkValidity, METH_NOARGS,
      NULL },
    { "setCustomValidity", (PyCFunction)WebKit::_wrap_HTMLButtonElement_setCustomValidity, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "click", (PyCFunction)WebKit::_wrap_HTMLButtonElement_click, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmlbuttonelement__get_form(PyObject *self, void *closure)
{
    WebCore::HTMLFormElement* _ret;
    PyObject *py_ret;

    _ret = coreHTMLButtonElement((PyDOMObject*)(self))->form();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlbuttonelement__get_formNoValidate(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLButtonElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::formnovalidateAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlbuttonelement__set_formNoValidate(PyObject *self, PyObject *args, void *closure)
{
    int formNoValidate;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlbuttonelement__set_formNoValidate", &formNoValidate))
        return -1;
    bool cvt_formNoValidate = (bool)formNoValidate;
    coreHTMLButtonElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::formnovalidateAttr, cvt_formNoValidate);

    return 0;
}

static PyObject *
_wrap_corehtmlbuttonelement__get_validity(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::ValidityState* _ret;

    _ret = coreHTMLButtonElement((PyDOMObject*)(self))->validity();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlbuttonelement__get_accessKey(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLButtonElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::accesskeyAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbuttonelement__set_accessKey(PyObject *self, PyObject *args, void *closure)
{
    char *accessKey;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbuttonelement__set_accessKey", &accessKey))
        return -1;
    WTF::String cvt_accessKey = WTF::String::fromUTF8((const char*)accessKey);
    coreHTMLButtonElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::accesskeyAttr, cvt_accessKey);

    return 0;
}

static PyObject *
_wrap_corehtmlbuttonelement__get_disabled(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLButtonElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::disabledAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlbuttonelement__set_disabled(PyObject *self, PyObject *args, void *closure)
{
    int disabled;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlbuttonelement__set_disabled", &disabled))
        return -1;
    bool cvt_disabled = (bool)disabled;
    coreHTMLButtonElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, cvt_disabled);

    return 0;
}

static PyObject *
_wrap_corehtmlbuttonelement__get_autofocus(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLButtonElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::autofocusAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlbuttonelement__set_autofocus(PyObject *self, PyObject *args, void *closure)
{
    int autofocus;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlbuttonelement__set_autofocus", &autofocus))
        return -1;
    bool cvt_autofocus = (bool)autofocus;
    coreHTMLButtonElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::autofocusAttr, cvt_autofocus);

    return 0;
}

static PyObject *
_wrap_corehtmlbuttonelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLButtonElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::nameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbuttonelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbuttonelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLButtonElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::nameAttr, cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmlbuttonelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLButtonElement((PyDOMObject*)(self))->type();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlbuttonelement__get_value(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLButtonElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::valueAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlbuttonelement__set_value(PyObject *self, PyObject *args, void *closure)
{
    char *value;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlbuttonelement__set_value", &value))
        return -1;
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    coreHTMLButtonElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::valueAttr, cvt_value);

    return 0;
}

static PyObject *
_wrap_corehtmlbuttonelement__get_willValidate(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLButtonElement((PyDOMObject*)(self))->willValidate();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corehtmlbuttonelement__get_validationMessage(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLButtonElement((PyDOMObject*)(self))->validationMessage();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlbuttonelement__get_labels(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    _ret = WTF::getPtr(coreHTMLButtonElement((PyDOMObject*)(self))->labels());
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlbuttonelement_getsets[] = {
    { (char*)"form", (getter)WebKit::_wrap_corehtmlbuttonelement__get_form, (setter)0, 0, 0 },
    { (char*)"formNoValidate", (getter)WebKit::_wrap_corehtmlbuttonelement__get_formNoValidate, (setter)WebKit::_wrap_corehtmlbuttonelement__set_formNoValidate, 0, 0 },
    { (char*)"validity", (getter)WebKit::_wrap_corehtmlbuttonelement__get_validity, (setter)0, 0, 0 },
    { (char*)"accessKey", (getter)WebKit::_wrap_corehtmlbuttonelement__get_accessKey, (setter)WebKit::_wrap_corehtmlbuttonelement__set_accessKey, 0, 0 },
    { (char*)"disabled", (getter)WebKit::_wrap_corehtmlbuttonelement__get_disabled, (setter)WebKit::_wrap_corehtmlbuttonelement__set_disabled, 0, 0 },
    { (char*)"autofocus", (getter)WebKit::_wrap_corehtmlbuttonelement__get_autofocus, (setter)WebKit::_wrap_corehtmlbuttonelement__set_autofocus, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corehtmlbuttonelement__get_name, (setter)WebKit::_wrap_corehtmlbuttonelement__set_name, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_corehtmlbuttonelement__get_type, (setter)0, 0, 0 },
    { (char*)"value", (getter)WebKit::_wrap_corehtmlbuttonelement__get_value, (setter)WebKit::_wrap_corehtmlbuttonelement__set_value, 0, 0 },
    { (char*)"willValidate", (getter)WebKit::_wrap_corehtmlbuttonelement__get_willValidate, (setter)0, 0, 0 },
    { (char*)"validationMessage", (getter)WebKit::_wrap_corehtmlbuttonelement__get_validationMessage, (setter)0, 0, 0 },
    { (char*)"labels", (getter)WebKit::_wrap_corehtmlbuttonelement__get_labels, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLButtonElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLButtonElement* cobj = coreHTMLButtonElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLButtonElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLButtonElement",                   /* tp_name */
    sizeof(PyDOMHTMLButtonElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLButtonElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLButtonElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlbuttonelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLButtonElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLCanvasElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLCanvasElement_init(HTMLCanvasElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLCanvasElement_toDataURL(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", NULL };
    char *type, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLCanvasElement.toDataURL", kwlist, &type))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    WebCore::ExceptionCode ec = 0;
    
    ret = coreHTMLCanvasElement(self)->toDataURL(cvt_type, ec);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLCanvasElement_methods[] = {
    { "toDataURL", (PyCFunction)WebKit::_wrap_HTMLCanvasElement_toDataURL, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmlcanvaselement__get_width(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLCanvasElement((PyDOMObject*)(self))->width();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlcanvaselement__set_width(PyObject *self, PyObject *args, void *closure)
{
    long width;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlcanvaselement__set_width", &width))
        return -1;
    coreHTMLCanvasElement((PyDOMObject*)(self))->setWidth(width);

    return 0;
}

static PyObject *
_wrap_corehtmlcanvaselement__get_height(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLCanvasElement((PyDOMObject*)(self))->height();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlcanvaselement__set_height(PyObject *self, PyObject *args, void *closure)
{
    long height;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlcanvaselement__set_height", &height))
        return -1;
    coreHTMLCanvasElement((PyDOMObject*)(self))->setHeight(height);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlcanvaselement_getsets[] = {
    { (char*)"width", (getter)WebKit::_wrap_corehtmlcanvaselement__get_width, (setter)WebKit::_wrap_corehtmlcanvaselement__set_width, 0, 0 },
    { (char*)"height", (getter)WebKit::_wrap_corehtmlcanvaselement__get_height, (setter)WebKit::_wrap_corehtmlcanvaselement__set_height, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLCanvasElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLCanvasElement* cobj = coreHTMLCanvasElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLCanvasElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLCanvasElement",                   /* tp_name */
    sizeof(PyDOMHTMLCanvasElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLCanvasElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLCanvasElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlcanvaselement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLCanvasElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLCollection ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLCollection_init(HTMLCollection *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLCollection_item(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    PyObject *py_ret;
    unsigned long index;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.HTMLCollection.item", kwlist, &index))
        return NULL;
    
    _ret = coreHTMLCollection(self)->item(index);
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_HTMLCollection_namedItem(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name;
    PyObject *py_ret;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLCollection.namedItem", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    
    _ret = coreHTMLCollection(self)->namedItem(cvt_name);
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLCollection_methods[] = {
    { "item", (PyCFunction)WebKit::_wrap_HTMLCollection_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "namedItem", (PyCFunction)WebKit::_wrap_HTMLCollection_namedItem, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmlcollection__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreHTMLCollection((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlcollection_getsets[] = {
    { (char*)"length", (getter)WebKit::_wrap_corehtmlcollection__get_length, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLCollection(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLCollection* cobj = coreHTMLCollection(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLCollection_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLCollection",                   /* tp_name */
    sizeof(PyDOMHTMLCollection),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLCollection,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLCollection_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlcollection_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLCollection_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLDataListElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLDataListElement_init(HTMLDataListElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmldatalistelement__get_options(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreHTMLDataListElement((PyDOMObject*)(self))->options());
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmldatalistelement_getsets[] = {
    { (char*)"options", (getter)WebKit::_wrap_corehtmldatalistelement__get_options, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLDataListElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLDataListElement* cobj = coreHTMLDataListElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLDataListElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLDataListElement",                   /* tp_name */
    sizeof(PyDOMHTMLDataListElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLDataListElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmldatalistelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLDataListElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLDirectoryElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLDirectoryElement_init(HTMLDirectoryElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmldirectoryelement__get_compact(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLDirectoryElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::compactAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmldirectoryelement__set_compact(PyObject *self, PyObject *args, void *closure)
{
    int compact;

    if (!PyArg_Parse(args,"i:_wrap_corehtmldirectoryelement__set_compact", &compact))
        return -1;
    bool cvt_compact = (bool)compact;
    coreHTMLDirectoryElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::compactAttr, cvt_compact);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmldirectoryelement_getsets[] = {
    { (char*)"compact", (getter)WebKit::_wrap_corehtmldirectoryelement__get_compact, (setter)WebKit::_wrap_corehtmldirectoryelement__set_compact, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLDirectoryElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLDirectoryElement* cobj = coreHTMLDirectoryElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLDirectoryElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLDirectoryElement",                   /* tp_name */
    sizeof(PyDOMHTMLDirectoryElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLDirectoryElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmldirectoryelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLDirectoryElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLDivElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLDivElement_init(HTMLDivElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmldivelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLDivElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmldivelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmldivelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLDivElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmldivelement_getsets[] = {
    { (char*)"align", (getter)WebKit::_wrap_corehtmldivelement__get_align, (setter)WebKit::_wrap_corehtmldivelement__set_align, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLDivElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLDivElement* cobj = coreHTMLDivElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLDivElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLDivElement",                   /* tp_name */
    sizeof(PyDOMHTMLDivElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLDivElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmldivelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLDivElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLDListElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLDListElement_init(HTMLDListElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmldlistelement__get_compact(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLDListElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::compactAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmldlistelement__set_compact(PyObject *self, PyObject *args, void *closure)
{
    int compact;

    if (!PyArg_Parse(args,"i:_wrap_corehtmldlistelement__set_compact", &compact))
        return -1;
    bool cvt_compact = (bool)compact;
    coreHTMLDListElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::compactAttr, cvt_compact);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmldlistelement_getsets[] = {
    { (char*)"compact", (getter)WebKit::_wrap_corehtmldlistelement__get_compact, (setter)WebKit::_wrap_corehtmldlistelement__set_compact, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLDListElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLDListElement* cobj = coreHTMLDListElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLDListElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLDListElement",                   /* tp_name */
    sizeof(PyDOMHTMLDListElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLDListElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmldlistelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLDListElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLDocument ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLDocument_init(HTMLDocument *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMDocument_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLDocument_open(PyDOMObject *self)
{
    
    coreHTMLDocument(self)->open();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLDocument_close(PyDOMObject *self)
{
    
    coreHTMLDocument(self)->close();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLDocument_write(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"text", NULL };
    char *text;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLDocument.write", kwlist, &text))
        return NULL;
    WTF::String cvt_text = WTF::String::fromUTF8((const char*)text);
    
    coreHTMLDocument(self)->write(cvt_text);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLDocument_writeln(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"text", NULL };
    char *text;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLDocument.writeln", kwlist, &text))
        return NULL;
    WTF::String cvt_text = WTF::String::fromUTF8((const char*)text);
    
    coreHTMLDocument(self)->writeln(cvt_text);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLDocument_clear(PyDOMObject *self)
{
    
    coreHTMLDocument(self)->clear();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLDocument_captureEvents(PyDOMObject *self)
{
    
    coreHTMLDocument(self)->captureEvents();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLDocument_releaseEvents(PyDOMObject *self)
{
    
    coreHTMLDocument(self)->releaseEvents();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLDocument_hasFocus(PyDOMObject *self)
{
    bool ret;

    
    ret = coreHTMLDocument(self)->hasFocus();
    
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLDocument_methods[] = {
    { "open", (PyCFunction)WebKit::_wrap_HTMLDocument_open, METH_NOARGS,
      NULL },
    { "close", (PyCFunction)WebKit::_wrap_HTMLDocument_close, METH_NOARGS,
      NULL },
    { "write", (PyCFunction)WebKit::_wrap_HTMLDocument_write, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "writeln", (PyCFunction)WebKit::_wrap_HTMLDocument_writeln, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "clear", (PyCFunction)WebKit::_wrap_HTMLDocument_clear, METH_NOARGS,
      NULL },
    { "captureEvents", (PyCFunction)WebKit::_wrap_HTMLDocument_captureEvents, METH_NOARGS,
      NULL },
    { "releaseEvents", (PyCFunction)WebKit::_wrap_HTMLDocument_releaseEvents, METH_NOARGS,
      NULL },
    { "hasFocus", (PyCFunction)WebKit::_wrap_HTMLDocument_hasFocus, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmldocument__get_embeds(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreHTMLDocument((PyDOMObject*)(self))->embeds());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmldocument__get_plugins(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreHTMLDocument((PyDOMObject*)(self))->plugins());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmldocument__get_scripts(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreHTMLDocument((PyDOMObject*)(self))->scripts());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmldocument__get_width(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLDocument((PyDOMObject*)(self))->width();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corehtmldocument__get_height(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLDocument((PyDOMObject*)(self))->height();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corehtmldocument__get_dir(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLDocument((PyDOMObject*)(self))->dir();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmldocument__set_dir(PyObject *self, PyObject *args, void *closure)
{
    char *dir;

    if (!PyArg_Parse(args,"s:_wrap_corehtmldocument__set_dir", &dir))
        return -1;
    WTF::String cvt_dir = WTF::String::fromUTF8((const char*)dir);
    coreHTMLDocument((PyDOMObject*)(self))->setDir(cvt_dir);

    return 0;
}

static PyObject *
_wrap_corehtmldocument__get_designMode(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLDocument((PyDOMObject*)(self))->designMode();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmldocument__set_designMode(PyObject *self, PyObject *args, void *closure)
{
    char *designMode;

    if (!PyArg_Parse(args,"s:_wrap_corehtmldocument__set_designMode", &designMode))
        return -1;
    WTF::String cvt_designMode = WTF::String::fromUTF8((const char*)designMode);
    coreHTMLDocument((PyDOMObject*)(self))->setDesignMode(cvt_designMode);

    return 0;
}

static PyObject *
_wrap_corehtmldocument__get_compatMode(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLDocument((PyDOMObject*)(self))->compatMode();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmldocument__get_activeElement(PyObject *self, void *closure)
{
    WebCore::Element* _ret;
    PyObject *py_ret;

    _ret = coreHTMLDocument((PyDOMObject*)(self))->activeElement();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmldocument__get_bgColor(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLDocument((PyDOMObject*)(self))->bgColor();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmldocument__set_bgColor(PyObject *self, PyObject *args, void *closure)
{
    char *bgColor;

    if (!PyArg_Parse(args,"s:_wrap_corehtmldocument__set_bgColor", &bgColor))
        return -1;
    WTF::String cvt_bgColor = WTF::String::fromUTF8((const char*)bgColor);
    coreHTMLDocument((PyDOMObject*)(self))->setBgColor(cvt_bgColor);

    return 0;
}

static PyObject *
_wrap_corehtmldocument__get_fgColor(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLDocument((PyDOMObject*)(self))->fgColor();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmldocument__set_fgColor(PyObject *self, PyObject *args, void *closure)
{
    char *fgColor;

    if (!PyArg_Parse(args,"s:_wrap_corehtmldocument__set_fgColor", &fgColor))
        return -1;
    WTF::String cvt_fgColor = WTF::String::fromUTF8((const char*)fgColor);
    coreHTMLDocument((PyDOMObject*)(self))->setFgColor(cvt_fgColor);

    return 0;
}

static PyObject *
_wrap_corehtmldocument__get_alinkColor(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLDocument((PyDOMObject*)(self))->alinkColor();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmldocument__set_alinkColor(PyObject *self, PyObject *args, void *closure)
{
    char *alinkColor;

    if (!PyArg_Parse(args,"s:_wrap_corehtmldocument__set_alinkColor", &alinkColor))
        return -1;
    WTF::String cvt_alinkColor = WTF::String::fromUTF8((const char*)alinkColor);
    coreHTMLDocument((PyDOMObject*)(self))->setAlinkColor(cvt_alinkColor);

    return 0;
}

static PyObject *
_wrap_corehtmldocument__get_linkColor(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLDocument((PyDOMObject*)(self))->linkColor();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmldocument__set_linkColor(PyObject *self, PyObject *args, void *closure)
{
    char *linkColor;

    if (!PyArg_Parse(args,"s:_wrap_corehtmldocument__set_linkColor", &linkColor))
        return -1;
    WTF::String cvt_linkColor = WTF::String::fromUTF8((const char*)linkColor);
    coreHTMLDocument((PyDOMObject*)(self))->setLinkColor(cvt_linkColor);

    return 0;
}

static PyObject *
_wrap_corehtmldocument__get_vlinkColor(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLDocument((PyDOMObject*)(self))->vlinkColor();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmldocument__set_vlinkColor(PyObject *self, PyObject *args, void *closure)
{
    char *vlinkColor;

    if (!PyArg_Parse(args,"s:_wrap_corehtmldocument__set_vlinkColor", &vlinkColor))
        return -1;
    WTF::String cvt_vlinkColor = WTF::String::fromUTF8((const char*)vlinkColor);
    coreHTMLDocument((PyDOMObject*)(self))->setVlinkColor(cvt_vlinkColor);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmldocument_getsets[] = {
    { (char*)"embeds", (getter)WebKit::_wrap_corehtmldocument__get_embeds, (setter)0, 0, 0 },
    { (char*)"plugins", (getter)WebKit::_wrap_corehtmldocument__get_plugins, (setter)0, 0, 0 },
    { (char*)"scripts", (getter)WebKit::_wrap_corehtmldocument__get_scripts, (setter)0, 0, 0 },
    { (char*)"width", (getter)WebKit::_wrap_corehtmldocument__get_width, (setter)0, 0, 0 },
    { (char*)"height", (getter)WebKit::_wrap_corehtmldocument__get_height, (setter)0, 0, 0 },
    { (char*)"dir", (getter)WebKit::_wrap_corehtmldocument__get_dir, (setter)WebKit::_wrap_corehtmldocument__set_dir, 0, 0 },
    { (char*)"designMode", (getter)WebKit::_wrap_corehtmldocument__get_designMode, (setter)WebKit::_wrap_corehtmldocument__set_designMode, 0, 0 },
    { (char*)"compatMode", (getter)WebKit::_wrap_corehtmldocument__get_compatMode, (setter)0, 0, 0 },
    { (char*)"activeElement", (getter)WebKit::_wrap_corehtmldocument__get_activeElement, (setter)0, 0, 0 },
    { (char*)"bgColor", (getter)WebKit::_wrap_corehtmldocument__get_bgColor, (setter)WebKit::_wrap_corehtmldocument__set_bgColor, 0, 0 },
    { (char*)"fgColor", (getter)WebKit::_wrap_corehtmldocument__get_fgColor, (setter)WebKit::_wrap_corehtmldocument__set_fgColor, 0, 0 },
    { (char*)"alinkColor", (getter)WebKit::_wrap_corehtmldocument__get_alinkColor, (setter)WebKit::_wrap_corehtmldocument__set_alinkColor, 0, 0 },
    { (char*)"linkColor", (getter)WebKit::_wrap_corehtmldocument__get_linkColor, (setter)WebKit::_wrap_corehtmldocument__set_linkColor, 0, 0 },
    { (char*)"vlinkColor", (getter)WebKit::_wrap_corehtmldocument__get_vlinkColor, (setter)WebKit::_wrap_corehtmldocument__set_vlinkColor, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLDocument(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLDocument* cobj = coreHTMLDocument(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLDocument_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLDocument",                   /* tp_name */
    sizeof(PyDOMHTMLDocument),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLDocument,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLDocument_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmldocument_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLDocument_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLEmbedElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLEmbedElement_init(HTMLEmbedElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlembedelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLEmbedElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlembedelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlembedelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLEmbedElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

static PyObject *
_wrap_corehtmlembedelement__get_height(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLEmbedElement((PyDOMObject*)(self))->getIntegralAttribute(WebCore::HTMLNames::heightAttr);
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlembedelement__set_height(PyObject *self, PyObject *args, void *closure)
{
    long height;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlembedelement__set_height", &height))
        return -1;
    coreHTMLEmbedElement((PyDOMObject*)(self))->setIntegralAttribute(WebCore::HTMLNames::heightAttr, height);

    return 0;
}

static PyObject *
_wrap_corehtmlembedelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLEmbedElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::nameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlembedelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlembedelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLEmbedElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::nameAttr, cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmlembedelement__get_src(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLEmbedElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::srcAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlembedelement__set_src(PyObject *self, PyObject *args, void *closure)
{
    char *src;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlembedelement__set_src", &src))
        return -1;
    WTF::String cvt_src = WTF::String::fromUTF8((const char*)src);
    coreHTMLEmbedElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::srcAttr, cvt_src);

    return 0;
}

static PyObject *
_wrap_corehtmlembedelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLEmbedElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::typeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlembedelement__set_type(PyObject *self, PyObject *args, void *closure)
{
    char *type;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlembedelement__set_type", &type))
        return -1;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    coreHTMLEmbedElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::typeAttr, cvt_type);

    return 0;
}

static PyObject *
_wrap_corehtmlembedelement__get_width(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLEmbedElement((PyDOMObject*)(self))->getIntegralAttribute(WebCore::HTMLNames::widthAttr);
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlembedelement__set_width(PyObject *self, PyObject *args, void *closure)
{
    long width;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlembedelement__set_width", &width))
        return -1;
    coreHTMLEmbedElement((PyDOMObject*)(self))->setIntegralAttribute(WebCore::HTMLNames::widthAttr, width);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlembedelement_getsets[] = {
    { (char*)"align", (getter)WebKit::_wrap_corehtmlembedelement__get_align, (setter)WebKit::_wrap_corehtmlembedelement__set_align, 0, 0 },
    { (char*)"height", (getter)WebKit::_wrap_corehtmlembedelement__get_height, (setter)WebKit::_wrap_corehtmlembedelement__set_height, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corehtmlembedelement__get_name, (setter)WebKit::_wrap_corehtmlembedelement__set_name, 0, 0 },
    { (char*)"src", (getter)WebKit::_wrap_corehtmlembedelement__get_src, (setter)WebKit::_wrap_corehtmlembedelement__set_src, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_corehtmlembedelement__get_type, (setter)WebKit::_wrap_corehtmlembedelement__set_type, 0, 0 },
    { (char*)"width", (getter)WebKit::_wrap_corehtmlembedelement__get_width, (setter)WebKit::_wrap_corehtmlembedelement__set_width, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLEmbedElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLEmbedElement* cobj = coreHTMLEmbedElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLEmbedElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLEmbedElement",                   /* tp_name */
    sizeof(PyDOMHTMLEmbedElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLEmbedElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlembedelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLEmbedElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLFieldSetElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLFieldSetElement_init(HTMLFieldSetElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLFieldSetElement_checkValidity(PyDOMObject *self)
{
    bool ret;

    
    ret = coreHTMLFieldSetElement(self)->checkValidity();
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_HTMLFieldSetElement_setCustomValidity(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"error", NULL };
    char *error;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLFieldSetElement.setCustomValidity", kwlist, &error))
        return NULL;
    WTF::String cvt_error = WTF::String::fromUTF8((const char*)error);
    
    coreHTMLFieldSetElement(self)->setCustomValidity(cvt_error);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLFieldSetElement_methods[] = {
    { "checkValidity", (PyCFunction)WebKit::_wrap_HTMLFieldSetElement_checkValidity, METH_NOARGS,
      NULL },
    { "setCustomValidity", (PyCFunction)WebKit::_wrap_HTMLFieldSetElement_setCustomValidity, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmlfieldsetelement__get_form(PyObject *self, void *closure)
{
    WebCore::HTMLFormElement* _ret;
    PyObject *py_ret;

    _ret = coreHTMLFieldSetElement((PyDOMObject*)(self))->form();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlfieldsetelement__get_validity(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::ValidityState* _ret;

    _ret = coreHTMLFieldSetElement((PyDOMObject*)(self))->validity();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlfieldsetelement__get_willValidate(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLFieldSetElement((PyDOMObject*)(self))->willValidate();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corehtmlfieldsetelement__get_validationMessage(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFieldSetElement((PyDOMObject*)(self))->validationMessage();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlfieldsetelement_getsets[] = {
    { (char*)"form", (getter)WebKit::_wrap_corehtmlfieldsetelement__get_form, (setter)0, 0, 0 },
    { (char*)"validity", (getter)WebKit::_wrap_corehtmlfieldsetelement__get_validity, (setter)0, 0, 0 },
    { (char*)"willValidate", (getter)WebKit::_wrap_corehtmlfieldsetelement__get_willValidate, (setter)0, 0, 0 },
    { (char*)"validationMessage", (getter)WebKit::_wrap_corehtmlfieldsetelement__get_validationMessage, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLFieldSetElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLFieldSetElement* cobj = coreHTMLFieldSetElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLFieldSetElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLFieldSetElement",                   /* tp_name */
    sizeof(PyDOMHTMLFieldSetElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLFieldSetElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLFieldSetElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlfieldsetelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLFieldSetElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLFontElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLFontElement_init(HTMLFontElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlfontelement__get_color(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFontElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::colorAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlfontelement__set_color(PyObject *self, PyObject *args, void *closure)
{
    char *color;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlfontelement__set_color", &color))
        return -1;
    WTF::String cvt_color = WTF::String::fromUTF8((const char*)color);
    coreHTMLFontElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::colorAttr, cvt_color);

    return 0;
}

static PyObject *
_wrap_corehtmlfontelement__get_face(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFontElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::faceAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlfontelement__set_face(PyObject *self, PyObject *args, void *closure)
{
    char *face;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlfontelement__set_face", &face))
        return -1;
    WTF::String cvt_face = WTF::String::fromUTF8((const char*)face);
    coreHTMLFontElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::faceAttr, cvt_face);

    return 0;
}

static PyObject *
_wrap_corehtmlfontelement__get_size(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFontElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::sizeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlfontelement__set_size(PyObject *self, PyObject *args, void *closure)
{
    char *size;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlfontelement__set_size", &size))
        return -1;
    WTF::String cvt_size = WTF::String::fromUTF8((const char*)size);
    coreHTMLFontElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::sizeAttr, cvt_size);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlfontelement_getsets[] = {
    { (char*)"color", (getter)WebKit::_wrap_corehtmlfontelement__get_color, (setter)WebKit::_wrap_corehtmlfontelement__set_color, 0, 0 },
    { (char*)"face", (getter)WebKit::_wrap_corehtmlfontelement__get_face, (setter)WebKit::_wrap_corehtmlfontelement__set_face, 0, 0 },
    { (char*)"size", (getter)WebKit::_wrap_corehtmlfontelement__get_size, (setter)WebKit::_wrap_corehtmlfontelement__set_size, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLFontElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLFontElement* cobj = coreHTMLFontElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLFontElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLFontElement",                   /* tp_name */
    sizeof(PyDOMHTMLFontElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLFontElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlfontelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLFontElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLFormElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLFormElement_init(HTMLFormElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLFormElement_submit(PyDOMObject *self)
{
    
    coreHTMLFormElement(self)->submit();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLFormElement_reset(PyDOMObject *self)
{
    
    coreHTMLFormElement(self)->reset();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLFormElement_checkValidity(PyDOMObject *self)
{
    bool ret;

    
    ret = coreHTMLFormElement(self)->checkValidity();
    
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLFormElement_methods[] = {
    { "submit", (PyCFunction)WebKit::_wrap_HTMLFormElement_submit, METH_NOARGS,
      NULL },
    { "reset", (PyCFunction)WebKit::_wrap_HTMLFormElement_reset, METH_NOARGS,
      NULL },
    { "checkValidity", (PyCFunction)WebKit::_wrap_HTMLFormElement_checkValidity, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmlformelement__get_elements(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreHTMLFormElement((PyDOMObject*)(self))->elements());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlformelement__get_length(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLFormElement((PyDOMObject*)(self))->length();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corehtmlformelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFormElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::nameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlformelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlformelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLFormElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::nameAttr, cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmlformelement__get_noValidate(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLFormElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::novalidateAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlformelement__set_noValidate(PyObject *self, PyObject *args, void *closure)
{
    int noValidate;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlformelement__set_noValidate", &noValidate))
        return -1;
    bool cvt_noValidate = (bool)noValidate;
    coreHTMLFormElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::novalidateAttr, cvt_noValidate);

    return 0;
}

static PyObject *
_wrap_corehtmlformelement__get_acceptCharset(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFormElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::accept_charsetAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlformelement__set_acceptCharset(PyObject *self, PyObject *args, void *closure)
{
    char *acceptCharset;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlformelement__set_acceptCharset", &acceptCharset))
        return -1;
    WTF::String cvt_acceptCharset = WTF::String::fromUTF8((const char*)acceptCharset);
    coreHTMLFormElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::accept_charsetAttr, cvt_acceptCharset);

    return 0;
}

static PyObject *
_wrap_corehtmlformelement__get_action(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFormElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::actionAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlformelement__set_action(PyObject *self, PyObject *args, void *closure)
{
    char *action;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlformelement__set_action", &action))
        return -1;
    WTF::String cvt_action = WTF::String::fromUTF8((const char*)action);
    coreHTMLFormElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::actionAttr, cvt_action);

    return 0;
}

static PyObject *
_wrap_corehtmlformelement__get_encoding(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFormElement((PyDOMObject*)(self))->encoding();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlformelement__set_encoding(PyObject *self, PyObject *args, void *closure)
{
    char *encoding;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlformelement__set_encoding", &encoding))
        return -1;
    WTF::String cvt_encoding = WTF::String::fromUTF8((const char*)encoding);
    coreHTMLFormElement((PyDOMObject*)(self))->setEncoding(cvt_encoding);

    return 0;
}

static PyObject *
_wrap_corehtmlformelement__get_enctype(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFormElement((PyDOMObject*)(self))->enctype();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlformelement__set_enctype(PyObject *self, PyObject *args, void *closure)
{
    char *enctype;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlformelement__set_enctype", &enctype))
        return -1;
    WTF::String cvt_enctype = WTF::String::fromUTF8((const char*)enctype);
    coreHTMLFormElement((PyDOMObject*)(self))->setEnctype(cvt_enctype);

    return 0;
}

static PyObject *
_wrap_corehtmlformelement__get_method(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFormElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::methodAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlformelement__set_method(PyObject *self, PyObject *args, void *closure)
{
    char *method;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlformelement__set_method", &method))
        return -1;
    WTF::String cvt_method = WTF::String::fromUTF8((const char*)method);
    coreHTMLFormElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::methodAttr, cvt_method);

    return 0;
}

static PyObject *
_wrap_corehtmlformelement__get_target(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFormElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::targetAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlformelement__set_target(PyObject *self, PyObject *args, void *closure)
{
    char *target;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlformelement__set_target", &target))
        return -1;
    WTF::String cvt_target = WTF::String::fromUTF8((const char*)target);
    coreHTMLFormElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::targetAttr, cvt_target);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlformelement_getsets[] = {
    { (char*)"elements", (getter)WebKit::_wrap_corehtmlformelement__get_elements, (setter)0, 0, 0 },
    { (char*)"length", (getter)WebKit::_wrap_corehtmlformelement__get_length, (setter)0, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corehtmlformelement__get_name, (setter)WebKit::_wrap_corehtmlformelement__set_name, 0, 0 },
    { (char*)"noValidate", (getter)WebKit::_wrap_corehtmlformelement__get_noValidate, (setter)WebKit::_wrap_corehtmlformelement__set_noValidate, 0, 0 },
    { (char*)"acceptCharset", (getter)WebKit::_wrap_corehtmlformelement__get_acceptCharset, (setter)WebKit::_wrap_corehtmlformelement__set_acceptCharset, 0, 0 },
    { (char*)"action", (getter)WebKit::_wrap_corehtmlformelement__get_action, (setter)WebKit::_wrap_corehtmlformelement__set_action, 0, 0 },
    { (char*)"encoding", (getter)WebKit::_wrap_corehtmlformelement__get_encoding, (setter)WebKit::_wrap_corehtmlformelement__set_encoding, 0, 0 },
    { (char*)"enctype", (getter)WebKit::_wrap_corehtmlformelement__get_enctype, (setter)WebKit::_wrap_corehtmlformelement__set_enctype, 0, 0 },
    { (char*)"method", (getter)WebKit::_wrap_corehtmlformelement__get_method, (setter)WebKit::_wrap_corehtmlformelement__set_method, 0, 0 },
    { (char*)"target", (getter)WebKit::_wrap_corehtmlformelement__get_target, (setter)WebKit::_wrap_corehtmlformelement__set_target, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLFormElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLFormElement* cobj = coreHTMLFormElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLFormElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLFormElement",                   /* tp_name */
    sizeof(PyDOMHTMLFormElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLFormElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLFormElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlformelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLFormElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLFrameElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLFrameElement_init(HTMLFrameElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlframeelement__get_frameBorder(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::frameborderAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframeelement__set_frameBorder(PyObject *self, PyObject *args, void *closure)
{
    char *frameBorder;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlframeelement__set_frameBorder", &frameBorder))
        return -1;
    WTF::String cvt_frameBorder = WTF::String::fromUTF8((const char*)frameBorder);
    coreHTMLFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::frameborderAttr, cvt_frameBorder);

    return 0;
}

static PyObject *
_wrap_corehtmlframeelement__get_longDesc(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::longdescAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframeelement__set_longDesc(PyObject *self, PyObject *args, void *closure)
{
    char *longDesc;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlframeelement__set_longDesc", &longDesc))
        return -1;
    WTF::String cvt_longDesc = WTF::String::fromUTF8((const char*)longDesc);
    coreHTMLFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::longdescAttr, cvt_longDesc);

    return 0;
}

static PyObject *
_wrap_corehtmlframeelement__get_marginHeight(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::marginheightAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframeelement__set_marginHeight(PyObject *self, PyObject *args, void *closure)
{
    char *marginHeight;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlframeelement__set_marginHeight", &marginHeight))
        return -1;
    WTF::String cvt_marginHeight = WTF::String::fromUTF8((const char*)marginHeight);
    coreHTMLFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::marginheightAttr, cvt_marginHeight);

    return 0;
}

static PyObject *
_wrap_corehtmlframeelement__get_marginWidth(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::marginwidthAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframeelement__set_marginWidth(PyObject *self, PyObject *args, void *closure)
{
    char *marginWidth;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlframeelement__set_marginWidth", &marginWidth))
        return -1;
    WTF::String cvt_marginWidth = WTF::String::fromUTF8((const char*)marginWidth);
    coreHTMLFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::marginwidthAttr, cvt_marginWidth);

    return 0;
}

static PyObject *
_wrap_corehtmlframeelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::nameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframeelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlframeelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::nameAttr, cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmlframeelement__get_noResize(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLFrameElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::noresizeAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlframeelement__set_noResize(PyObject *self, PyObject *args, void *closure)
{
    int noResize;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlframeelement__set_noResize", &noResize))
        return -1;
    bool cvt_noResize = (bool)noResize;
    coreHTMLFrameElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::noresizeAttr, cvt_noResize);

    return 0;
}

static PyObject *
_wrap_corehtmlframeelement__get_scrolling(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::scrollingAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframeelement__set_scrolling(PyObject *self, PyObject *args, void *closure)
{
    char *scrolling;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlframeelement__set_scrolling", &scrolling))
        return -1;
    WTF::String cvt_scrolling = WTF::String::fromUTF8((const char*)scrolling);
    coreHTMLFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::scrollingAttr, cvt_scrolling);

    return 0;
}

static PyObject *
_wrap_corehtmlframeelement__get_src(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFrameElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::srcAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframeelement__set_src(PyObject *self, PyObject *args, void *closure)
{
    char *src;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlframeelement__set_src", &src))
        return -1;
    WTF::String cvt_src = WTF::String::fromUTF8((const char*)src);
    coreHTMLFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::srcAttr, cvt_src);

    return 0;
}

static PyObject *
_wrap_corehtmlframeelement__get_contentDocument(PyObject *self, void *closure)
{
    WebCore::Document* _ret;
    PyObject *py_ret;

    _ret = coreHTMLFrameElement((PyDOMObject*)(self))->contentDocument();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlframeelement__get_contentWindow(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::DOMWindow* _ret;

    _ret = coreHTMLFrameElement((PyDOMObject*)(self))->contentWindow();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlframeelement__get_location(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFrameElement((PyDOMObject*)(self))->location();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframeelement__set_location(PyObject *self, PyObject *args, void *closure)
{
    char *location;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlframeelement__set_location", &location))
        return -1;
    WTF::String cvt_location = WTF::String::fromUTF8((const char*)location);
    coreHTMLFrameElement((PyDOMObject*)(self))->setLocation(cvt_location);

    return 0;
}

static PyObject *
_wrap_corehtmlframeelement__get_width(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLFrameElement((PyDOMObject*)(self))->width();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corehtmlframeelement__get_height(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLFrameElement((PyDOMObject*)(self))->height();
    return PyInt_FromLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlframeelement_getsets[] = {
    { (char*)"frameBorder", (getter)WebKit::_wrap_corehtmlframeelement__get_frameBorder, (setter)WebKit::_wrap_corehtmlframeelement__set_frameBorder, 0, 0 },
    { (char*)"longDesc", (getter)WebKit::_wrap_corehtmlframeelement__get_longDesc, (setter)WebKit::_wrap_corehtmlframeelement__set_longDesc, 0, 0 },
    { (char*)"marginHeight", (getter)WebKit::_wrap_corehtmlframeelement__get_marginHeight, (setter)WebKit::_wrap_corehtmlframeelement__set_marginHeight, 0, 0 },
    { (char*)"marginWidth", (getter)WebKit::_wrap_corehtmlframeelement__get_marginWidth, (setter)WebKit::_wrap_corehtmlframeelement__set_marginWidth, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corehtmlframeelement__get_name, (setter)WebKit::_wrap_corehtmlframeelement__set_name, 0, 0 },
    { (char*)"noResize", (getter)WebKit::_wrap_corehtmlframeelement__get_noResize, (setter)WebKit::_wrap_corehtmlframeelement__set_noResize, 0, 0 },
    { (char*)"scrolling", (getter)WebKit::_wrap_corehtmlframeelement__get_scrolling, (setter)WebKit::_wrap_corehtmlframeelement__set_scrolling, 0, 0 },
    { (char*)"src", (getter)WebKit::_wrap_corehtmlframeelement__get_src, (setter)WebKit::_wrap_corehtmlframeelement__set_src, 0, 0 },
    { (char*)"contentDocument", (getter)WebKit::_wrap_corehtmlframeelement__get_contentDocument, (setter)0, 0, 0 },
    { (char*)"contentWindow", (getter)WebKit::_wrap_corehtmlframeelement__get_contentWindow, (setter)0, 0, 0 },
    { (char*)"location", (getter)WebKit::_wrap_corehtmlframeelement__get_location, (setter)WebKit::_wrap_corehtmlframeelement__set_location, 0, 0 },
    { (char*)"width", (getter)WebKit::_wrap_corehtmlframeelement__get_width, (setter)0, 0, 0 },
    { (char*)"height", (getter)WebKit::_wrap_corehtmlframeelement__get_height, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLFrameElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLFrameElement* cobj = coreHTMLFrameElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLFrameElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLFrameElement",                   /* tp_name */
    sizeof(PyDOMHTMLFrameElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLFrameElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlframeelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLFrameElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLFrameSetElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLFrameSetElement_init(HTMLFrameSetElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlframesetelement__get_cols(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::colsAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_cols(PyObject *self, PyObject *args, void *closure)
{
    char *cols;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlframesetelement__set_cols", &cols))
        return -1;
    WTF::String cvt_cols = WTF::String::fromUTF8((const char*)cols);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::colsAttr, cvt_cols);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_rows(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::rowsAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_rows(PyObject *self, PyObject *args, void *closure)
{
    char *rows;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlframesetelement__set_rows", &rows))
        return -1;
    WTF::String cvt_rows = WTF::String::fromUTF8((const char*)rows);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::rowsAttr, cvt_rows);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_onbeforeunload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->onbeforeunload();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_onbeforeunload(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onbeforeunload;
    EventListener *onbeforeunload = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlframesetelement__set_onbeforeunload", &py_onbeforeunload))
        return -1;
    if (py_onbeforeunload)
        onbeforeunload = coreEventListener(py_onbeforeunload);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setOnbeforeunload((EventListener *) onbeforeunload);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_onhashchange(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->onhashchange();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_onhashchange(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onhashchange;
    EventListener *onhashchange = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlframesetelement__set_onhashchange", &py_onhashchange))
        return -1;
    if (py_onhashchange)
        onhashchange = coreEventListener(py_onhashchange);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setOnhashchange((EventListener *) onhashchange);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_onmessage(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->onmessage();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_onmessage(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmessage;
    EventListener *onmessage = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlframesetelement__set_onmessage", &py_onmessage))
        return -1;
    if (py_onmessage)
        onmessage = coreEventListener(py_onmessage);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setOnmessage((EventListener *) onmessage);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_onoffline(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->onoffline();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_onoffline(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onoffline;
    EventListener *onoffline = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlframesetelement__set_onoffline", &py_onoffline))
        return -1;
    if (py_onoffline)
        onoffline = coreEventListener(py_onoffline);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setOnoffline((EventListener *) onoffline);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_ononline(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->ononline();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_ononline(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ononline;
    EventListener *ononline = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlframesetelement__set_ononline", &py_ononline))
        return -1;
    if (py_ononline)
        ononline = coreEventListener(py_ononline);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setOnonline((EventListener *) ononline);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_onpopstate(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->onpopstate();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_onpopstate(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onpopstate;
    EventListener *onpopstate = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlframesetelement__set_onpopstate", &py_onpopstate))
        return -1;
    if (py_onpopstate)
        onpopstate = coreEventListener(py_onpopstate);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setOnpopstate((EventListener *) onpopstate);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_onresize(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->onresize();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_onresize(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onresize;
    EventListener *onresize = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlframesetelement__set_onresize", &py_onresize))
        return -1;
    if (py_onresize)
        onresize = coreEventListener(py_onresize);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setOnresize((EventListener *) onresize);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_onstorage(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->onstorage();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_onstorage(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onstorage;
    EventListener *onstorage = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlframesetelement__set_onstorage", &py_onstorage))
        return -1;
    if (py_onstorage)
        onstorage = coreEventListener(py_onstorage);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setOnstorage((EventListener *) onstorage);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_onunload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->onunload();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_onunload(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onunload;
    EventListener *onunload = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlframesetelement__set_onunload", &py_onunload))
        return -1;
    if (py_onunload)
        onunload = coreEventListener(py_onunload);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setOnunload((EventListener *) onunload);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_onblur(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->onblur();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_onblur(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onblur;
    EventListener *onblur = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlframesetelement__set_onblur", &py_onblur))
        return -1;
    if (py_onblur)
        onblur = coreEventListener(py_onblur);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setOnblur((EventListener *) onblur);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_onerror(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->onerror();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_onerror(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onerror;
    EventListener *onerror = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlframesetelement__set_onerror", &py_onerror))
        return -1;
    if (py_onerror)
        onerror = coreEventListener(py_onerror);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setOnerror((EventListener *) onerror);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_onfocus(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->onfocus();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_onfocus(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onfocus;
    EventListener *onfocus = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlframesetelement__set_onfocus", &py_onfocus))
        return -1;
    if (py_onfocus)
        onfocus = coreEventListener(py_onfocus);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setOnfocus((EventListener *) onfocus);

    return 0;
}

static PyObject *
_wrap_corehtmlframesetelement__get_onload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreHTMLFrameSetElement((PyDOMObject*)(self))->onload();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmlframesetelement__set_onload(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onload;
    EventListener *onload = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corehtmlframesetelement__set_onload", &py_onload))
        return -1;
    if (py_onload)
        onload = coreEventListener(py_onload);
    coreHTMLFrameSetElement((PyDOMObject*)(self))->setOnload((EventListener *) onload);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlframesetelement_getsets[] = {
    { (char*)"cols", (getter)WebKit::_wrap_corehtmlframesetelement__get_cols, (setter)WebKit::_wrap_corehtmlframesetelement__set_cols, 0, 0 },
    { (char*)"rows", (getter)WebKit::_wrap_corehtmlframesetelement__get_rows, (setter)WebKit::_wrap_corehtmlframesetelement__set_rows, 0, 0 },
    { (char*)"onbeforeunload", (getter)WebKit::_wrap_corehtmlframesetelement__get_onbeforeunload, (setter)WebKit::_wrap_corehtmlframesetelement__set_onbeforeunload, 0, 0 },
    { (char*)"onhashchange", (getter)WebKit::_wrap_corehtmlframesetelement__get_onhashchange, (setter)WebKit::_wrap_corehtmlframesetelement__set_onhashchange, 0, 0 },
    { (char*)"onmessage", (getter)WebKit::_wrap_corehtmlframesetelement__get_onmessage, (setter)WebKit::_wrap_corehtmlframesetelement__set_onmessage, 0, 0 },
    { (char*)"onoffline", (getter)WebKit::_wrap_corehtmlframesetelement__get_onoffline, (setter)WebKit::_wrap_corehtmlframesetelement__set_onoffline, 0, 0 },
    { (char*)"ononline", (getter)WebKit::_wrap_corehtmlframesetelement__get_ononline, (setter)WebKit::_wrap_corehtmlframesetelement__set_ononline, 0, 0 },
    { (char*)"onpopstate", (getter)WebKit::_wrap_corehtmlframesetelement__get_onpopstate, (setter)WebKit::_wrap_corehtmlframesetelement__set_onpopstate, 0, 0 },
    { (char*)"onresize", (getter)WebKit::_wrap_corehtmlframesetelement__get_onresize, (setter)WebKit::_wrap_corehtmlframesetelement__set_onresize, 0, 0 },
    { (char*)"onstorage", (getter)WebKit::_wrap_corehtmlframesetelement__get_onstorage, (setter)WebKit::_wrap_corehtmlframesetelement__set_onstorage, 0, 0 },
    { (char*)"onunload", (getter)WebKit::_wrap_corehtmlframesetelement__get_onunload, (setter)WebKit::_wrap_corehtmlframesetelement__set_onunload, 0, 0 },
    { (char*)"onblur", (getter)WebKit::_wrap_corehtmlframesetelement__get_onblur, (setter)WebKit::_wrap_corehtmlframesetelement__set_onblur, 0, 0 },
    { (char*)"onerror", (getter)WebKit::_wrap_corehtmlframesetelement__get_onerror, (setter)WebKit::_wrap_corehtmlframesetelement__set_onerror, 0, 0 },
    { (char*)"onfocus", (getter)WebKit::_wrap_corehtmlframesetelement__get_onfocus, (setter)WebKit::_wrap_corehtmlframesetelement__set_onfocus, 0, 0 },
    { (char*)"onload", (getter)WebKit::_wrap_corehtmlframesetelement__get_onload, (setter)WebKit::_wrap_corehtmlframesetelement__set_onload, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLFrameSetElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLFrameSetElement* cobj = coreHTMLFrameSetElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLFrameSetElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLFrameSetElement",                   /* tp_name */
    sizeof(PyDOMHTMLFrameSetElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLFrameSetElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlframesetelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLFrameSetElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLHeadElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLHeadElement_init(HTMLHeadElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlheadelement__get_profile(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLHeadElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::profileAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlheadelement__set_profile(PyObject *self, PyObject *args, void *closure)
{
    char *profile;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlheadelement__set_profile", &profile))
        return -1;
    WTF::String cvt_profile = WTF::String::fromUTF8((const char*)profile);
    coreHTMLHeadElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::profileAttr, cvt_profile);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlheadelement_getsets[] = {
    { (char*)"profile", (getter)WebKit::_wrap_corehtmlheadelement__get_profile, (setter)WebKit::_wrap_corehtmlheadelement__set_profile, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLHeadElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLHeadElement* cobj = coreHTMLHeadElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLHeadElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLHeadElement",                   /* tp_name */
    sizeof(PyDOMHTMLHeadElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLHeadElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlheadelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLHeadElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLHeadingElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLHeadingElement_init(HTMLHeadingElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlheadingelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLHeadingElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlheadingelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlheadingelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLHeadingElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlheadingelement_getsets[] = {
    { (char*)"align", (getter)WebKit::_wrap_corehtmlheadingelement__get_align, (setter)WebKit::_wrap_corehtmlheadingelement__set_align, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLHeadingElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLHeadingElement* cobj = coreHTMLHeadingElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLHeadingElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLHeadingElement",                   /* tp_name */
    sizeof(PyDOMHTMLHeadingElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLHeadingElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlheadingelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLHeadingElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLHRElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLHRElement_init(HTMLHRElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlhrelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLHRElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlhrelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlhrelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLHRElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

static PyObject *
_wrap_corehtmlhrelement__get_noShade(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLHRElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::noshadeAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlhrelement__set_noShade(PyObject *self, PyObject *args, void *closure)
{
    int noShade;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlhrelement__set_noShade", &noShade))
        return -1;
    bool cvt_noShade = (bool)noShade;
    coreHTMLHRElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::noshadeAttr, cvt_noShade);

    return 0;
}

static PyObject *
_wrap_corehtmlhrelement__get_size(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLHRElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::sizeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlhrelement__set_size(PyObject *self, PyObject *args, void *closure)
{
    char *size;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlhrelement__set_size", &size))
        return -1;
    WTF::String cvt_size = WTF::String::fromUTF8((const char*)size);
    coreHTMLHRElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::sizeAttr, cvt_size);

    return 0;
}

static PyObject *
_wrap_corehtmlhrelement__get_width(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLHRElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::widthAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlhrelement__set_width(PyObject *self, PyObject *args, void *closure)
{
    char *width;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlhrelement__set_width", &width))
        return -1;
    WTF::String cvt_width = WTF::String::fromUTF8((const char*)width);
    coreHTMLHRElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::widthAttr, cvt_width);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlhrelement_getsets[] = {
    { (char*)"align", (getter)WebKit::_wrap_corehtmlhrelement__get_align, (setter)WebKit::_wrap_corehtmlhrelement__set_align, 0, 0 },
    { (char*)"noShade", (getter)WebKit::_wrap_corehtmlhrelement__get_noShade, (setter)WebKit::_wrap_corehtmlhrelement__set_noShade, 0, 0 },
    { (char*)"size", (getter)WebKit::_wrap_corehtmlhrelement__get_size, (setter)WebKit::_wrap_corehtmlhrelement__set_size, 0, 0 },
    { (char*)"width", (getter)WebKit::_wrap_corehtmlhrelement__get_width, (setter)WebKit::_wrap_corehtmlhrelement__set_width, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLHRElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLHRElement* cobj = coreHTMLHRElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLHRElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLHRElement",                   /* tp_name */
    sizeof(PyDOMHTMLHRElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLHRElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlhrelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLHRElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLHtmlElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLHtmlElement_init(HTMLHtmlElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlhtmlelement__get_version(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLHtmlElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::versionAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlhtmlelement__set_version(PyObject *self, PyObject *args, void *closure)
{
    char *version;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlhtmlelement__set_version", &version))
        return -1;
    WTF::String cvt_version = WTF::String::fromUTF8((const char*)version);
    coreHTMLHtmlElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::versionAttr, cvt_version);

    return 0;
}

static PyObject *
_wrap_corehtmlhtmlelement__get_manifest(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLHtmlElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::manifestAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlhtmlelement__set_manifest(PyObject *self, PyObject *args, void *closure)
{
    char *manifest;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlhtmlelement__set_manifest", &manifest))
        return -1;
    WTF::String cvt_manifest = WTF::String::fromUTF8((const char*)manifest);
    coreHTMLHtmlElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::manifestAttr, cvt_manifest);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlhtmlelement_getsets[] = {
    { (char*)"version", (getter)WebKit::_wrap_corehtmlhtmlelement__get_version, (setter)WebKit::_wrap_corehtmlhtmlelement__set_version, 0, 0 },
    { (char*)"manifest", (getter)WebKit::_wrap_corehtmlhtmlelement__get_manifest, (setter)WebKit::_wrap_corehtmlhtmlelement__set_manifest, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLHtmlElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLHtmlElement* cobj = coreHTMLHtmlElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLHtmlElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLHtmlElement",                   /* tp_name */
    sizeof(PyDOMHTMLHtmlElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLHtmlElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlhtmlelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLHtmlElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLIFrameElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLIFrameElement_init(HTMLIFrameElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmliframeelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLIFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmliframeelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmliframeelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLIFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

static PyObject *
_wrap_corehtmliframeelement__get_frameBorder(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLIFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::frameborderAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmliframeelement__set_frameBorder(PyObject *self, PyObject *args, void *closure)
{
    char *frameBorder;

    if (!PyArg_Parse(args,"s:_wrap_corehtmliframeelement__set_frameBorder", &frameBorder))
        return -1;
    WTF::String cvt_frameBorder = WTF::String::fromUTF8((const char*)frameBorder);
    coreHTMLIFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::frameborderAttr, cvt_frameBorder);

    return 0;
}

static PyObject *
_wrap_corehtmliframeelement__get_height(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLIFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::heightAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmliframeelement__set_height(PyObject *self, PyObject *args, void *closure)
{
    char *height;

    if (!PyArg_Parse(args,"s:_wrap_corehtmliframeelement__set_height", &height))
        return -1;
    WTF::String cvt_height = WTF::String::fromUTF8((const char*)height);
    coreHTMLIFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::heightAttr, cvt_height);

    return 0;
}

static PyObject *
_wrap_corehtmliframeelement__get_longDesc(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLIFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::longdescAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmliframeelement__set_longDesc(PyObject *self, PyObject *args, void *closure)
{
    char *longDesc;

    if (!PyArg_Parse(args,"s:_wrap_corehtmliframeelement__set_longDesc", &longDesc))
        return -1;
    WTF::String cvt_longDesc = WTF::String::fromUTF8((const char*)longDesc);
    coreHTMLIFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::longdescAttr, cvt_longDesc);

    return 0;
}

static PyObject *
_wrap_corehtmliframeelement__get_marginHeight(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLIFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::marginheightAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmliframeelement__set_marginHeight(PyObject *self, PyObject *args, void *closure)
{
    char *marginHeight;

    if (!PyArg_Parse(args,"s:_wrap_corehtmliframeelement__set_marginHeight", &marginHeight))
        return -1;
    WTF::String cvt_marginHeight = WTF::String::fromUTF8((const char*)marginHeight);
    coreHTMLIFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::marginheightAttr, cvt_marginHeight);

    return 0;
}

static PyObject *
_wrap_corehtmliframeelement__get_marginWidth(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLIFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::marginwidthAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmliframeelement__set_marginWidth(PyObject *self, PyObject *args, void *closure)
{
    char *marginWidth;

    if (!PyArg_Parse(args,"s:_wrap_corehtmliframeelement__set_marginWidth", &marginWidth))
        return -1;
    WTF::String cvt_marginWidth = WTF::String::fromUTF8((const char*)marginWidth);
    coreHTMLIFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::marginwidthAttr, cvt_marginWidth);

    return 0;
}

static PyObject *
_wrap_corehtmliframeelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLIFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::nameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmliframeelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmliframeelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLIFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::nameAttr, cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmliframeelement__get_sandbox(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLIFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::sandboxAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmliframeelement__set_sandbox(PyObject *self, PyObject *args, void *closure)
{
    char *sandbox;

    if (!PyArg_Parse(args,"s:_wrap_corehtmliframeelement__set_sandbox", &sandbox))
        return -1;
    WTF::String cvt_sandbox = WTF::String::fromUTF8((const char*)sandbox);
    coreHTMLIFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::sandboxAttr, cvt_sandbox);

    return 0;
}

static PyObject *
_wrap_corehtmliframeelement__get_scrolling(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLIFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::scrollingAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmliframeelement__set_scrolling(PyObject *self, PyObject *args, void *closure)
{
    char *scrolling;

    if (!PyArg_Parse(args,"s:_wrap_corehtmliframeelement__set_scrolling", &scrolling))
        return -1;
    WTF::String cvt_scrolling = WTF::String::fromUTF8((const char*)scrolling);
    coreHTMLIFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::scrollingAttr, cvt_scrolling);

    return 0;
}

static PyObject *
_wrap_corehtmliframeelement__get_src(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLIFrameElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::srcAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmliframeelement__set_src(PyObject *self, PyObject *args, void *closure)
{
    char *src;

    if (!PyArg_Parse(args,"s:_wrap_corehtmliframeelement__set_src", &src))
        return -1;
    WTF::String cvt_src = WTF::String::fromUTF8((const char*)src);
    coreHTMLIFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::srcAttr, cvt_src);

    return 0;
}

static PyObject *
_wrap_corehtmliframeelement__get_width(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLIFrameElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::widthAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmliframeelement__set_width(PyObject *self, PyObject *args, void *closure)
{
    char *width;

    if (!PyArg_Parse(args,"s:_wrap_corehtmliframeelement__set_width", &width))
        return -1;
    WTF::String cvt_width = WTF::String::fromUTF8((const char*)width);
    coreHTMLIFrameElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::widthAttr, cvt_width);

    return 0;
}

static PyObject *
_wrap_corehtmliframeelement__get_contentDocument(PyObject *self, void *closure)
{
    WebCore::Document* _ret;
    PyObject *py_ret;

    _ret = coreHTMLIFrameElement((PyDOMObject*)(self))->contentDocument();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmliframeelement__get_contentWindow(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::DOMWindow* _ret;

    _ret = coreHTMLIFrameElement((PyDOMObject*)(self))->contentWindow();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmliframeelement_getsets[] = {
    { (char*)"align", (getter)WebKit::_wrap_corehtmliframeelement__get_align, (setter)WebKit::_wrap_corehtmliframeelement__set_align, 0, 0 },
    { (char*)"frameBorder", (getter)WebKit::_wrap_corehtmliframeelement__get_frameBorder, (setter)WebKit::_wrap_corehtmliframeelement__set_frameBorder, 0, 0 },
    { (char*)"height", (getter)WebKit::_wrap_corehtmliframeelement__get_height, (setter)WebKit::_wrap_corehtmliframeelement__set_height, 0, 0 },
    { (char*)"longDesc", (getter)WebKit::_wrap_corehtmliframeelement__get_longDesc, (setter)WebKit::_wrap_corehtmliframeelement__set_longDesc, 0, 0 },
    { (char*)"marginHeight", (getter)WebKit::_wrap_corehtmliframeelement__get_marginHeight, (setter)WebKit::_wrap_corehtmliframeelement__set_marginHeight, 0, 0 },
    { (char*)"marginWidth", (getter)WebKit::_wrap_corehtmliframeelement__get_marginWidth, (setter)WebKit::_wrap_corehtmliframeelement__set_marginWidth, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corehtmliframeelement__get_name, (setter)WebKit::_wrap_corehtmliframeelement__set_name, 0, 0 },
    { (char*)"sandbox", (getter)WebKit::_wrap_corehtmliframeelement__get_sandbox, (setter)WebKit::_wrap_corehtmliframeelement__set_sandbox, 0, 0 },
    { (char*)"scrolling", (getter)WebKit::_wrap_corehtmliframeelement__get_scrolling, (setter)WebKit::_wrap_corehtmliframeelement__set_scrolling, 0, 0 },
    { (char*)"src", (getter)WebKit::_wrap_corehtmliframeelement__get_src, (setter)WebKit::_wrap_corehtmliframeelement__set_src, 0, 0 },
    { (char*)"width", (getter)WebKit::_wrap_corehtmliframeelement__get_width, (setter)WebKit::_wrap_corehtmliframeelement__set_width, 0, 0 },
    { (char*)"contentDocument", (getter)WebKit::_wrap_corehtmliframeelement__get_contentDocument, (setter)0, 0, 0 },
    { (char*)"contentWindow", (getter)WebKit::_wrap_corehtmliframeelement__get_contentWindow, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLIFrameElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLIFrameElement* cobj = coreHTMLIFrameElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLIFrameElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLIFrameElement",                   /* tp_name */
    sizeof(PyDOMHTMLIFrameElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLIFrameElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmliframeelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLIFrameElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLImageElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLImageElement_init(HTMLImageElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlimageelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::nameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlimageelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlimageelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLImageElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::nameAttr, cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmlimageelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlimageelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlimageelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLImageElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

static PyObject *
_wrap_corehtmlimageelement__get_alt(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::altAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlimageelement__set_alt(PyObject *self, PyObject *args, void *closure)
{
    char *alt;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlimageelement__set_alt", &alt))
        return -1;
    WTF::String cvt_alt = WTF::String::fromUTF8((const char*)alt);
    coreHTMLImageElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::altAttr, cvt_alt);

    return 0;
}

static PyObject *
_wrap_corehtmlimageelement__get_border(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::borderAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlimageelement__set_border(PyObject *self, PyObject *args, void *closure)
{
    char *border;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlimageelement__set_border", &border))
        return -1;
    WTF::String cvt_border = WTF::String::fromUTF8((const char*)border);
    coreHTMLImageElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::borderAttr, cvt_border);

    return 0;
}

static PyObject *
_wrap_corehtmlimageelement__get_height(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->height();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlimageelement__set_height(PyObject *self, PyObject *args, void *closure)
{
    long height;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlimageelement__set_height", &height))
        return -1;
    coreHTMLImageElement((PyDOMObject*)(self))->setHeight(height);

    return 0;
}

static PyObject *
_wrap_corehtmlimageelement__get_hspace(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->getIntegralAttribute(WebCore::HTMLNames::hspaceAttr);
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlimageelement__set_hspace(PyObject *self, PyObject *args, void *closure)
{
    long hspace;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlimageelement__set_hspace", &hspace))
        return -1;
    coreHTMLImageElement((PyDOMObject*)(self))->setIntegralAttribute(WebCore::HTMLNames::hspaceAttr, hspace);

    return 0;
}

static PyObject *
_wrap_corehtmlimageelement__get_isMap(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::ismapAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlimageelement__set_isMap(PyObject *self, PyObject *args, void *closure)
{
    int isMap;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlimageelement__set_isMap", &isMap))
        return -1;
    bool cvt_isMap = (bool)isMap;
    coreHTMLImageElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::ismapAttr, cvt_isMap);

    return 0;
}

static PyObject *
_wrap_corehtmlimageelement__get_longDesc(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::longdescAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlimageelement__set_longDesc(PyObject *self, PyObject *args, void *closure)
{
    char *longDesc;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlimageelement__set_longDesc", &longDesc))
        return -1;
    WTF::String cvt_longDesc = WTF::String::fromUTF8((const char*)longDesc);
    coreHTMLImageElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::longdescAttr, cvt_longDesc);

    return 0;
}

static PyObject *
_wrap_corehtmlimageelement__get_src(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::srcAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlimageelement__set_src(PyObject *self, PyObject *args, void *closure)
{
    char *src;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlimageelement__set_src", &src))
        return -1;
    WTF::String cvt_src = WTF::String::fromUTF8((const char*)src);
    coreHTMLImageElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::srcAttr, cvt_src);

    return 0;
}

static PyObject *
_wrap_corehtmlimageelement__get_useMap(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::usemapAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlimageelement__set_useMap(PyObject *self, PyObject *args, void *closure)
{
    char *useMap;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlimageelement__set_useMap", &useMap))
        return -1;
    WTF::String cvt_useMap = WTF::String::fromUTF8((const char*)useMap);
    coreHTMLImageElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::usemapAttr, cvt_useMap);

    return 0;
}

static PyObject *
_wrap_corehtmlimageelement__get_vspace(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->getIntegralAttribute(WebCore::HTMLNames::vspaceAttr);
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlimageelement__set_vspace(PyObject *self, PyObject *args, void *closure)
{
    long vspace;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlimageelement__set_vspace", &vspace))
        return -1;
    coreHTMLImageElement((PyDOMObject*)(self))->setIntegralAttribute(WebCore::HTMLNames::vspaceAttr, vspace);

    return 0;
}

static PyObject *
_wrap_corehtmlimageelement__get_width(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->width();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlimageelement__set_width(PyObject *self, PyObject *args, void *closure)
{
    long width;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlimageelement__set_width", &width))
        return -1;
    coreHTMLImageElement((PyDOMObject*)(self))->setWidth(width);

    return 0;
}

static PyObject *
_wrap_corehtmlimageelement__get_complete(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->complete();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corehtmlimageelement__get_lowsrc(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::lowsrcAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlimageelement__set_lowsrc(PyObject *self, PyObject *args, void *closure)
{
    char *lowsrc;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlimageelement__set_lowsrc", &lowsrc))
        return -1;
    WTF::String cvt_lowsrc = WTF::String::fromUTF8((const char*)lowsrc);
    coreHTMLImageElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::lowsrcAttr, cvt_lowsrc);

    return 0;
}

static PyObject *
_wrap_corehtmlimageelement__get_naturalHeight(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->naturalHeight();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corehtmlimageelement__get_naturalWidth(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->naturalWidth();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corehtmlimageelement__get_x(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->x();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corehtmlimageelement__get_y(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLImageElement((PyDOMObject*)(self))->y();
    return PyInt_FromLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlimageelement_getsets[] = {
    { (char*)"name", (getter)WebKit::_wrap_corehtmlimageelement__get_name, (setter)WebKit::_wrap_corehtmlimageelement__set_name, 0, 0 },
    { (char*)"align", (getter)WebKit::_wrap_corehtmlimageelement__get_align, (setter)WebKit::_wrap_corehtmlimageelement__set_align, 0, 0 },
    { (char*)"alt", (getter)WebKit::_wrap_corehtmlimageelement__get_alt, (setter)WebKit::_wrap_corehtmlimageelement__set_alt, 0, 0 },
    { (char*)"border", (getter)WebKit::_wrap_corehtmlimageelement__get_border, (setter)WebKit::_wrap_corehtmlimageelement__set_border, 0, 0 },
    { (char*)"height", (getter)WebKit::_wrap_corehtmlimageelement__get_height, (setter)WebKit::_wrap_corehtmlimageelement__set_height, 0, 0 },
    { (char*)"hspace", (getter)WebKit::_wrap_corehtmlimageelement__get_hspace, (setter)WebKit::_wrap_corehtmlimageelement__set_hspace, 0, 0 },
    { (char*)"isMap", (getter)WebKit::_wrap_corehtmlimageelement__get_isMap, (setter)WebKit::_wrap_corehtmlimageelement__set_isMap, 0, 0 },
    { (char*)"longDesc", (getter)WebKit::_wrap_corehtmlimageelement__get_longDesc, (setter)WebKit::_wrap_corehtmlimageelement__set_longDesc, 0, 0 },
    { (char*)"src", (getter)WebKit::_wrap_corehtmlimageelement__get_src, (setter)WebKit::_wrap_corehtmlimageelement__set_src, 0, 0 },
    { (char*)"useMap", (getter)WebKit::_wrap_corehtmlimageelement__get_useMap, (setter)WebKit::_wrap_corehtmlimageelement__set_useMap, 0, 0 },
    { (char*)"vspace", (getter)WebKit::_wrap_corehtmlimageelement__get_vspace, (setter)WebKit::_wrap_corehtmlimageelement__set_vspace, 0, 0 },
    { (char*)"width", (getter)WebKit::_wrap_corehtmlimageelement__get_width, (setter)WebKit::_wrap_corehtmlimageelement__set_width, 0, 0 },
    { (char*)"complete", (getter)WebKit::_wrap_corehtmlimageelement__get_complete, (setter)0, 0, 0 },
    { (char*)"lowsrc", (getter)WebKit::_wrap_corehtmlimageelement__get_lowsrc, (setter)WebKit::_wrap_corehtmlimageelement__set_lowsrc, 0, 0 },
    { (char*)"naturalHeight", (getter)WebKit::_wrap_corehtmlimageelement__get_naturalHeight, (setter)0, 0, 0 },
    { (char*)"naturalWidth", (getter)WebKit::_wrap_corehtmlimageelement__get_naturalWidth, (setter)0, 0, 0 },
    { (char*)"x", (getter)WebKit::_wrap_corehtmlimageelement__get_x, (setter)0, 0, 0 },
    { (char*)"y", (getter)WebKit::_wrap_corehtmlimageelement__get_y, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLImageElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLImageElement* cobj = coreHTMLImageElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLImageElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLImageElement",                   /* tp_name */
    sizeof(PyDOMHTMLImageElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLImageElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlimageelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLImageElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLInputElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLInputElement_init(HTMLInputElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLInputElement_stepUp(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"n", NULL };
    long n;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.HTMLInputElement.stepUp", kwlist, &n))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreHTMLInputElement(self)->stepUp(n, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLInputElement_stepDown(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"n", NULL };
    long n;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.HTMLInputElement.stepDown", kwlist, &n))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreHTMLInputElement(self)->stepDown(n, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLInputElement_checkValidity(PyDOMObject *self)
{
    bool ret;

    
    ret = coreHTMLInputElement(self)->checkValidity();
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_HTMLInputElement_setCustomValidity(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"error", NULL };
    char *error;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLInputElement.setCustomValidity", kwlist, &error))
        return NULL;
    WTF::String cvt_error = WTF::String::fromUTF8((const char*)error);
    
    coreHTMLInputElement(self)->setCustomValidity(cvt_error);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLInputElement_select(PyDOMObject *self)
{
    
    coreHTMLInputElement(self)->select();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLInputElement_click(PyDOMObject *self)
{
    
    coreHTMLInputElement(self)->click();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLInputElement_setValueForUser(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"value", NULL };
    char *value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLInputElement.setValueForUser", kwlist, &value))
        return NULL;
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    
    coreHTMLInputElement(self)->setValueForUser(cvt_value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLInputElement_setSelectionRange(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"start", (char*)"end", NULL };
    long start, end;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ll:pywebkit.HTMLInputElement.setSelectionRange", kwlist, &start, &end))
        return NULL;
    
    coreHTMLInputElement(self)->setSelectionRange(start, end);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLInputElement_methods[] = {
    { "stepUp", (PyCFunction)WebKit::_wrap_HTMLInputElement_stepUp, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "stepDown", (PyCFunction)WebKit::_wrap_HTMLInputElement_stepDown, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "checkValidity", (PyCFunction)WebKit::_wrap_HTMLInputElement_checkValidity, METH_NOARGS,
      NULL },
    { "setCustomValidity", (PyCFunction)WebKit::_wrap_HTMLInputElement_setCustomValidity, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "select", (PyCFunction)WebKit::_wrap_HTMLInputElement_select, METH_NOARGS,
      NULL },
    { "click", (PyCFunction)WebKit::_wrap_HTMLInputElement_click, METH_NOARGS,
      NULL },
    { "setValueForUser", (PyCFunction)WebKit::_wrap_HTMLInputElement_setValueForUser, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setSelectionRange", (PyCFunction)WebKit::_wrap_HTMLInputElement_setSelectionRange, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmlinputelement__get_defaultValue(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->defaultValue();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_defaultValue(PyObject *self, PyObject *args, void *closure)
{
    char *defaultValue;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_defaultValue", &defaultValue))
        return -1;
    WTF::String cvt_defaultValue = WTF::String::fromUTF8((const char*)defaultValue);
    coreHTMLInputElement((PyDOMObject*)(self))->setDefaultValue(cvt_defaultValue);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_defaultChecked(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::checkedAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlinputelement__set_defaultChecked(PyObject *self, PyObject *args, void *closure)
{
    int defaultChecked;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlinputelement__set_defaultChecked", &defaultChecked))
        return -1;
    bool cvt_defaultChecked = (bool)defaultChecked;
    coreHTMLInputElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::checkedAttr, cvt_defaultChecked);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_form(PyObject *self, void *closure)
{
    WebCore::HTMLFormElement* _ret;
    PyObject *py_ret;

    _ret = coreHTMLInputElement((PyDOMObject*)(self))->form();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlinputelement__get_formNoValidate(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::formnovalidateAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlinputelement__set_formNoValidate(PyObject *self, PyObject *args, void *closure)
{
    int formNoValidate;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlinputelement__set_formNoValidate", &formNoValidate))
        return -1;
    bool cvt_formNoValidate = (bool)formNoValidate;
    coreHTMLInputElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::formnovalidateAttr, cvt_formNoValidate);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_validity(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::ValidityState* _ret;

    _ret = coreHTMLInputElement((PyDOMObject*)(self))->validity();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlinputelement__get_accept(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::acceptAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_accept(PyObject *self, PyObject *args, void *closure)
{
    char *accept;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_accept", &accept))
        return -1;
    WTF::String cvt_accept = WTF::String::fromUTF8((const char*)accept);
    coreHTMLInputElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::acceptAttr, cvt_accept);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_accessKey(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::accesskeyAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_accessKey(PyObject *self, PyObject *args, void *closure)
{
    char *accessKey;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_accessKey", &accessKey))
        return -1;
    WTF::String cvt_accessKey = WTF::String::fromUTF8((const char*)accessKey);
    coreHTMLInputElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::accesskeyAttr, cvt_accessKey);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLInputElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_alt(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::altAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_alt(PyObject *self, PyObject *args, void *closure)
{
    char *alt;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_alt", &alt))
        return -1;
    WTF::String cvt_alt = WTF::String::fromUTF8((const char*)alt);
    coreHTMLInputElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::altAttr, cvt_alt);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_checked(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->checked();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlinputelement__set_checked(PyObject *self, PyObject *args, void *closure)
{
    int checked;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlinputelement__set_checked", &checked))
        return -1;
    bool cvt_checked = (bool)checked;
    coreHTMLInputElement((PyDOMObject*)(self))->setChecked(cvt_checked);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_disabled(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::disabledAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlinputelement__set_disabled(PyObject *self, PyObject *args, void *closure)
{
    int disabled;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlinputelement__set_disabled", &disabled))
        return -1;
    bool cvt_disabled = (bool)disabled;
    coreHTMLInputElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, cvt_disabled);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_autofocus(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::autofocusAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlinputelement__set_autofocus(PyObject *self, PyObject *args, void *closure)
{
    int autofocus;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlinputelement__set_autofocus", &autofocus))
        return -1;
    bool cvt_autofocus = (bool)autofocus;
    coreHTMLInputElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::autofocusAttr, cvt_autofocus);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_max(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::maxAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_max(PyObject *self, PyObject *args, void *closure)
{
    char *max;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_max", &max))
        return -1;
    WTF::String cvt_max = WTF::String::fromUTF8((const char*)max);
    coreHTMLInputElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::maxAttr, cvt_max);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_maxLength(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->maxLength();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlinputelement__set_maxLength(PyObject *self, PyObject *args, void *closure)
{
    long maxLength;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlinputelement__set_maxLength", &maxLength))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreHTMLInputElement((PyDOMObject*)(self))->setMaxLength(maxLength, ec);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_min(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::minAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_min(PyObject *self, PyObject *args, void *closure)
{
    char *min;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_min", &min))
        return -1;
    WTF::String cvt_min = WTF::String::fromUTF8((const char*)min);
    coreHTMLInputElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::minAttr, cvt_min);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_multiple(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::multipleAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlinputelement__set_multiple(PyObject *self, PyObject *args, void *closure)
{
    int multiple;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlinputelement__set_multiple", &multiple))
        return -1;
    bool cvt_multiple = (bool)multiple;
    coreHTMLInputElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::multipleAttr, cvt_multiple);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::nameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLInputElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::nameAttr, cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_pattern(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::patternAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_pattern(PyObject *self, PyObject *args, void *closure)
{
    char *pattern;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_pattern", &pattern))
        return -1;
    WTF::String cvt_pattern = WTF::String::fromUTF8((const char*)pattern);
    coreHTMLInputElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::patternAttr, cvt_pattern);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_placeholder(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::placeholderAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_placeholder(PyObject *self, PyObject *args, void *closure)
{
    char *placeholder;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_placeholder", &placeholder))
        return -1;
    WTF::String cvt_placeholder = WTF::String::fromUTF8((const char*)placeholder);
    coreHTMLInputElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::placeholderAttr, cvt_placeholder);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_readOnly(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::readonlyAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlinputelement__set_readOnly(PyObject *self, PyObject *args, void *closure)
{
    int readOnly;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlinputelement__set_readOnly", &readOnly))
        return -1;
    bool cvt_readOnly = (bool)readOnly;
    coreHTMLInputElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::readonlyAttr, cvt_readOnly);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_required(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::requiredAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlinputelement__set_required(PyObject *self, PyObject *args, void *closure)
{
    int required;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlinputelement__set_required", &required))
        return -1;
    bool cvt_required = (bool)required;
    coreHTMLInputElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::requiredAttr, cvt_required);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_size(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->size();
    return PyLong_FromUnsignedLong(ret);

}

static int
_wrap_corehtmlinputelement__set_size(PyObject *self, PyObject *args, void *closure)
{
    unsigned long size;

    if (!PyArg_Parse(args,"k:_wrap_corehtmlinputelement__set_size", &size))
        return -1;
    coreHTMLInputElement((PyDOMObject*)(self))->setSize(size);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_src(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::srcAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_src(PyObject *self, PyObject *args, void *closure)
{
    char *src;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_src", &src))
        return -1;
    WTF::String cvt_src = WTF::String::fromUTF8((const char*)src);
    coreHTMLInputElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::srcAttr, cvt_src);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_step(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::stepAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_step(PyObject *self, PyObject *args, void *closure)
{
    char *step;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_step", &step))
        return -1;
    WTF::String cvt_step = WTF::String::fromUTF8((const char*)step);
    coreHTMLInputElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::stepAttr, cvt_step);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->type();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_type(PyObject *self, PyObject *args, void *closure)
{
    char *type;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_type", &type))
        return -1;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    coreHTMLInputElement((PyDOMObject*)(self))->setType(cvt_type);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_useMap(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::usemapAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_useMap(PyObject *self, PyObject *args, void *closure)
{
    char *useMap;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_useMap", &useMap))
        return -1;
    WTF::String cvt_useMap = WTF::String::fromUTF8((const char*)useMap);
    coreHTMLInputElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::usemapAttr, cvt_useMap);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_value(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->value();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlinputelement__set_value(PyObject *self, PyObject *args, void *closure)
{
    char *value;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlinputelement__set_value", &value))
        return -1;
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    coreHTMLInputElement((PyDOMObject*)(self))->setValue(cvt_value);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_valueAsNumber(PyObject *self, void *closure)
{
    double ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->valueAsNumber();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corehtmlinputelement__set_valueAsNumber(PyObject *self, PyObject *args, void *closure)
{
    double valueAsNumber;

    if (!PyArg_Parse(args,"d:_wrap_corehtmlinputelement__set_valueAsNumber", &valueAsNumber))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreHTMLInputElement((PyDOMObject*)(self))->setValueAsNumber(valueAsNumber, ec);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_willValidate(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->willValidate();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corehtmlinputelement__get_validationMessage(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->validationMessage();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlinputelement__get_indeterminate(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->indeterminate();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlinputelement__set_indeterminate(PyObject *self, PyObject *args, void *closure)
{
    int indeterminate;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlinputelement__set_indeterminate", &indeterminate))
        return -1;
    bool cvt_indeterminate = (bool)indeterminate;
    coreHTMLInputElement((PyDOMObject*)(self))->setIndeterminate(cvt_indeterminate);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_selectionStart(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->selectionStart();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlinputelement__set_selectionStart(PyObject *self, PyObject *args, void *closure)
{
    long selectionStart;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlinputelement__set_selectionStart", &selectionStart))
        return -1;
    coreHTMLInputElement((PyDOMObject*)(self))->setSelectionStart(selectionStart);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_selectionEnd(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLInputElement((PyDOMObject*)(self))->selectionEnd();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlinputelement__set_selectionEnd(PyObject *self, PyObject *args, void *closure)
{
    long selectionEnd;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlinputelement__set_selectionEnd", &selectionEnd))
        return -1;
    coreHTMLInputElement((PyDOMObject*)(self))->setSelectionEnd(selectionEnd);

    return 0;
}

static PyObject *
_wrap_corehtmlinputelement__get_labels(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    _ret = WTF::getPtr(coreHTMLInputElement((PyDOMObject*)(self))->labels());
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlinputelement_getsets[] = {
    { (char*)"defaultValue", (getter)WebKit::_wrap_corehtmlinputelement__get_defaultValue, (setter)WebKit::_wrap_corehtmlinputelement__set_defaultValue, 0, 0 },
    { (char*)"defaultChecked", (getter)WebKit::_wrap_corehtmlinputelement__get_defaultChecked, (setter)WebKit::_wrap_corehtmlinputelement__set_defaultChecked, 0, 0 },
    { (char*)"form", (getter)WebKit::_wrap_corehtmlinputelement__get_form, (setter)0, 0, 0 },
    { (char*)"formNoValidate", (getter)WebKit::_wrap_corehtmlinputelement__get_formNoValidate, (setter)WebKit::_wrap_corehtmlinputelement__set_formNoValidate, 0, 0 },
    { (char*)"validity", (getter)WebKit::_wrap_corehtmlinputelement__get_validity, (setter)0, 0, 0 },
    { (char*)"accept", (getter)WebKit::_wrap_corehtmlinputelement__get_accept, (setter)WebKit::_wrap_corehtmlinputelement__set_accept, 0, 0 },
    { (char*)"accessKey", (getter)WebKit::_wrap_corehtmlinputelement__get_accessKey, (setter)WebKit::_wrap_corehtmlinputelement__set_accessKey, 0, 0 },
    { (char*)"align", (getter)WebKit::_wrap_corehtmlinputelement__get_align, (setter)WebKit::_wrap_corehtmlinputelement__set_align, 0, 0 },
    { (char*)"alt", (getter)WebKit::_wrap_corehtmlinputelement__get_alt, (setter)WebKit::_wrap_corehtmlinputelement__set_alt, 0, 0 },
    { (char*)"checked", (getter)WebKit::_wrap_corehtmlinputelement__get_checked, (setter)WebKit::_wrap_corehtmlinputelement__set_checked, 0, 0 },
    { (char*)"disabled", (getter)WebKit::_wrap_corehtmlinputelement__get_disabled, (setter)WebKit::_wrap_corehtmlinputelement__set_disabled, 0, 0 },
    { (char*)"autofocus", (getter)WebKit::_wrap_corehtmlinputelement__get_autofocus, (setter)WebKit::_wrap_corehtmlinputelement__set_autofocus, 0, 0 },
    { (char*)"max", (getter)WebKit::_wrap_corehtmlinputelement__get_max, (setter)WebKit::_wrap_corehtmlinputelement__set_max, 0, 0 },
    { (char*)"maxLength", (getter)WebKit::_wrap_corehtmlinputelement__get_maxLength, (setter)WebKit::_wrap_corehtmlinputelement__set_maxLength, 0, 0 },
    { (char*)"min", (getter)WebKit::_wrap_corehtmlinputelement__get_min, (setter)WebKit::_wrap_corehtmlinputelement__set_min, 0, 0 },
    { (char*)"multiple", (getter)WebKit::_wrap_corehtmlinputelement__get_multiple, (setter)WebKit::_wrap_corehtmlinputelement__set_multiple, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corehtmlinputelement__get_name, (setter)WebKit::_wrap_corehtmlinputelement__set_name, 0, 0 },
    { (char*)"pattern", (getter)WebKit::_wrap_corehtmlinputelement__get_pattern, (setter)WebKit::_wrap_corehtmlinputelement__set_pattern, 0, 0 },
    { (char*)"placeholder", (getter)WebKit::_wrap_corehtmlinputelement__get_placeholder, (setter)WebKit::_wrap_corehtmlinputelement__set_placeholder, 0, 0 },
    { (char*)"readOnly", (getter)WebKit::_wrap_corehtmlinputelement__get_readOnly, (setter)WebKit::_wrap_corehtmlinputelement__set_readOnly, 0, 0 },
    { (char*)"required", (getter)WebKit::_wrap_corehtmlinputelement__get_required, (setter)WebKit::_wrap_corehtmlinputelement__set_required, 0, 0 },
    { (char*)"size", (getter)WebKit::_wrap_corehtmlinputelement__get_size, (setter)WebKit::_wrap_corehtmlinputelement__set_size, 0, 0 },
    { (char*)"src", (getter)WebKit::_wrap_corehtmlinputelement__get_src, (setter)WebKit::_wrap_corehtmlinputelement__set_src, 0, 0 },
    { (char*)"step", (getter)WebKit::_wrap_corehtmlinputelement__get_step, (setter)WebKit::_wrap_corehtmlinputelement__set_step, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_corehtmlinputelement__get_type, (setter)WebKit::_wrap_corehtmlinputelement__set_type, 0, 0 },
    { (char*)"useMap", (getter)WebKit::_wrap_corehtmlinputelement__get_useMap, (setter)WebKit::_wrap_corehtmlinputelement__set_useMap, 0, 0 },
    { (char*)"value", (getter)WebKit::_wrap_corehtmlinputelement__get_value, (setter)WebKit::_wrap_corehtmlinputelement__set_value, 0, 0 },
    { (char*)"valueAsNumber", (getter)WebKit::_wrap_corehtmlinputelement__get_valueAsNumber, (setter)WebKit::_wrap_corehtmlinputelement__set_valueAsNumber, 0, 0 },
    { (char*)"willValidate", (getter)WebKit::_wrap_corehtmlinputelement__get_willValidate, (setter)0, 0, 0 },
    { (char*)"validationMessage", (getter)WebKit::_wrap_corehtmlinputelement__get_validationMessage, (setter)0, 0, 0 },
    { (char*)"indeterminate", (getter)WebKit::_wrap_corehtmlinputelement__get_indeterminate, (setter)WebKit::_wrap_corehtmlinputelement__set_indeterminate, 0, 0 },
    { (char*)"selectionStart", (getter)WebKit::_wrap_corehtmlinputelement__get_selectionStart, (setter)WebKit::_wrap_corehtmlinputelement__set_selectionStart, 0, 0 },
    { (char*)"selectionEnd", (getter)WebKit::_wrap_corehtmlinputelement__get_selectionEnd, (setter)WebKit::_wrap_corehtmlinputelement__set_selectionEnd, 0, 0 },
    { (char*)"labels", (getter)WebKit::_wrap_corehtmlinputelement__get_labels, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLInputElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLInputElement* cobj = coreHTMLInputElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLInputElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLInputElement",                   /* tp_name */
    sizeof(PyDOMHTMLInputElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLInputElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLInputElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlinputelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLInputElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLIsIndexElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLIsIndexElement_init(HTMLIsIndexElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLInputElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlisindexelement__get_form(PyObject *self, void *closure)
{
    WebCore::HTMLFormElement* _ret;
    PyObject *py_ret;

    _ret = coreHTMLIsIndexElement((PyDOMObject*)(self))->form();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlisindexelement__get_prompt(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLIsIndexElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::promptAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlisindexelement__set_prompt(PyObject *self, PyObject *args, void *closure)
{
    char *prompt;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlisindexelement__set_prompt", &prompt))
        return -1;
    WTF::String cvt_prompt = WTF::String::fromUTF8((const char*)prompt);
    coreHTMLIsIndexElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::promptAttr, cvt_prompt);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlisindexelement_getsets[] = {
    { (char*)"form", (getter)WebKit::_wrap_corehtmlisindexelement__get_form, (setter)0, 0, 0 },
    { (char*)"prompt", (getter)WebKit::_wrap_corehtmlisindexelement__get_prompt, (setter)WebKit::_wrap_corehtmlisindexelement__set_prompt, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLIsIndexElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLIsIndexElement* cobj = coreHTMLIsIndexElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLIsIndexElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLIsIndexElement",                   /* tp_name */
    sizeof(PyDOMHTMLIsIndexElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLIsIndexElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlisindexelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLIsIndexElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLLabelElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLLabelElement_init(HTMLLabelElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmllabelelement__get_form(PyObject *self, void *closure)
{
    WebCore::HTMLFormElement* _ret;
    PyObject *py_ret;

    _ret = coreHTMLLabelElement((PyDOMObject*)(self))->form();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmllabelelement__get_accessKey(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLLabelElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::accesskeyAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmllabelelement__set_accessKey(PyObject *self, PyObject *args, void *closure)
{
    char *accessKey;

    if (!PyArg_Parse(args,"s:_wrap_corehtmllabelelement__set_accessKey", &accessKey))
        return -1;
    WTF::String cvt_accessKey = WTF::String::fromUTF8((const char*)accessKey);
    coreHTMLLabelElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::accesskeyAttr, cvt_accessKey);

    return 0;
}

static PyObject *
_wrap_corehtmllabelelement__get_htmlFor(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLLabelElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::forAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmllabelelement__set_htmlFor(PyObject *self, PyObject *args, void *closure)
{
    char *htmlFor;

    if (!PyArg_Parse(args,"s:_wrap_corehtmllabelelement__set_htmlFor", &htmlFor))
        return -1;
    WTF::String cvt_htmlFor = WTF::String::fromUTF8((const char*)htmlFor);
    coreHTMLLabelElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::forAttr, cvt_htmlFor);

    return 0;
}

static PyObject *
_wrap_corehtmllabelelement__get_control(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLElement* _ret;

    _ret = coreHTMLLabelElement((PyDOMObject*)(self))->control();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmllabelelement_getsets[] = {
    { (char*)"form", (getter)WebKit::_wrap_corehtmllabelelement__get_form, (setter)0, 0, 0 },
    { (char*)"accessKey", (getter)WebKit::_wrap_corehtmllabelelement__get_accessKey, (setter)WebKit::_wrap_corehtmllabelelement__set_accessKey, 0, 0 },
    { (char*)"htmlFor", (getter)WebKit::_wrap_corehtmllabelelement__get_htmlFor, (setter)WebKit::_wrap_corehtmllabelelement__set_htmlFor, 0, 0 },
    { (char*)"control", (getter)WebKit::_wrap_corehtmllabelelement__get_control, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLLabelElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLLabelElement* cobj = coreHTMLLabelElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLLabelElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLLabelElement",                   /* tp_name */
    sizeof(PyDOMHTMLLabelElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLLabelElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmllabelelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLLabelElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLLegendElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLLegendElement_init(HTMLLegendElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmllegendelement__get_form(PyObject *self, void *closure)
{
    WebCore::HTMLFormElement* _ret;
    PyObject *py_ret;

    _ret = coreHTMLLegendElement((PyDOMObject*)(self))->form();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmllegendelement__get_accessKey(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLLegendElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::accesskeyAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmllegendelement__set_accessKey(PyObject *self, PyObject *args, void *closure)
{
    char *accessKey;

    if (!PyArg_Parse(args,"s:_wrap_corehtmllegendelement__set_accessKey", &accessKey))
        return -1;
    WTF::String cvt_accessKey = WTF::String::fromUTF8((const char*)accessKey);
    coreHTMLLegendElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::accesskeyAttr, cvt_accessKey);

    return 0;
}

static PyObject *
_wrap_corehtmllegendelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLLegendElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmllegendelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmllegendelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLLegendElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmllegendelement_getsets[] = {
    { (char*)"form", (getter)WebKit::_wrap_corehtmllegendelement__get_form, (setter)0, 0, 0 },
    { (char*)"accessKey", (getter)WebKit::_wrap_corehtmllegendelement__get_accessKey, (setter)WebKit::_wrap_corehtmllegendelement__set_accessKey, 0, 0 },
    { (char*)"align", (getter)WebKit::_wrap_corehtmllegendelement__get_align, (setter)WebKit::_wrap_corehtmllegendelement__set_align, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLLegendElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLLegendElement* cobj = coreHTMLLegendElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLLegendElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLLegendElement",                   /* tp_name */
    sizeof(PyDOMHTMLLegendElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLLegendElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmllegendelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLLegendElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLLIElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLLIElement_init(HTMLLIElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmllielement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLLIElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::typeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmllielement__set_type(PyObject *self, PyObject *args, void *closure)
{
    char *type;

    if (!PyArg_Parse(args,"s:_wrap_corehtmllielement__set_type", &type))
        return -1;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    coreHTMLLIElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::typeAttr, cvt_type);

    return 0;
}

static PyObject *
_wrap_corehtmllielement__get_value(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLLIElement((PyDOMObject*)(self))->getIntegralAttribute(WebCore::HTMLNames::valueAttr);
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmllielement__set_value(PyObject *self, PyObject *args, void *closure)
{
    long value;

    if (!PyArg_Parse(args,"l:_wrap_corehtmllielement__set_value", &value))
        return -1;
    coreHTMLLIElement((PyDOMObject*)(self))->setIntegralAttribute(WebCore::HTMLNames::valueAttr, value);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmllielement_getsets[] = {
    { (char*)"type", (getter)WebKit::_wrap_corehtmllielement__get_type, (setter)WebKit::_wrap_corehtmllielement__set_type, 0, 0 },
    { (char*)"value", (getter)WebKit::_wrap_corehtmllielement__get_value, (setter)WebKit::_wrap_corehtmllielement__set_value, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLLIElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLLIElement* cobj = coreHTMLLIElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLLIElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLLIElement",                   /* tp_name */
    sizeof(PyDOMHTMLLIElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLLIElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmllielement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLLIElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLLinkElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLLinkElement_init(HTMLLinkElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmllinkelement__get_disabled(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLLinkElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::disabledAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmllinkelement__set_disabled(PyObject *self, PyObject *args, void *closure)
{
    int disabled;

    if (!PyArg_Parse(args,"i:_wrap_corehtmllinkelement__set_disabled", &disabled))
        return -1;
    bool cvt_disabled = (bool)disabled;
    coreHTMLLinkElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, cvt_disabled);

    return 0;
}

static PyObject *
_wrap_corehtmllinkelement__get_charset(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLLinkElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::charsetAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmllinkelement__set_charset(PyObject *self, PyObject *args, void *closure)
{
    char *charset;

    if (!PyArg_Parse(args,"s:_wrap_corehtmllinkelement__set_charset", &charset))
        return -1;
    WTF::String cvt_charset = WTF::String::fromUTF8((const char*)charset);
    coreHTMLLinkElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::charsetAttr, cvt_charset);

    return 0;
}

static PyObject *
_wrap_corehtmllinkelement__get_href(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLLinkElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::hrefAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmllinkelement__set_href(PyObject *self, PyObject *args, void *closure)
{
    char *href;

    if (!PyArg_Parse(args,"s:_wrap_corehtmllinkelement__set_href", &href))
        return -1;
    WTF::String cvt_href = WTF::String::fromUTF8((const char*)href);
    coreHTMLLinkElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::hrefAttr, cvt_href);

    return 0;
}

static PyObject *
_wrap_corehtmllinkelement__get_hreflang(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLLinkElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::hreflangAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmllinkelement__set_hreflang(PyObject *self, PyObject *args, void *closure)
{
    char *hreflang;

    if (!PyArg_Parse(args,"s:_wrap_corehtmllinkelement__set_hreflang", &hreflang))
        return -1;
    WTF::String cvt_hreflang = WTF::String::fromUTF8((const char*)hreflang);
    coreHTMLLinkElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::hreflangAttr, cvt_hreflang);

    return 0;
}

static PyObject *
_wrap_corehtmllinkelement__get_media(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLLinkElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::mediaAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmllinkelement__set_media(PyObject *self, PyObject *args, void *closure)
{
    char *media;

    if (!PyArg_Parse(args,"s:_wrap_corehtmllinkelement__set_media", &media))
        return -1;
    WTF::String cvt_media = WTF::String::fromUTF8((const char*)media);
    coreHTMLLinkElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::mediaAttr, cvt_media);

    return 0;
}

static PyObject *
_wrap_corehtmllinkelement__get_rel(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLLinkElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::relAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmllinkelement__set_rel(PyObject *self, PyObject *args, void *closure)
{
    char *rel;

    if (!PyArg_Parse(args,"s:_wrap_corehtmllinkelement__set_rel", &rel))
        return -1;
    WTF::String cvt_rel = WTF::String::fromUTF8((const char*)rel);
    coreHTMLLinkElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::relAttr, cvt_rel);

    return 0;
}

static PyObject *
_wrap_corehtmllinkelement__get_rev(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLLinkElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::revAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmllinkelement__set_rev(PyObject *self, PyObject *args, void *closure)
{
    char *rev;

    if (!PyArg_Parse(args,"s:_wrap_corehtmllinkelement__set_rev", &rev))
        return -1;
    WTF::String cvt_rev = WTF::String::fromUTF8((const char*)rev);
    coreHTMLLinkElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::revAttr, cvt_rev);

    return 0;
}

static PyObject *
_wrap_corehtmllinkelement__get_target(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLLinkElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::targetAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmllinkelement__set_target(PyObject *self, PyObject *args, void *closure)
{
    char *target;

    if (!PyArg_Parse(args,"s:_wrap_corehtmllinkelement__set_target", &target))
        return -1;
    WTF::String cvt_target = WTF::String::fromUTF8((const char*)target);
    coreHTMLLinkElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::targetAttr, cvt_target);

    return 0;
}

static PyObject *
_wrap_corehtmllinkelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLLinkElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::typeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmllinkelement__set_type(PyObject *self, PyObject *args, void *closure)
{
    char *type;

    if (!PyArg_Parse(args,"s:_wrap_corehtmllinkelement__set_type", &type))
        return -1;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    coreHTMLLinkElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::typeAttr, cvt_type);

    return 0;
}

static PyObject *
_wrap_corehtmllinkelement__get_sheet(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::StyleSheet* _ret;

    _ret = coreHTMLLinkElement((PyDOMObject*)(self))->sheet();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmllinkelement_getsets[] = {
    { (char*)"disabled", (getter)WebKit::_wrap_corehtmllinkelement__get_disabled, (setter)WebKit::_wrap_corehtmllinkelement__set_disabled, 0, 0 },
    { (char*)"charset", (getter)WebKit::_wrap_corehtmllinkelement__get_charset, (setter)WebKit::_wrap_corehtmllinkelement__set_charset, 0, 0 },
    { (char*)"href", (getter)WebKit::_wrap_corehtmllinkelement__get_href, (setter)WebKit::_wrap_corehtmllinkelement__set_href, 0, 0 },
    { (char*)"hreflang", (getter)WebKit::_wrap_corehtmllinkelement__get_hreflang, (setter)WebKit::_wrap_corehtmllinkelement__set_hreflang, 0, 0 },
    { (char*)"media", (getter)WebKit::_wrap_corehtmllinkelement__get_media, (setter)WebKit::_wrap_corehtmllinkelement__set_media, 0, 0 },
    { (char*)"rel", (getter)WebKit::_wrap_corehtmllinkelement__get_rel, (setter)WebKit::_wrap_corehtmllinkelement__set_rel, 0, 0 },
    { (char*)"rev", (getter)WebKit::_wrap_corehtmllinkelement__get_rev, (setter)WebKit::_wrap_corehtmllinkelement__set_rev, 0, 0 },
    { (char*)"target", (getter)WebKit::_wrap_corehtmllinkelement__get_target, (setter)WebKit::_wrap_corehtmllinkelement__set_target, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_corehtmllinkelement__get_type, (setter)WebKit::_wrap_corehtmllinkelement__set_type, 0, 0 },
    { (char*)"sheet", (getter)WebKit::_wrap_corehtmllinkelement__get_sheet, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLLinkElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLLinkElement* cobj = coreHTMLLinkElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLLinkElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLLinkElement",                   /* tp_name */
    sizeof(PyDOMHTMLLinkElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLLinkElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmllinkelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLLinkElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLMapElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLMapElement_init(HTMLMapElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlmapelement__get_areas(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreHTMLMapElement((PyDOMObject*)(self))->areas());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlmapelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLMapElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::nameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlmapelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlmapelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLMapElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::nameAttr, cvt_name);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlmapelement_getsets[] = {
    { (char*)"areas", (getter)WebKit::_wrap_corehtmlmapelement__get_areas, (setter)0, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corehtmlmapelement__get_name, (setter)WebKit::_wrap_corehtmlmapelement__set_name, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLMapElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLMapElement* cobj = coreHTMLMapElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLMapElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLMapElement",                   /* tp_name */
    sizeof(PyDOMHTMLMapElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLMapElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlmapelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLMapElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLMarqueeElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLMarqueeElement_init(HTMLMarqueeElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLMarqueeElement_start(PyDOMObject *self)
{
    
    coreHTMLMarqueeElement(self)->start();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLMarqueeElement_stop(PyDOMObject *self)
{
    
    coreHTMLMarqueeElement(self)->stop();
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLMarqueeElement_methods[] = {
    { "start", (PyCFunction)WebKit::_wrap_HTMLMarqueeElement_start, METH_NOARGS,
      NULL },
    { "stop", (PyCFunction)WebKit::_wrap_HTMLMarqueeElement_stop, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
void dealloc_HTMLMarqueeElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLMarqueeElement* cobj = coreHTMLMarqueeElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLMarqueeElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLMarqueeElement",                   /* tp_name */
    sizeof(PyDOMHTMLMarqueeElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLMarqueeElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLMarqueeElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLMarqueeElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLMenuElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLMenuElement_init(HTMLMenuElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlmenuelement__get_compact(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLMenuElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::compactAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlmenuelement__set_compact(PyObject *self, PyObject *args, void *closure)
{
    int compact;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlmenuelement__set_compact", &compact))
        return -1;
    bool cvt_compact = (bool)compact;
    coreHTMLMenuElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::compactAttr, cvt_compact);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlmenuelement_getsets[] = {
    { (char*)"compact", (getter)WebKit::_wrap_corehtmlmenuelement__get_compact, (setter)WebKit::_wrap_corehtmlmenuelement__set_compact, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLMenuElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLMenuElement* cobj = coreHTMLMenuElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLMenuElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLMenuElement",                   /* tp_name */
    sizeof(PyDOMHTMLMenuElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLMenuElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlmenuelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLMenuElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLMetaElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLMetaElement_init(HTMLMetaElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlmetaelement__get_content(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLMetaElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::contentAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlmetaelement__set_content(PyObject *self, PyObject *args, void *closure)
{
    char *content;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlmetaelement__set_content", &content))
        return -1;
    WTF::String cvt_content = WTF::String::fromUTF8((const char*)content);
    coreHTMLMetaElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::contentAttr, cvt_content);

    return 0;
}

static PyObject *
_wrap_corehtmlmetaelement__get_httpEquiv(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLMetaElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::http_equivAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlmetaelement__set_httpEquiv(PyObject *self, PyObject *args, void *closure)
{
    char *httpEquiv;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlmetaelement__set_httpEquiv", &httpEquiv))
        return -1;
    WTF::String cvt_httpEquiv = WTF::String::fromUTF8((const char*)httpEquiv);
    coreHTMLMetaElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::http_equivAttr, cvt_httpEquiv);

    return 0;
}

static PyObject *
_wrap_corehtmlmetaelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLMetaElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::nameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlmetaelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlmetaelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLMetaElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::nameAttr, cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmlmetaelement__get_scheme(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLMetaElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::schemeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlmetaelement__set_scheme(PyObject *self, PyObject *args, void *closure)
{
    char *scheme;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlmetaelement__set_scheme", &scheme))
        return -1;
    WTF::String cvt_scheme = WTF::String::fromUTF8((const char*)scheme);
    coreHTMLMetaElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::schemeAttr, cvt_scheme);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlmetaelement_getsets[] = {
    { (char*)"content", (getter)WebKit::_wrap_corehtmlmetaelement__get_content, (setter)WebKit::_wrap_corehtmlmetaelement__set_content, 0, 0 },
    { (char*)"httpEquiv", (getter)WebKit::_wrap_corehtmlmetaelement__get_httpEquiv, (setter)WebKit::_wrap_corehtmlmetaelement__set_httpEquiv, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corehtmlmetaelement__get_name, (setter)WebKit::_wrap_corehtmlmetaelement__set_name, 0, 0 },
    { (char*)"scheme", (getter)WebKit::_wrap_corehtmlmetaelement__get_scheme, (setter)WebKit::_wrap_corehtmlmetaelement__set_scheme, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLMetaElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLMetaElement* cobj = coreHTMLMetaElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLMetaElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLMetaElement",                   /* tp_name */
    sizeof(PyDOMHTMLMetaElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLMetaElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlmetaelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLMetaElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLModElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLModElement_init(HTMLModElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlmodelement__get_cite(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLModElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::citeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlmodelement__set_cite(PyObject *self, PyObject *args, void *closure)
{
    char *cite;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlmodelement__set_cite", &cite))
        return -1;
    WTF::String cvt_cite = WTF::String::fromUTF8((const char*)cite);
    coreHTMLModElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::citeAttr, cvt_cite);

    return 0;
}

static PyObject *
_wrap_corehtmlmodelement__get_dateTime(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLModElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::datetimeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlmodelement__set_dateTime(PyObject *self, PyObject *args, void *closure)
{
    char *dateTime;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlmodelement__set_dateTime", &dateTime))
        return -1;
    WTF::String cvt_dateTime = WTF::String::fromUTF8((const char*)dateTime);
    coreHTMLModElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::datetimeAttr, cvt_dateTime);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlmodelement_getsets[] = {
    { (char*)"cite", (getter)WebKit::_wrap_corehtmlmodelement__get_cite, (setter)WebKit::_wrap_corehtmlmodelement__set_cite, 0, 0 },
    { (char*)"dateTime", (getter)WebKit::_wrap_corehtmlmodelement__get_dateTime, (setter)WebKit::_wrap_corehtmlmodelement__set_dateTime, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLModElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLModElement* cobj = coreHTMLModElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLModElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLModElement",                   /* tp_name */
    sizeof(PyDOMHTMLModElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLModElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlmodelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLModElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLObjectElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLObjectElement_init(HTMLObjectElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlobjectelement__get_form(PyObject *self, void *closure)
{
    WebCore::HTMLFormElement* _ret;
    PyObject *py_ret;

    _ret = coreHTMLObjectElement((PyDOMObject*)(self))->form();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlobjectelement__get_code(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::codeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlobjectelement__set_code(PyObject *self, PyObject *args, void *closure)
{
    char *code;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlobjectelement__set_code", &code))
        return -1;
    WTF::String cvt_code = WTF::String::fromUTF8((const char*)code);
    coreHTMLObjectElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::codeAttr, cvt_code);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlobjectelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlobjectelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLObjectElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_archive(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::archiveAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlobjectelement__set_archive(PyObject *self, PyObject *args, void *closure)
{
    char *archive;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlobjectelement__set_archive", &archive))
        return -1;
    WTF::String cvt_archive = WTF::String::fromUTF8((const char*)archive);
    coreHTMLObjectElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::archiveAttr, cvt_archive);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_border(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::borderAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlobjectelement__set_border(PyObject *self, PyObject *args, void *closure)
{
    char *border;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlobjectelement__set_border", &border))
        return -1;
    WTF::String cvt_border = WTF::String::fromUTF8((const char*)border);
    coreHTMLObjectElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::borderAttr, cvt_border);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_codeBase(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::codebaseAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlobjectelement__set_codeBase(PyObject *self, PyObject *args, void *closure)
{
    char *codeBase;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlobjectelement__set_codeBase", &codeBase))
        return -1;
    WTF::String cvt_codeBase = WTF::String::fromUTF8((const char*)codeBase);
    coreHTMLObjectElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::codebaseAttr, cvt_codeBase);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_codeType(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::codetypeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlobjectelement__set_codeType(PyObject *self, PyObject *args, void *closure)
{
    char *codeType;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlobjectelement__set_codeType", &codeType))
        return -1;
    WTF::String cvt_codeType = WTF::String::fromUTF8((const char*)codeType);
    coreHTMLObjectElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::codetypeAttr, cvt_codeType);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_data(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::dataAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlobjectelement__set_data(PyObject *self, PyObject *args, void *closure)
{
    char *data;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlobjectelement__set_data", &data))
        return -1;
    WTF::String cvt_data = WTF::String::fromUTF8((const char*)data);
    coreHTMLObjectElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::dataAttr, cvt_data);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_declare(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::declareAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlobjectelement__set_declare(PyObject *self, PyObject *args, void *closure)
{
    int declare;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlobjectelement__set_declare", &declare))
        return -1;
    bool cvt_declare = (bool)declare;
    coreHTMLObjectElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::declareAttr, cvt_declare);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_height(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::heightAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlobjectelement__set_height(PyObject *self, PyObject *args, void *closure)
{
    char *height;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlobjectelement__set_height", &height))
        return -1;
    WTF::String cvt_height = WTF::String::fromUTF8((const char*)height);
    coreHTMLObjectElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::heightAttr, cvt_height);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_hspace(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getIntegralAttribute(WebCore::HTMLNames::hspaceAttr);
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlobjectelement__set_hspace(PyObject *self, PyObject *args, void *closure)
{
    long hspace;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlobjectelement__set_hspace", &hspace))
        return -1;
    coreHTMLObjectElement((PyDOMObject*)(self))->setIntegralAttribute(WebCore::HTMLNames::hspaceAttr, hspace);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::nameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlobjectelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlobjectelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLObjectElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::nameAttr, cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_standby(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::standbyAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlobjectelement__set_standby(PyObject *self, PyObject *args, void *closure)
{
    char *standby;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlobjectelement__set_standby", &standby))
        return -1;
    WTF::String cvt_standby = WTF::String::fromUTF8((const char*)standby);
    coreHTMLObjectElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::standbyAttr, cvt_standby);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::typeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlobjectelement__set_type(PyObject *self, PyObject *args, void *closure)
{
    char *type;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlobjectelement__set_type", &type))
        return -1;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    coreHTMLObjectElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::typeAttr, cvt_type);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_useMap(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::usemapAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlobjectelement__set_useMap(PyObject *self, PyObject *args, void *closure)
{
    char *useMap;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlobjectelement__set_useMap", &useMap))
        return -1;
    WTF::String cvt_useMap = WTF::String::fromUTF8((const char*)useMap);
    coreHTMLObjectElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::usemapAttr, cvt_useMap);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_vspace(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getIntegralAttribute(WebCore::HTMLNames::vspaceAttr);
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlobjectelement__set_vspace(PyObject *self, PyObject *args, void *closure)
{
    long vspace;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlobjectelement__set_vspace", &vspace))
        return -1;
    coreHTMLObjectElement((PyDOMObject*)(self))->setIntegralAttribute(WebCore::HTMLNames::vspaceAttr, vspace);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_width(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::widthAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlobjectelement__set_width(PyObject *self, PyObject *args, void *closure)
{
    char *width;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlobjectelement__set_width", &width))
        return -1;
    WTF::String cvt_width = WTF::String::fromUTF8((const char*)width);
    coreHTMLObjectElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::widthAttr, cvt_width);

    return 0;
}

static PyObject *
_wrap_corehtmlobjectelement__get_willValidate(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLObjectElement((PyDOMObject*)(self))->willValidate();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corehtmlobjectelement__get_contentDocument(PyObject *self, void *closure)
{
    WebCore::Document* _ret;
    PyObject *py_ret;

    _ret = coreHTMLObjectElement((PyDOMObject*)(self))->contentDocument();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlobjectelement_getsets[] = {
    { (char*)"form", (getter)WebKit::_wrap_corehtmlobjectelement__get_form, (setter)0, 0, 0 },
    { (char*)"code", (getter)WebKit::_wrap_corehtmlobjectelement__get_code, (setter)WebKit::_wrap_corehtmlobjectelement__set_code, 0, 0 },
    { (char*)"align", (getter)WebKit::_wrap_corehtmlobjectelement__get_align, (setter)WebKit::_wrap_corehtmlobjectelement__set_align, 0, 0 },
    { (char*)"archive", (getter)WebKit::_wrap_corehtmlobjectelement__get_archive, (setter)WebKit::_wrap_corehtmlobjectelement__set_archive, 0, 0 },
    { (char*)"border", (getter)WebKit::_wrap_corehtmlobjectelement__get_border, (setter)WebKit::_wrap_corehtmlobjectelement__set_border, 0, 0 },
    { (char*)"codeBase", (getter)WebKit::_wrap_corehtmlobjectelement__get_codeBase, (setter)WebKit::_wrap_corehtmlobjectelement__set_codeBase, 0, 0 },
    { (char*)"codeType", (getter)WebKit::_wrap_corehtmlobjectelement__get_codeType, (setter)WebKit::_wrap_corehtmlobjectelement__set_codeType, 0, 0 },
    { (char*)"data", (getter)WebKit::_wrap_corehtmlobjectelement__get_data, (setter)WebKit::_wrap_corehtmlobjectelement__set_data, 0, 0 },
    { (char*)"declare", (getter)WebKit::_wrap_corehtmlobjectelement__get_declare, (setter)WebKit::_wrap_corehtmlobjectelement__set_declare, 0, 0 },
    { (char*)"height", (getter)WebKit::_wrap_corehtmlobjectelement__get_height, (setter)WebKit::_wrap_corehtmlobjectelement__set_height, 0, 0 },
    { (char*)"hspace", (getter)WebKit::_wrap_corehtmlobjectelement__get_hspace, (setter)WebKit::_wrap_corehtmlobjectelement__set_hspace, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corehtmlobjectelement__get_name, (setter)WebKit::_wrap_corehtmlobjectelement__set_name, 0, 0 },
    { (char*)"standby", (getter)WebKit::_wrap_corehtmlobjectelement__get_standby, (setter)WebKit::_wrap_corehtmlobjectelement__set_standby, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_corehtmlobjectelement__get_type, (setter)WebKit::_wrap_corehtmlobjectelement__set_type, 0, 0 },
    { (char*)"useMap", (getter)WebKit::_wrap_corehtmlobjectelement__get_useMap, (setter)WebKit::_wrap_corehtmlobjectelement__set_useMap, 0, 0 },
    { (char*)"vspace", (getter)WebKit::_wrap_corehtmlobjectelement__get_vspace, (setter)WebKit::_wrap_corehtmlobjectelement__set_vspace, 0, 0 },
    { (char*)"width", (getter)WebKit::_wrap_corehtmlobjectelement__get_width, (setter)WebKit::_wrap_corehtmlobjectelement__set_width, 0, 0 },
    { (char*)"willValidate", (getter)WebKit::_wrap_corehtmlobjectelement__get_willValidate, (setter)0, 0, 0 },
    { (char*)"contentDocument", (getter)WebKit::_wrap_corehtmlobjectelement__get_contentDocument, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLObjectElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLObjectElement* cobj = coreHTMLObjectElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLObjectElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLObjectElement",                   /* tp_name */
    sizeof(PyDOMHTMLObjectElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLObjectElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlobjectelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLObjectElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLOListElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLOListElement_init(HTMLOListElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlolistelement__get_compact(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLOListElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::compactAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlolistelement__set_compact(PyObject *self, PyObject *args, void *closure)
{
    int compact;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlolistelement__set_compact", &compact))
        return -1;
    bool cvt_compact = (bool)compact;
    coreHTMLOListElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::compactAttr, cvt_compact);

    return 0;
}

static PyObject *
_wrap_corehtmlolistelement__get_start(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLOListElement((PyDOMObject*)(self))->start();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlolistelement__set_start(PyObject *self, PyObject *args, void *closure)
{
    long start;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlolistelement__set_start", &start))
        return -1;
    coreHTMLOListElement((PyDOMObject*)(self))->setStart(start);

    return 0;
}

static PyObject *
_wrap_corehtmlolistelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLOListElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::typeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlolistelement__set_type(PyObject *self, PyObject *args, void *closure)
{
    char *type;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlolistelement__set_type", &type))
        return -1;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    coreHTMLOListElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::typeAttr, cvt_type);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlolistelement_getsets[] = {
    { (char*)"compact", (getter)WebKit::_wrap_corehtmlolistelement__get_compact, (setter)WebKit::_wrap_corehtmlolistelement__set_compact, 0, 0 },
    { (char*)"start", (getter)WebKit::_wrap_corehtmlolistelement__get_start, (setter)WebKit::_wrap_corehtmlolistelement__set_start, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_corehtmlolistelement__get_type, (setter)WebKit::_wrap_corehtmlolistelement__set_type, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLOListElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLOListElement* cobj = coreHTMLOListElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLOListElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLOListElement",                   /* tp_name */
    sizeof(PyDOMHTMLOListElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLOListElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlolistelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLOListElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLOptGroupElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLOptGroupElement_init(HTMLOptGroupElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmloptgroupelement__get_disabled(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLOptGroupElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::disabledAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmloptgroupelement__set_disabled(PyObject *self, PyObject *args, void *closure)
{
    int disabled;

    if (!PyArg_Parse(args,"i:_wrap_corehtmloptgroupelement__set_disabled", &disabled))
        return -1;
    bool cvt_disabled = (bool)disabled;
    coreHTMLOptGroupElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, cvt_disabled);

    return 0;
}

static PyObject *
_wrap_corehtmloptgroupelement__get_label(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLOptGroupElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::labelAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmloptgroupelement__set_label(PyObject *self, PyObject *args, void *closure)
{
    char *label;

    if (!PyArg_Parse(args,"s:_wrap_corehtmloptgroupelement__set_label", &label))
        return -1;
    WTF::String cvt_label = WTF::String::fromUTF8((const char*)label);
    coreHTMLOptGroupElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::labelAttr, cvt_label);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmloptgroupelement_getsets[] = {
    { (char*)"disabled", (getter)WebKit::_wrap_corehtmloptgroupelement__get_disabled, (setter)WebKit::_wrap_corehtmloptgroupelement__set_disabled, 0, 0 },
    { (char*)"label", (getter)WebKit::_wrap_corehtmloptgroupelement__get_label, (setter)WebKit::_wrap_corehtmloptgroupelement__set_label, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLOptGroupElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLOptGroupElement* cobj = coreHTMLOptGroupElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLOptGroupElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLOptGroupElement",                   /* tp_name */
    sizeof(PyDOMHTMLOptGroupElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLOptGroupElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmloptgroupelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLOptGroupElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLOptionElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLOptionElement_init(HTMLOptionElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmloptionelement__get_form(PyObject *self, void *closure)
{
    WebCore::HTMLFormElement* _ret;
    PyObject *py_ret;

    _ret = coreHTMLOptionElement((PyDOMObject*)(self))->form();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmloptionelement__get_defaultSelected(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLOptionElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::selectedAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmloptionelement__set_defaultSelected(PyObject *self, PyObject *args, void *closure)
{
    int defaultSelected;

    if (!PyArg_Parse(args,"i:_wrap_corehtmloptionelement__set_defaultSelected", &defaultSelected))
        return -1;
    bool cvt_defaultSelected = (bool)defaultSelected;
    coreHTMLOptionElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::selectedAttr, cvt_defaultSelected);

    return 0;
}

static PyObject *
_wrap_corehtmloptionelement__get_text(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLOptionElement((PyDOMObject*)(self))->text();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmloptionelement__get_index(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLOptionElement((PyDOMObject*)(self))->index();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corehtmloptionelement__get_disabled(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLOptionElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::disabledAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmloptionelement__set_disabled(PyObject *self, PyObject *args, void *closure)
{
    int disabled;

    if (!PyArg_Parse(args,"i:_wrap_corehtmloptionelement__set_disabled", &disabled))
        return -1;
    bool cvt_disabled = (bool)disabled;
    coreHTMLOptionElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, cvt_disabled);

    return 0;
}

static PyObject *
_wrap_corehtmloptionelement__get_label(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLOptionElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::labelAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmloptionelement__set_label(PyObject *self, PyObject *args, void *closure)
{
    char *label;

    if (!PyArg_Parse(args,"s:_wrap_corehtmloptionelement__set_label", &label))
        return -1;
    WTF::String cvt_label = WTF::String::fromUTF8((const char*)label);
    coreHTMLOptionElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::labelAttr, cvt_label);

    return 0;
}

static PyObject *
_wrap_corehtmloptionelement__get_selected(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLOptionElement((PyDOMObject*)(self))->selected();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmloptionelement__set_selected(PyObject *self, PyObject *args, void *closure)
{
    int selected;

    if (!PyArg_Parse(args,"i:_wrap_corehtmloptionelement__set_selected", &selected))
        return -1;
    bool cvt_selected = (bool)selected;
    coreHTMLOptionElement((PyDOMObject*)(self))->setSelected(cvt_selected);

    return 0;
}

static PyObject *
_wrap_corehtmloptionelement__get_value(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLOptionElement((PyDOMObject*)(self))->value();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmloptionelement__set_value(PyObject *self, PyObject *args, void *closure)
{
    char *value;

    if (!PyArg_Parse(args,"s:_wrap_corehtmloptionelement__set_value", &value))
        return -1;
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    coreHTMLOptionElement((PyDOMObject*)(self))->setValue(cvt_value);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmloptionelement_getsets[] = {
    { (char*)"form", (getter)WebKit::_wrap_corehtmloptionelement__get_form, (setter)0, 0, 0 },
    { (char*)"defaultSelected", (getter)WebKit::_wrap_corehtmloptionelement__get_defaultSelected, (setter)WebKit::_wrap_corehtmloptionelement__set_defaultSelected, 0, 0 },
    { (char*)"text", (getter)WebKit::_wrap_corehtmloptionelement__get_text, (setter)0, 0, 0 },
    { (char*)"index", (getter)WebKit::_wrap_corehtmloptionelement__get_index, (setter)0, 0, 0 },
    { (char*)"disabled", (getter)WebKit::_wrap_corehtmloptionelement__get_disabled, (setter)WebKit::_wrap_corehtmloptionelement__set_disabled, 0, 0 },
    { (char*)"label", (getter)WebKit::_wrap_corehtmloptionelement__get_label, (setter)WebKit::_wrap_corehtmloptionelement__set_label, 0, 0 },
    { (char*)"selected", (getter)WebKit::_wrap_corehtmloptionelement__get_selected, (setter)WebKit::_wrap_corehtmloptionelement__set_selected, 0, 0 },
    { (char*)"value", (getter)WebKit::_wrap_corehtmloptionelement__get_value, (setter)WebKit::_wrap_corehtmloptionelement__set_value, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLOptionElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLOptionElement* cobj = coreHTMLOptionElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLOptionElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLOptionElement",                   /* tp_name */
    sizeof(PyDOMHTMLOptionElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLOptionElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmloptionelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLOptionElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLOptionsCollection ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLOptionsCollection_init(HTMLOptionsCollection *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLCollection_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLOptionsCollection_add(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"option", (char*)"index", NULL };
    PyDOMObject *option;
    unsigned long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!k:pywebkit.HTMLOptionsCollection.add", kwlist, PtrPyDOMHTMLOptionElement_Type, &option, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreHTMLOptionsCollection(self)->add(coreHTMLOptionElement(option), index, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLOptionsCollection_remove(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    unsigned long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.HTMLOptionsCollection.remove", kwlist, &index))
        return NULL;
    
    coreHTMLOptionsCollection(self)->remove(index);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLOptionsCollection_methods[] = {
    { "add", (PyCFunction)WebKit::_wrap_HTMLOptionsCollection_add, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "remove", (PyCFunction)WebKit::_wrap_HTMLOptionsCollection_remove, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmloptionscollection__get_selectedIndex(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLOptionsCollection((PyDOMObject*)(self))->selectedIndex();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmloptionscollection__set_selectedIndex(PyObject *self, PyObject *args, void *closure)
{
    long selectedIndex;

    if (!PyArg_Parse(args,"l:_wrap_corehtmloptionscollection__set_selectedIndex", &selectedIndex))
        return -1;
    coreHTMLOptionsCollection((PyDOMObject*)(self))->setSelectedIndex(selectedIndex);

    return 0;
}

static PyObject *
_wrap_corehtmloptionscollection__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreHTMLOptionsCollection((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

static int
_wrap_corehtmloptionscollection__set_length(PyObject *self, PyObject *args, void *closure)
{
    unsigned long length;

    if (!PyArg_Parse(args,"k:_wrap_corehtmloptionscollection__set_length", &length))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreHTMLOptionsCollection((PyDOMObject*)(self))->setLength(length, ec);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmloptionscollection_getsets[] = {
    { (char*)"selectedIndex", (getter)WebKit::_wrap_corehtmloptionscollection__get_selectedIndex, (setter)WebKit::_wrap_corehtmloptionscollection__set_selectedIndex, 0, 0 },
    { (char*)"length", (getter)WebKit::_wrap_corehtmloptionscollection__get_length, (setter)WebKit::_wrap_corehtmloptionscollection__set_length, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLOptionsCollection(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLOptionsCollection* cobj = coreHTMLOptionsCollection(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLOptionsCollection_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLOptionsCollection",                   /* tp_name */
    sizeof(PyDOMHTMLOptionsCollection),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLOptionsCollection,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLOptionsCollection_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmloptionscollection_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLOptionsCollection_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLParagraphElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLParagraphElement_init(HTMLParagraphElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlparagraphelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLParagraphElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlparagraphelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlparagraphelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLParagraphElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlparagraphelement_getsets[] = {
    { (char*)"align", (getter)WebKit::_wrap_corehtmlparagraphelement__get_align, (setter)WebKit::_wrap_corehtmlparagraphelement__set_align, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLParagraphElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLParagraphElement* cobj = coreHTMLParagraphElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLParagraphElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLParagraphElement",                   /* tp_name */
    sizeof(PyDOMHTMLParagraphElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLParagraphElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlparagraphelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLParagraphElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLParamElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLParamElement_init(HTMLParamElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlparamelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLParamElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::nameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlparamelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlparamelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLParamElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::nameAttr, cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmlparamelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLParamElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::typeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlparamelement__set_type(PyObject *self, PyObject *args, void *closure)
{
    char *type;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlparamelement__set_type", &type))
        return -1;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    coreHTMLParamElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::typeAttr, cvt_type);

    return 0;
}

static PyObject *
_wrap_corehtmlparamelement__get_value(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLParamElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::valueAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlparamelement__set_value(PyObject *self, PyObject *args, void *closure)
{
    char *value;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlparamelement__set_value", &value))
        return -1;
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    coreHTMLParamElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::valueAttr, cvt_value);

    return 0;
}

static PyObject *
_wrap_corehtmlparamelement__get_valueType(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLParamElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::valuetypeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlparamelement__set_valueType(PyObject *self, PyObject *args, void *closure)
{
    char *valueType;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlparamelement__set_valueType", &valueType))
        return -1;
    WTF::String cvt_valueType = WTF::String::fromUTF8((const char*)valueType);
    coreHTMLParamElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::valuetypeAttr, cvt_valueType);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlparamelement_getsets[] = {
    { (char*)"name", (getter)WebKit::_wrap_corehtmlparamelement__get_name, (setter)WebKit::_wrap_corehtmlparamelement__set_name, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_corehtmlparamelement__get_type, (setter)WebKit::_wrap_corehtmlparamelement__set_type, 0, 0 },
    { (char*)"value", (getter)WebKit::_wrap_corehtmlparamelement__get_value, (setter)WebKit::_wrap_corehtmlparamelement__set_value, 0, 0 },
    { (char*)"valueType", (getter)WebKit::_wrap_corehtmlparamelement__get_valueType, (setter)WebKit::_wrap_corehtmlparamelement__set_valueType, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLParamElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLParamElement* cobj = coreHTMLParamElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLParamElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLParamElement",                   /* tp_name */
    sizeof(PyDOMHTMLParamElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLParamElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlparamelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLParamElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLPreElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLPreElement_init(HTMLPreElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlpreelement__get_width(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLPreElement((PyDOMObject*)(self))->getIntegralAttribute(WebCore::HTMLNames::widthAttr);
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlpreelement__set_width(PyObject *self, PyObject *args, void *closure)
{
    long width;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlpreelement__set_width", &width))
        return -1;
    coreHTMLPreElement((PyDOMObject*)(self))->setIntegralAttribute(WebCore::HTMLNames::widthAttr, width);

    return 0;
}

static PyObject *
_wrap_corehtmlpreelement__get_wrap(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLPreElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::wrapAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlpreelement__set_wrap(PyObject *self, PyObject *args, void *closure)
{
    int wrap;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlpreelement__set_wrap", &wrap))
        return -1;
    bool cvt_wrap = (bool)wrap;
    coreHTMLPreElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::wrapAttr, cvt_wrap);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlpreelement_getsets[] = {
    { (char*)"width", (getter)WebKit::_wrap_corehtmlpreelement__get_width, (setter)WebKit::_wrap_corehtmlpreelement__set_width, 0, 0 },
    { (char*)"wrap", (getter)WebKit::_wrap_corehtmlpreelement__get_wrap, (setter)WebKit::_wrap_corehtmlpreelement__set_wrap, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLPreElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLPreElement* cobj = coreHTMLPreElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLPreElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLPreElement",                   /* tp_name */
    sizeof(PyDOMHTMLPreElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLPreElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlpreelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLPreElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLProgressElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLProgressElement_init(HTMLProgressElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlprogresselement__get_value(PyObject *self, void *closure)
{
    double ret;

    ret = coreHTMLProgressElement((PyDOMObject*)(self))->value();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corehtmlprogresselement__set_value(PyObject *self, PyObject *args, void *closure)
{
    double value;

    if (!PyArg_Parse(args,"d:_wrap_corehtmlprogresselement__set_value", &value))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreHTMLProgressElement((PyDOMObject*)(self))->setValue(value, ec);

    return 0;
}

static PyObject *
_wrap_corehtmlprogresselement__get_max(PyObject *self, void *closure)
{
    double ret;

    ret = coreHTMLProgressElement((PyDOMObject*)(self))->max();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corehtmlprogresselement__set_max(PyObject *self, PyObject *args, void *closure)
{
    double max;

    if (!PyArg_Parse(args,"d:_wrap_corehtmlprogresselement__set_max", &max))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreHTMLProgressElement((PyDOMObject*)(self))->setMax(max, ec);

    return 0;
}

static PyObject *
_wrap_corehtmlprogresselement__get_position(PyObject *self, void *closure)
{
    double ret;

    ret = coreHTMLProgressElement((PyDOMObject*)(self))->position();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_corehtmlprogresselement__get_form(PyObject *self, void *closure)
{
    WebCore::HTMLFormElement* _ret;
    PyObject *py_ret;

    _ret = coreHTMLProgressElement((PyDOMObject*)(self))->form();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlprogresselement__get_labels(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    _ret = WTF::getPtr(coreHTMLProgressElement((PyDOMObject*)(self))->labels());
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlprogresselement_getsets[] = {
    { (char*)"value", (getter)WebKit::_wrap_corehtmlprogresselement__get_value, (setter)WebKit::_wrap_corehtmlprogresselement__set_value, 0, 0 },
    { (char*)"max", (getter)WebKit::_wrap_corehtmlprogresselement__get_max, (setter)WebKit::_wrap_corehtmlprogresselement__set_max, 0, 0 },
    { (char*)"position", (getter)WebKit::_wrap_corehtmlprogresselement__get_position, (setter)0, 0, 0 },
    { (char*)"form", (getter)WebKit::_wrap_corehtmlprogresselement__get_form, (setter)0, 0, 0 },
    { (char*)"labels", (getter)WebKit::_wrap_corehtmlprogresselement__get_labels, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLProgressElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLProgressElement* cobj = coreHTMLProgressElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLProgressElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLProgressElement",                   /* tp_name */
    sizeof(PyDOMHTMLProgressElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLProgressElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlprogresselement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLProgressElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLQuoteElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLQuoteElement_init(HTMLQuoteElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlquoteelement__get_cite(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLQuoteElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::citeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlquoteelement__set_cite(PyObject *self, PyObject *args, void *closure)
{
    char *cite;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlquoteelement__set_cite", &cite))
        return -1;
    WTF::String cvt_cite = WTF::String::fromUTF8((const char*)cite);
    coreHTMLQuoteElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::citeAttr, cvt_cite);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlquoteelement_getsets[] = {
    { (char*)"cite", (getter)WebKit::_wrap_corehtmlquoteelement__get_cite, (setter)WebKit::_wrap_corehtmlquoteelement__set_cite, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLQuoteElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLQuoteElement* cobj = coreHTMLQuoteElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLQuoteElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLQuoteElement",                   /* tp_name */
    sizeof(PyDOMHTMLQuoteElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLQuoteElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlquoteelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLQuoteElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLScriptElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLScriptElement_init(HTMLScriptElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlscriptelement__get_text(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLScriptElement((PyDOMObject*)(self))->text();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlscriptelement__set_text(PyObject *self, PyObject *args, void *closure)
{
    char *text;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlscriptelement__set_text", &text))
        return -1;
    WTF::String cvt_text = WTF::String::fromUTF8((const char*)text);
    coreHTMLScriptElement((PyDOMObject*)(self))->setText(cvt_text);

    return 0;
}

static PyObject *
_wrap_corehtmlscriptelement__get_htmlFor(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLScriptElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::forAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlscriptelement__set_htmlFor(PyObject *self, PyObject *args, void *closure)
{
    char *htmlFor;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlscriptelement__set_htmlFor", &htmlFor))
        return -1;
    WTF::String cvt_htmlFor = WTF::String::fromUTF8((const char*)htmlFor);
    coreHTMLScriptElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::forAttr, cvt_htmlFor);

    return 0;
}

static PyObject *
_wrap_corehtmlscriptelement__get_event(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLScriptElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::eventAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlscriptelement__set_event(PyObject *self, PyObject *args, void *closure)
{
    char *event;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlscriptelement__set_event", &event))
        return -1;
    WTF::String cvt_event = WTF::String::fromUTF8((const char*)event);
    coreHTMLScriptElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::eventAttr, cvt_event);

    return 0;
}

static PyObject *
_wrap_corehtmlscriptelement__get_charset(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLScriptElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::charsetAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlscriptelement__set_charset(PyObject *self, PyObject *args, void *closure)
{
    char *charset;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlscriptelement__set_charset", &charset))
        return -1;
    WTF::String cvt_charset = WTF::String::fromUTF8((const char*)charset);
    coreHTMLScriptElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::charsetAttr, cvt_charset);

    return 0;
}

static PyObject *
_wrap_corehtmlscriptelement__get_async(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLScriptElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::asyncAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlscriptelement__set_async(PyObject *self, PyObject *args, void *closure)
{
    int async;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlscriptelement__set_async", &async))
        return -1;
    bool cvt_async = (bool)async;
    coreHTMLScriptElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::asyncAttr, cvt_async);

    return 0;
}

static PyObject *
_wrap_corehtmlscriptelement__get_defer(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLScriptElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::deferAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlscriptelement__set_defer(PyObject *self, PyObject *args, void *closure)
{
    int defer;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlscriptelement__set_defer", &defer))
        return -1;
    bool cvt_defer = (bool)defer;
    coreHTMLScriptElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::deferAttr, cvt_defer);

    return 0;
}

static PyObject *
_wrap_corehtmlscriptelement__get_src(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLScriptElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::srcAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlscriptelement__set_src(PyObject *self, PyObject *args, void *closure)
{
    char *src;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlscriptelement__set_src", &src))
        return -1;
    WTF::String cvt_src = WTF::String::fromUTF8((const char*)src);
    coreHTMLScriptElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::srcAttr, cvt_src);

    return 0;
}

static PyObject *
_wrap_corehtmlscriptelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLScriptElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::typeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlscriptelement__set_type(PyObject *self, PyObject *args, void *closure)
{
    char *type;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlscriptelement__set_type", &type))
        return -1;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    coreHTMLScriptElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::typeAttr, cvt_type);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlscriptelement_getsets[] = {
    { (char*)"text", (getter)WebKit::_wrap_corehtmlscriptelement__get_text, (setter)WebKit::_wrap_corehtmlscriptelement__set_text, 0, 0 },
    { (char*)"htmlFor", (getter)WebKit::_wrap_corehtmlscriptelement__get_htmlFor, (setter)WebKit::_wrap_corehtmlscriptelement__set_htmlFor, 0, 0 },
    { (char*)"event", (getter)WebKit::_wrap_corehtmlscriptelement__get_event, (setter)WebKit::_wrap_corehtmlscriptelement__set_event, 0, 0 },
    { (char*)"charset", (getter)WebKit::_wrap_corehtmlscriptelement__get_charset, (setter)WebKit::_wrap_corehtmlscriptelement__set_charset, 0, 0 },
    { (char*)"async", (getter)WebKit::_wrap_corehtmlscriptelement__get_async, (setter)WebKit::_wrap_corehtmlscriptelement__set_async, 0, 0 },
    { (char*)"defer", (getter)WebKit::_wrap_corehtmlscriptelement__get_defer, (setter)WebKit::_wrap_corehtmlscriptelement__set_defer, 0, 0 },
    { (char*)"src", (getter)WebKit::_wrap_corehtmlscriptelement__get_src, (setter)WebKit::_wrap_corehtmlscriptelement__set_src, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_corehtmlscriptelement__get_type, (setter)WebKit::_wrap_corehtmlscriptelement__set_type, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLScriptElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLScriptElement* cobj = coreHTMLScriptElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLScriptElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLScriptElement",                   /* tp_name */
    sizeof(PyDOMHTMLScriptElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLScriptElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlscriptelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLScriptElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLSelectElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLSelectElement_init(HTMLSelectElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLSelectElement_checkValidity(PyDOMObject *self)
{
    bool ret;

    
    ret = coreHTMLSelectElement(self)->checkValidity();
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_HTMLSelectElement_setCustomValidity(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"error", NULL };
    char *error;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLSelectElement.setCustomValidity", kwlist, &error))
        return NULL;
    WTF::String cvt_error = WTF::String::fromUTF8((const char*)error);
    
    coreHTMLSelectElement(self)->setCustomValidity(cvt_error);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLSelectElement_add(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"element", (char*)"before", NULL };
    PyDOMObject *element, *before;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:pywebkit.HTMLSelectElement.add", kwlist, PtrPyDOMHTMLElement_Type, &element, PtrPyDOMHTMLElement_Type, &before))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreHTMLSelectElement(self)->add(coreHTMLElement(element), coreHTMLElement(before), ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLSelectElement_remove(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.HTMLSelectElement.remove", kwlist, &index))
        return NULL;
    
    coreHTMLSelectElement(self)->remove(index);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLSelectElement_item(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    PyObject *py_ret;
    unsigned long index;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.HTMLSelectElement.item", kwlist, &index))
        return NULL;
    
    _ret = coreHTMLSelectElement(self)->item(index);
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_HTMLSelectElement_namedItem(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name;
    PyObject *py_ret;
    WebCore::Node* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLSelectElement.namedItem", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    
    _ret = coreHTMLSelectElement(self)->namedItem(cvt_name);
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLSelectElement_methods[] = {
    { "checkValidity", (PyCFunction)WebKit::_wrap_HTMLSelectElement_checkValidity, METH_NOARGS,
      NULL },
    { "setCustomValidity", (PyCFunction)WebKit::_wrap_HTMLSelectElement_setCustomValidity, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "add", (PyCFunction)WebKit::_wrap_HTMLSelectElement_add, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "remove", (PyCFunction)WebKit::_wrap_HTMLSelectElement_remove, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "item", (PyCFunction)WebKit::_wrap_HTMLSelectElement_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "namedItem", (PyCFunction)WebKit::_wrap_HTMLSelectElement_namedItem, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmlselectelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLSelectElement((PyDOMObject*)(self))->type();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlselectelement__get_selectedIndex(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLSelectElement((PyDOMObject*)(self))->selectedIndex();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlselectelement__set_selectedIndex(PyObject *self, PyObject *args, void *closure)
{
    long selectedIndex;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlselectelement__set_selectedIndex", &selectedIndex))
        return -1;
    coreHTMLSelectElement((PyDOMObject*)(self))->setSelectedIndex(selectedIndex);

    return 0;
}

static PyObject *
_wrap_corehtmlselectelement__get_value(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLSelectElement((PyDOMObject*)(self))->value();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlselectelement__set_value(PyObject *self, PyObject *args, void *closure)
{
    char *value;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlselectelement__set_value", &value))
        return -1;
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    coreHTMLSelectElement((PyDOMObject*)(self))->setValue(cvt_value);

    return 0;
}

static PyObject *
_wrap_corehtmlselectelement__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreHTMLSelectElement((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

static int
_wrap_corehtmlselectelement__set_length(PyObject *self, PyObject *args, void *closure)
{
    unsigned long length;

    if (!PyArg_Parse(args,"k:_wrap_corehtmlselectelement__set_length", &length))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreHTMLSelectElement((PyDOMObject*)(self))->setLength(length, ec);

    return 0;
}

static PyObject *
_wrap_corehtmlselectelement__get_form(PyObject *self, void *closure)
{
    WebCore::HTMLFormElement* _ret;
    PyObject *py_ret;

    _ret = coreHTMLSelectElement((PyDOMObject*)(self))->form();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlselectelement__get_validity(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::ValidityState* _ret;

    _ret = coreHTMLSelectElement((PyDOMObject*)(self))->validity();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlselectelement__get_willValidate(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLSelectElement((PyDOMObject*)(self))->willValidate();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corehtmlselectelement__get_validationMessage(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLSelectElement((PyDOMObject*)(self))->validationMessage();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlselectelement__get_options(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLOptionsCollection* _ret;

    _ret = WTF::getPtr(coreHTMLSelectElement((PyDOMObject*)(self))->options());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmlselectelement__get_disabled(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLSelectElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::disabledAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlselectelement__set_disabled(PyObject *self, PyObject *args, void *closure)
{
    int disabled;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlselectelement__set_disabled", &disabled))
        return -1;
    bool cvt_disabled = (bool)disabled;
    coreHTMLSelectElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, cvt_disabled);

    return 0;
}

static PyObject *
_wrap_corehtmlselectelement__get_autofocus(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLSelectElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::autofocusAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlselectelement__set_autofocus(PyObject *self, PyObject *args, void *closure)
{
    int autofocus;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlselectelement__set_autofocus", &autofocus))
        return -1;
    bool cvt_autofocus = (bool)autofocus;
    coreHTMLSelectElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::autofocusAttr, cvt_autofocus);

    return 0;
}

static PyObject *
_wrap_corehtmlselectelement__get_multiple(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLSelectElement((PyDOMObject*)(self))->multiple();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlselectelement__set_multiple(PyObject *self, PyObject *args, void *closure)
{
    int multiple;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlselectelement__set_multiple", &multiple))
        return -1;
    bool cvt_multiple = (bool)multiple;
    coreHTMLSelectElement((PyDOMObject*)(self))->setMultiple(cvt_multiple);

    return 0;
}

static PyObject *
_wrap_corehtmlselectelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLSelectElement((PyDOMObject*)(self))->name();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlselectelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlselectelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLSelectElement((PyDOMObject*)(self))->setName(cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmlselectelement__get_size(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLSelectElement((PyDOMObject*)(self))->size();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmlselectelement__set_size(PyObject *self, PyObject *args, void *closure)
{
    long size;

    if (!PyArg_Parse(args,"l:_wrap_corehtmlselectelement__set_size", &size))
        return -1;
    coreHTMLSelectElement((PyDOMObject*)(self))->setSize(size);

    return 0;
}

static PyObject *
_wrap_corehtmlselectelement__get_labels(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    _ret = WTF::getPtr(coreHTMLSelectElement((PyDOMObject*)(self))->labels());
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlselectelement_getsets[] = {
    { (char*)"type", (getter)WebKit::_wrap_corehtmlselectelement__get_type, (setter)0, 0, 0 },
    { (char*)"selectedIndex", (getter)WebKit::_wrap_corehtmlselectelement__get_selectedIndex, (setter)WebKit::_wrap_corehtmlselectelement__set_selectedIndex, 0, 0 },
    { (char*)"value", (getter)WebKit::_wrap_corehtmlselectelement__get_value, (setter)WebKit::_wrap_corehtmlselectelement__set_value, 0, 0 },
    { (char*)"length", (getter)WebKit::_wrap_corehtmlselectelement__get_length, (setter)WebKit::_wrap_corehtmlselectelement__set_length, 0, 0 },
    { (char*)"form", (getter)WebKit::_wrap_corehtmlselectelement__get_form, (setter)0, 0, 0 },
    { (char*)"validity", (getter)WebKit::_wrap_corehtmlselectelement__get_validity, (setter)0, 0, 0 },
    { (char*)"willValidate", (getter)WebKit::_wrap_corehtmlselectelement__get_willValidate, (setter)0, 0, 0 },
    { (char*)"validationMessage", (getter)WebKit::_wrap_corehtmlselectelement__get_validationMessage, (setter)0, 0, 0 },
    { (char*)"options", (getter)WebKit::_wrap_corehtmlselectelement__get_options, (setter)0, 0, 0 },
    { (char*)"disabled", (getter)WebKit::_wrap_corehtmlselectelement__get_disabled, (setter)WebKit::_wrap_corehtmlselectelement__set_disabled, 0, 0 },
    { (char*)"autofocus", (getter)WebKit::_wrap_corehtmlselectelement__get_autofocus, (setter)WebKit::_wrap_corehtmlselectelement__set_autofocus, 0, 0 },
    { (char*)"multiple", (getter)WebKit::_wrap_corehtmlselectelement__get_multiple, (setter)WebKit::_wrap_corehtmlselectelement__set_multiple, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corehtmlselectelement__get_name, (setter)WebKit::_wrap_corehtmlselectelement__set_name, 0, 0 },
    { (char*)"size", (getter)WebKit::_wrap_corehtmlselectelement__get_size, (setter)WebKit::_wrap_corehtmlselectelement__set_size, 0, 0 },
    { (char*)"labels", (getter)WebKit::_wrap_corehtmlselectelement__get_labels, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLSelectElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLSelectElement* cobj = coreHTMLSelectElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLSelectElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLSelectElement",                   /* tp_name */
    sizeof(PyDOMHTMLSelectElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLSelectElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLSelectElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlselectelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLSelectElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLSourceElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLSourceElement_init(HTMLSourceElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlsourceelement__get_src(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLSourceElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::srcAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlsourceelement__set_src(PyObject *self, PyObject *args, void *closure)
{
    char *src;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlsourceelement__set_src", &src))
        return -1;
    WTF::String cvt_src = WTF::String::fromUTF8((const char*)src);
    coreHTMLSourceElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::srcAttr, cvt_src);

    return 0;
}

static PyObject *
_wrap_corehtmlsourceelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLSourceElement((PyDOMObject*)(self))->type();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlsourceelement__set_type(PyObject *self, PyObject *args, void *closure)
{
    char *type;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlsourceelement__set_type", &type))
        return -1;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    coreHTMLSourceElement((PyDOMObject*)(self))->setType(cvt_type);

    return 0;
}

static PyObject *
_wrap_corehtmlsourceelement__get_media(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLSourceElement((PyDOMObject*)(self))->media();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlsourceelement__set_media(PyObject *self, PyObject *args, void *closure)
{
    char *media;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlsourceelement__set_media", &media))
        return -1;
    WTF::String cvt_media = WTF::String::fromUTF8((const char*)media);
    coreHTMLSourceElement((PyDOMObject*)(self))->setMedia(cvt_media);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlsourceelement_getsets[] = {
    { (char*)"src", (getter)WebKit::_wrap_corehtmlsourceelement__get_src, (setter)WebKit::_wrap_corehtmlsourceelement__set_src, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_corehtmlsourceelement__get_type, (setter)WebKit::_wrap_corehtmlsourceelement__set_type, 0, 0 },
    { (char*)"media", (getter)WebKit::_wrap_corehtmlsourceelement__get_media, (setter)WebKit::_wrap_corehtmlsourceelement__set_media, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLSourceElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLSourceElement* cobj = coreHTMLSourceElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLSourceElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLSourceElement",                   /* tp_name */
    sizeof(PyDOMHTMLSourceElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLSourceElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlsourceelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLSourceElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLStyleElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLStyleElement_init(HTMLStyleElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlstyleelement__get_disabled(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLStyleElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::disabledAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlstyleelement__set_disabled(PyObject *self, PyObject *args, void *closure)
{
    int disabled;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlstyleelement__set_disabled", &disabled))
        return -1;
    bool cvt_disabled = (bool)disabled;
    coreHTMLStyleElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, cvt_disabled);

    return 0;
}

static PyObject *
_wrap_corehtmlstyleelement__get_media(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLStyleElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::mediaAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlstyleelement__set_media(PyObject *self, PyObject *args, void *closure)
{
    char *media;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlstyleelement__set_media", &media))
        return -1;
    WTF::String cvt_media = WTF::String::fromUTF8((const char*)media);
    coreHTMLStyleElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::mediaAttr, cvt_media);

    return 0;
}

static PyObject *
_wrap_corehtmlstyleelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLStyleElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::typeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlstyleelement__set_type(PyObject *self, PyObject *args, void *closure)
{
    char *type;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlstyleelement__set_type", &type))
        return -1;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    coreHTMLStyleElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::typeAttr, cvt_type);

    return 0;
}

static PyObject *
_wrap_corehtmlstyleelement__get_sheet(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::StyleSheet* _ret;

    _ret = coreHTMLStyleElement((PyDOMObject*)(self))->sheet();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlstyleelement_getsets[] = {
    { (char*)"disabled", (getter)WebKit::_wrap_corehtmlstyleelement__get_disabled, (setter)WebKit::_wrap_corehtmlstyleelement__set_disabled, 0, 0 },
    { (char*)"media", (getter)WebKit::_wrap_corehtmlstyleelement__get_media, (setter)WebKit::_wrap_corehtmlstyleelement__set_media, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_corehtmlstyleelement__get_type, (setter)WebKit::_wrap_corehtmlstyleelement__set_type, 0, 0 },
    { (char*)"sheet", (getter)WebKit::_wrap_corehtmlstyleelement__get_sheet, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLStyleElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLStyleElement* cobj = coreHTMLStyleElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLStyleElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLStyleElement",                   /* tp_name */
    sizeof(PyDOMHTMLStyleElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLStyleElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlstyleelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLStyleElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLTableCaptionElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLTableCaptionElement_init(HTMLTableCaptionElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmltablecaptionelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableCaptionElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecaptionelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecaptionelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLTableCaptionElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmltablecaptionelement_getsets[] = {
    { (char*)"align", (getter)WebKit::_wrap_corehtmltablecaptionelement__get_align, (setter)WebKit::_wrap_corehtmltablecaptionelement__set_align, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLTableCaptionElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLTableCaptionElement* cobj = coreHTMLTableCaptionElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLTableCaptionElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLTableCaptionElement",                   /* tp_name */
    sizeof(PyDOMHTMLTableCaptionElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLTableCaptionElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmltablecaptionelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLTableCaptionElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLTableCellElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLTableCellElement_init(HTMLTableCellElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmltablecellelement__get_cellIndex(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->cellIndex();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corehtmltablecellelement__get_abbr(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::abbrAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecellelement__set_abbr(PyObject *self, PyObject *args, void *closure)
{
    char *abbr;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecellelement__set_abbr", &abbr))
        return -1;
    WTF::String cvt_abbr = WTF::String::fromUTF8((const char*)abbr);
    coreHTMLTableCellElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::abbrAttr, cvt_abbr);

    return 0;
}

static PyObject *
_wrap_corehtmltablecellelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecellelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecellelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLTableCellElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

static PyObject *
_wrap_corehtmltablecellelement__get_axis(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::axisAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecellelement__set_axis(PyObject *self, PyObject *args, void *closure)
{
    char *axis;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecellelement__set_axis", &axis))
        return -1;
    WTF::String cvt_axis = WTF::String::fromUTF8((const char*)axis);
    coreHTMLTableCellElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::axisAttr, cvt_axis);

    return 0;
}

static PyObject *
_wrap_corehtmltablecellelement__get_bgColor(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::bgcolorAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecellelement__set_bgColor(PyObject *self, PyObject *args, void *closure)
{
    char *bgColor;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecellelement__set_bgColor", &bgColor))
        return -1;
    WTF::String cvt_bgColor = WTF::String::fromUTF8((const char*)bgColor);
    coreHTMLTableCellElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::bgcolorAttr, cvt_bgColor);

    return 0;
}

static PyObject *
_wrap_corehtmltablecellelement__get_ch(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::charAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecellelement__set_ch(PyObject *self, PyObject *args, void *closure)
{
    char *ch;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecellelement__set_ch", &ch))
        return -1;
    WTF::String cvt_ch = WTF::String::fromUTF8((const char*)ch);
    coreHTMLTableCellElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::charAttr, cvt_ch);

    return 0;
}

static PyObject *
_wrap_corehtmltablecellelement__get_chOff(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::charoffAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecellelement__set_chOff(PyObject *self, PyObject *args, void *closure)
{
    char *chOff;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecellelement__set_chOff", &chOff))
        return -1;
    WTF::String cvt_chOff = WTF::String::fromUTF8((const char*)chOff);
    coreHTMLTableCellElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::charoffAttr, cvt_chOff);

    return 0;
}

static PyObject *
_wrap_corehtmltablecellelement__get_colSpan(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->colSpan();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmltablecellelement__set_colSpan(PyObject *self, PyObject *args, void *closure)
{
    long colSpan;

    if (!PyArg_Parse(args,"l:_wrap_corehtmltablecellelement__set_colSpan", &colSpan))
        return -1;
    coreHTMLTableCellElement((PyDOMObject*)(self))->setColSpan(colSpan);

    return 0;
}

static PyObject *
_wrap_corehtmltablecellelement__get_headers(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::headersAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecellelement__set_headers(PyObject *self, PyObject *args, void *closure)
{
    char *headers;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecellelement__set_headers", &headers))
        return -1;
    WTF::String cvt_headers = WTF::String::fromUTF8((const char*)headers);
    coreHTMLTableCellElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::headersAttr, cvt_headers);

    return 0;
}

static PyObject *
_wrap_corehtmltablecellelement__get_height(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::heightAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecellelement__set_height(PyObject *self, PyObject *args, void *closure)
{
    char *height;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecellelement__set_height", &height))
        return -1;
    WTF::String cvt_height = WTF::String::fromUTF8((const char*)height);
    coreHTMLTableCellElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::heightAttr, cvt_height);

    return 0;
}

static PyObject *
_wrap_corehtmltablecellelement__get_noWrap(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::nowrapAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmltablecellelement__set_noWrap(PyObject *self, PyObject *args, void *closure)
{
    int noWrap;

    if (!PyArg_Parse(args,"i:_wrap_corehtmltablecellelement__set_noWrap", &noWrap))
        return -1;
    bool cvt_noWrap = (bool)noWrap;
    coreHTMLTableCellElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::nowrapAttr, cvt_noWrap);

    return 0;
}

static PyObject *
_wrap_corehtmltablecellelement__get_rowSpan(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->rowSpan();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmltablecellelement__set_rowSpan(PyObject *self, PyObject *args, void *closure)
{
    long rowSpan;

    if (!PyArg_Parse(args,"l:_wrap_corehtmltablecellelement__set_rowSpan", &rowSpan))
        return -1;
    coreHTMLTableCellElement((PyDOMObject*)(self))->setRowSpan(rowSpan);

    return 0;
}

static PyObject *
_wrap_corehtmltablecellelement__get_scope(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::scopeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecellelement__set_scope(PyObject *self, PyObject *args, void *closure)
{
    char *scope;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecellelement__set_scope", &scope))
        return -1;
    WTF::String cvt_scope = WTF::String::fromUTF8((const char*)scope);
    coreHTMLTableCellElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::scopeAttr, cvt_scope);

    return 0;
}

static PyObject *
_wrap_corehtmltablecellelement__get_vAlign(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::valignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecellelement__set_vAlign(PyObject *self, PyObject *args, void *closure)
{
    char *vAlign;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecellelement__set_vAlign", &vAlign))
        return -1;
    WTF::String cvt_vAlign = WTF::String::fromUTF8((const char*)vAlign);
    coreHTMLTableCellElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::valignAttr, cvt_vAlign);

    return 0;
}

static PyObject *
_wrap_corehtmltablecellelement__get_width(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableCellElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::widthAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecellelement__set_width(PyObject *self, PyObject *args, void *closure)
{
    char *width;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecellelement__set_width", &width))
        return -1;
    WTF::String cvt_width = WTF::String::fromUTF8((const char*)width);
    coreHTMLTableCellElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::widthAttr, cvt_width);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmltablecellelement_getsets[] = {
    { (char*)"cellIndex", (getter)WebKit::_wrap_corehtmltablecellelement__get_cellIndex, (setter)0, 0, 0 },
    { (char*)"abbr", (getter)WebKit::_wrap_corehtmltablecellelement__get_abbr, (setter)WebKit::_wrap_corehtmltablecellelement__set_abbr, 0, 0 },
    { (char*)"align", (getter)WebKit::_wrap_corehtmltablecellelement__get_align, (setter)WebKit::_wrap_corehtmltablecellelement__set_align, 0, 0 },
    { (char*)"axis", (getter)WebKit::_wrap_corehtmltablecellelement__get_axis, (setter)WebKit::_wrap_corehtmltablecellelement__set_axis, 0, 0 },
    { (char*)"bgColor", (getter)WebKit::_wrap_corehtmltablecellelement__get_bgColor, (setter)WebKit::_wrap_corehtmltablecellelement__set_bgColor, 0, 0 },
    { (char*)"ch", (getter)WebKit::_wrap_corehtmltablecellelement__get_ch, (setter)WebKit::_wrap_corehtmltablecellelement__set_ch, 0, 0 },
    { (char*)"chOff", (getter)WebKit::_wrap_corehtmltablecellelement__get_chOff, (setter)WebKit::_wrap_corehtmltablecellelement__set_chOff, 0, 0 },
    { (char*)"colSpan", (getter)WebKit::_wrap_corehtmltablecellelement__get_colSpan, (setter)WebKit::_wrap_corehtmltablecellelement__set_colSpan, 0, 0 },
    { (char*)"headers", (getter)WebKit::_wrap_corehtmltablecellelement__get_headers, (setter)WebKit::_wrap_corehtmltablecellelement__set_headers, 0, 0 },
    { (char*)"height", (getter)WebKit::_wrap_corehtmltablecellelement__get_height, (setter)WebKit::_wrap_corehtmltablecellelement__set_height, 0, 0 },
    { (char*)"noWrap", (getter)WebKit::_wrap_corehtmltablecellelement__get_noWrap, (setter)WebKit::_wrap_corehtmltablecellelement__set_noWrap, 0, 0 },
    { (char*)"rowSpan", (getter)WebKit::_wrap_corehtmltablecellelement__get_rowSpan, (setter)WebKit::_wrap_corehtmltablecellelement__set_rowSpan, 0, 0 },
    { (char*)"scope", (getter)WebKit::_wrap_corehtmltablecellelement__get_scope, (setter)WebKit::_wrap_corehtmltablecellelement__set_scope, 0, 0 },
    { (char*)"vAlign", (getter)WebKit::_wrap_corehtmltablecellelement__get_vAlign, (setter)WebKit::_wrap_corehtmltablecellelement__set_vAlign, 0, 0 },
    { (char*)"width", (getter)WebKit::_wrap_corehtmltablecellelement__get_width, (setter)WebKit::_wrap_corehtmltablecellelement__set_width, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLTableCellElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLTableCellElement* cobj = coreHTMLTableCellElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLTableCellElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLTableCellElement",                   /* tp_name */
    sizeof(PyDOMHTMLTableCellElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLTableCellElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmltablecellelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLTableCellElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLTableColElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLTableColElement_init(HTMLTableColElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmltablecolelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableColElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecolelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecolelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLTableColElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

static PyObject *
_wrap_corehtmltablecolelement__get_ch(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableColElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::charAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecolelement__set_ch(PyObject *self, PyObject *args, void *closure)
{
    char *ch;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecolelement__set_ch", &ch))
        return -1;
    WTF::String cvt_ch = WTF::String::fromUTF8((const char*)ch);
    coreHTMLTableColElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::charAttr, cvt_ch);

    return 0;
}

static PyObject *
_wrap_corehtmltablecolelement__get_chOff(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableColElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::charoffAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecolelement__set_chOff(PyObject *self, PyObject *args, void *closure)
{
    char *chOff;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecolelement__set_chOff", &chOff))
        return -1;
    WTF::String cvt_chOff = WTF::String::fromUTF8((const char*)chOff);
    coreHTMLTableColElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::charoffAttr, cvt_chOff);

    return 0;
}

static PyObject *
_wrap_corehtmltablecolelement__get_span(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLTableColElement((PyDOMObject*)(self))->span();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmltablecolelement__set_span(PyObject *self, PyObject *args, void *closure)
{
    long span;

    if (!PyArg_Parse(args,"l:_wrap_corehtmltablecolelement__set_span", &span))
        return -1;
    coreHTMLTableColElement((PyDOMObject*)(self))->setSpan(span);

    return 0;
}

static PyObject *
_wrap_corehtmltablecolelement__get_vAlign(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableColElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::valignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecolelement__set_vAlign(PyObject *self, PyObject *args, void *closure)
{
    char *vAlign;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecolelement__set_vAlign", &vAlign))
        return -1;
    WTF::String cvt_vAlign = WTF::String::fromUTF8((const char*)vAlign);
    coreHTMLTableColElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::valignAttr, cvt_vAlign);

    return 0;
}

static PyObject *
_wrap_corehtmltablecolelement__get_width(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableColElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::widthAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablecolelement__set_width(PyObject *self, PyObject *args, void *closure)
{
    char *width;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablecolelement__set_width", &width))
        return -1;
    WTF::String cvt_width = WTF::String::fromUTF8((const char*)width);
    coreHTMLTableColElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::widthAttr, cvt_width);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmltablecolelement_getsets[] = {
    { (char*)"align", (getter)WebKit::_wrap_corehtmltablecolelement__get_align, (setter)WebKit::_wrap_corehtmltablecolelement__set_align, 0, 0 },
    { (char*)"ch", (getter)WebKit::_wrap_corehtmltablecolelement__get_ch, (setter)WebKit::_wrap_corehtmltablecolelement__set_ch, 0, 0 },
    { (char*)"chOff", (getter)WebKit::_wrap_corehtmltablecolelement__get_chOff, (setter)WebKit::_wrap_corehtmltablecolelement__set_chOff, 0, 0 },
    { (char*)"span", (getter)WebKit::_wrap_corehtmltablecolelement__get_span, (setter)WebKit::_wrap_corehtmltablecolelement__set_span, 0, 0 },
    { (char*)"vAlign", (getter)WebKit::_wrap_corehtmltablecolelement__get_vAlign, (setter)WebKit::_wrap_corehtmltablecolelement__set_vAlign, 0, 0 },
    { (char*)"width", (getter)WebKit::_wrap_corehtmltablecolelement__get_width, (setter)WebKit::_wrap_corehtmltablecolelement__set_width, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLTableColElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLTableColElement* cobj = coreHTMLTableColElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLTableColElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLTableColElement",                   /* tp_name */
    sizeof(PyDOMHTMLTableColElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLTableColElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmltablecolelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLTableColElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLTableElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLTableElement_init(HTMLTableElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLTableElement_createTHead(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::HTMLElement* _ret;

    
    _ret = WTF::getPtr(coreHTMLTableElement(self)->createTHead());
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_HTMLTableElement_deleteTHead(PyDOMObject *self)
{
    
    coreHTMLTableElement(self)->deleteTHead();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLTableElement_createTFoot(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::HTMLElement* _ret;

    
    _ret = WTF::getPtr(coreHTMLTableElement(self)->createTFoot());
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_HTMLTableElement_deleteTFoot(PyDOMObject *self)
{
    
    coreHTMLTableElement(self)->deleteTFoot();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLTableElement_createCaption(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::HTMLElement* _ret;

    
    _ret = WTF::getPtr(coreHTMLTableElement(self)->createCaption());
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_HTMLTableElement_deleteCaption(PyDOMObject *self)
{
    
    coreHTMLTableElement(self)->deleteCaption();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLTableElement_insertRow(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    PyObject *py_ret;
    WebCore::HTMLElement* _ret;
    long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.HTMLTableElement.insertRow", kwlist, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreHTMLTableElement(self)->insertRow(index, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_HTMLTableElement_deleteRow(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.HTMLTableElement.deleteRow", kwlist, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreHTMLTableElement(self)->deleteRow(index, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLTableElement_methods[] = {
    { "createTHead", (PyCFunction)WebKit::_wrap_HTMLTableElement_createTHead, METH_NOARGS,
      NULL },
    { "deleteTHead", (PyCFunction)WebKit::_wrap_HTMLTableElement_deleteTHead, METH_NOARGS,
      NULL },
    { "createTFoot", (PyCFunction)WebKit::_wrap_HTMLTableElement_createTFoot, METH_NOARGS,
      NULL },
    { "deleteTFoot", (PyCFunction)WebKit::_wrap_HTMLTableElement_deleteTFoot, METH_NOARGS,
      NULL },
    { "createCaption", (PyCFunction)WebKit::_wrap_HTMLTableElement_createCaption, METH_NOARGS,
      NULL },
    { "deleteCaption", (PyCFunction)WebKit::_wrap_HTMLTableElement_deleteCaption, METH_NOARGS,
      NULL },
    { "insertRow", (PyCFunction)WebKit::_wrap_HTMLTableElement_insertRow, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "deleteRow", (PyCFunction)WebKit::_wrap_HTMLTableElement_deleteRow, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmltableelement__get_caption(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLTableCaptionElement* _ret;

    _ret = coreHTMLTableElement((PyDOMObject*)(self))->caption();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmltableelement__set_caption(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *caption;

    if (!PyArg_Parse(args,"O!:_wrap_corehtmltableelement__set_caption", PtrPyDOMHTMLTableCaptionElement_Type, &caption))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreHTMLTableElement((PyDOMObject*)(self))->setCaption(coreHTMLTableCaptionElement(caption), ec);

    return 0;
}

static PyObject *
_wrap_corehtmltableelement__get_tHead(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLTableSectionElement* _ret;

    _ret = coreHTMLTableElement((PyDOMObject*)(self))->tHead();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmltableelement__set_tHead(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *tHead;

    if (!PyArg_Parse(args,"O!:_wrap_corehtmltableelement__set_tHead", PtrPyDOMHTMLTableSectionElement_Type, &tHead))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreHTMLTableElement((PyDOMObject*)(self))->setTHead(coreHTMLTableSectionElement(tHead), ec);

    return 0;
}

static PyObject *
_wrap_corehtmltableelement__get_tFoot(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLTableSectionElement* _ret;

    _ret = coreHTMLTableElement((PyDOMObject*)(self))->tFoot();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corehtmltableelement__set_tFoot(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *tFoot;

    if (!PyArg_Parse(args,"O!:_wrap_corehtmltableelement__set_tFoot", PtrPyDOMHTMLTableSectionElement_Type, &tFoot))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreHTMLTableElement((PyDOMObject*)(self))->setTFoot(coreHTMLTableSectionElement(tFoot), ec);

    return 0;
}

static PyObject *
_wrap_corehtmltableelement__get_rows(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreHTMLTableElement((PyDOMObject*)(self))->rows());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmltableelement__get_tBodies(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreHTMLTableElement((PyDOMObject*)(self))->tBodies());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmltableelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltableelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltableelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLTableElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

static PyObject *
_wrap_corehtmltableelement__get_bgColor(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::bgcolorAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltableelement__set_bgColor(PyObject *self, PyObject *args, void *closure)
{
    char *bgColor;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltableelement__set_bgColor", &bgColor))
        return -1;
    WTF::String cvt_bgColor = WTF::String::fromUTF8((const char*)bgColor);
    coreHTMLTableElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::bgcolorAttr, cvt_bgColor);

    return 0;
}

static PyObject *
_wrap_corehtmltableelement__get_border(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::borderAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltableelement__set_border(PyObject *self, PyObject *args, void *closure)
{
    char *border;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltableelement__set_border", &border))
        return -1;
    WTF::String cvt_border = WTF::String::fromUTF8((const char*)border);
    coreHTMLTableElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::borderAttr, cvt_border);

    return 0;
}

static PyObject *
_wrap_corehtmltableelement__get_cellPadding(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::cellpaddingAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltableelement__set_cellPadding(PyObject *self, PyObject *args, void *closure)
{
    char *cellPadding;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltableelement__set_cellPadding", &cellPadding))
        return -1;
    WTF::String cvt_cellPadding = WTF::String::fromUTF8((const char*)cellPadding);
    coreHTMLTableElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::cellpaddingAttr, cvt_cellPadding);

    return 0;
}

static PyObject *
_wrap_corehtmltableelement__get_cellSpacing(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::cellspacingAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltableelement__set_cellSpacing(PyObject *self, PyObject *args, void *closure)
{
    char *cellSpacing;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltableelement__set_cellSpacing", &cellSpacing))
        return -1;
    WTF::String cvt_cellSpacing = WTF::String::fromUTF8((const char*)cellSpacing);
    coreHTMLTableElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::cellspacingAttr, cvt_cellSpacing);

    return 0;
}

static PyObject *
_wrap_corehtmltableelement__get_frame(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::frameAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltableelement__set_frame(PyObject *self, PyObject *args, void *closure)
{
    char *frame;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltableelement__set_frame", &frame))
        return -1;
    WTF::String cvt_frame = WTF::String::fromUTF8((const char*)frame);
    coreHTMLTableElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::frameAttr, cvt_frame);

    return 0;
}

static PyObject *
_wrap_corehtmltableelement__get_rules(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::rulesAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltableelement__set_rules(PyObject *self, PyObject *args, void *closure)
{
    char *rules;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltableelement__set_rules", &rules))
        return -1;
    WTF::String cvt_rules = WTF::String::fromUTF8((const char*)rules);
    coreHTMLTableElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::rulesAttr, cvt_rules);

    return 0;
}

static PyObject *
_wrap_corehtmltableelement__get_summary(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::summaryAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltableelement__set_summary(PyObject *self, PyObject *args, void *closure)
{
    char *summary;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltableelement__set_summary", &summary))
        return -1;
    WTF::String cvt_summary = WTF::String::fromUTF8((const char*)summary);
    coreHTMLTableElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::summaryAttr, cvt_summary);

    return 0;
}

static PyObject *
_wrap_corehtmltableelement__get_width(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::widthAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltableelement__set_width(PyObject *self, PyObject *args, void *closure)
{
    char *width;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltableelement__set_width", &width))
        return -1;
    WTF::String cvt_width = WTF::String::fromUTF8((const char*)width);
    coreHTMLTableElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::widthAttr, cvt_width);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmltableelement_getsets[] = {
    { (char*)"caption", (getter)WebKit::_wrap_corehtmltableelement__get_caption, (setter)WebKit::_wrap_corehtmltableelement__set_caption, 0, 0 },
    { (char*)"tHead", (getter)WebKit::_wrap_corehtmltableelement__get_tHead, (setter)WebKit::_wrap_corehtmltableelement__set_tHead, 0, 0 },
    { (char*)"tFoot", (getter)WebKit::_wrap_corehtmltableelement__get_tFoot, (setter)WebKit::_wrap_corehtmltableelement__set_tFoot, 0, 0 },
    { (char*)"rows", (getter)WebKit::_wrap_corehtmltableelement__get_rows, (setter)0, 0, 0 },
    { (char*)"tBodies", (getter)WebKit::_wrap_corehtmltableelement__get_tBodies, (setter)0, 0, 0 },
    { (char*)"align", (getter)WebKit::_wrap_corehtmltableelement__get_align, (setter)WebKit::_wrap_corehtmltableelement__set_align, 0, 0 },
    { (char*)"bgColor", (getter)WebKit::_wrap_corehtmltableelement__get_bgColor, (setter)WebKit::_wrap_corehtmltableelement__set_bgColor, 0, 0 },
    { (char*)"border", (getter)WebKit::_wrap_corehtmltableelement__get_border, (setter)WebKit::_wrap_corehtmltableelement__set_border, 0, 0 },
    { (char*)"cellPadding", (getter)WebKit::_wrap_corehtmltableelement__get_cellPadding, (setter)WebKit::_wrap_corehtmltableelement__set_cellPadding, 0, 0 },
    { (char*)"cellSpacing", (getter)WebKit::_wrap_corehtmltableelement__get_cellSpacing, (setter)WebKit::_wrap_corehtmltableelement__set_cellSpacing, 0, 0 },
    { (char*)"frame", (getter)WebKit::_wrap_corehtmltableelement__get_frame, (setter)WebKit::_wrap_corehtmltableelement__set_frame, 0, 0 },
    { (char*)"rules", (getter)WebKit::_wrap_corehtmltableelement__get_rules, (setter)WebKit::_wrap_corehtmltableelement__set_rules, 0, 0 },
    { (char*)"summary", (getter)WebKit::_wrap_corehtmltableelement__get_summary, (setter)WebKit::_wrap_corehtmltableelement__set_summary, 0, 0 },
    { (char*)"width", (getter)WebKit::_wrap_corehtmltableelement__get_width, (setter)WebKit::_wrap_corehtmltableelement__set_width, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLTableElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLTableElement* cobj = coreHTMLTableElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLTableElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLTableElement",                   /* tp_name */
    sizeof(PyDOMHTMLTableElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLTableElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLTableElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmltableelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLTableElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLTableRowElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLTableRowElement_init(HTMLTableRowElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLTableRowElement_insertCell(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    PyObject *py_ret;
    WebCore::HTMLElement* _ret;
    long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.HTMLTableRowElement.insertCell", kwlist, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreHTMLTableRowElement(self)->insertCell(index, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_HTMLTableRowElement_deleteCell(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.HTMLTableRowElement.deleteCell", kwlist, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreHTMLTableRowElement(self)->deleteCell(index, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLTableRowElement_methods[] = {
    { "insertCell", (PyCFunction)WebKit::_wrap_HTMLTableRowElement_insertCell, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "deleteCell", (PyCFunction)WebKit::_wrap_HTMLTableRowElement_deleteCell, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmltablerowelement__get_rowIndex(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLTableRowElement((PyDOMObject*)(self))->rowIndex();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corehtmltablerowelement__get_sectionRowIndex(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLTableRowElement((PyDOMObject*)(self))->sectionRowIndex();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corehtmltablerowelement__get_cells(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreHTMLTableRowElement((PyDOMObject*)(self))->cells());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmltablerowelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableRowElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablerowelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablerowelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLTableRowElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

static PyObject *
_wrap_corehtmltablerowelement__get_bgColor(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableRowElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::bgcolorAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablerowelement__set_bgColor(PyObject *self, PyObject *args, void *closure)
{
    char *bgColor;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablerowelement__set_bgColor", &bgColor))
        return -1;
    WTF::String cvt_bgColor = WTF::String::fromUTF8((const char*)bgColor);
    coreHTMLTableRowElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::bgcolorAttr, cvt_bgColor);

    return 0;
}

static PyObject *
_wrap_corehtmltablerowelement__get_ch(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableRowElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::charAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablerowelement__set_ch(PyObject *self, PyObject *args, void *closure)
{
    char *ch;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablerowelement__set_ch", &ch))
        return -1;
    WTF::String cvt_ch = WTF::String::fromUTF8((const char*)ch);
    coreHTMLTableRowElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::charAttr, cvt_ch);

    return 0;
}

static PyObject *
_wrap_corehtmltablerowelement__get_chOff(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableRowElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::charoffAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablerowelement__set_chOff(PyObject *self, PyObject *args, void *closure)
{
    char *chOff;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablerowelement__set_chOff", &chOff))
        return -1;
    WTF::String cvt_chOff = WTF::String::fromUTF8((const char*)chOff);
    coreHTMLTableRowElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::charoffAttr, cvt_chOff);

    return 0;
}

static PyObject *
_wrap_corehtmltablerowelement__get_vAlign(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableRowElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::valignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablerowelement__set_vAlign(PyObject *self, PyObject *args, void *closure)
{
    char *vAlign;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablerowelement__set_vAlign", &vAlign))
        return -1;
    WTF::String cvt_vAlign = WTF::String::fromUTF8((const char*)vAlign);
    coreHTMLTableRowElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::valignAttr, cvt_vAlign);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmltablerowelement_getsets[] = {
    { (char*)"rowIndex", (getter)WebKit::_wrap_corehtmltablerowelement__get_rowIndex, (setter)0, 0, 0 },
    { (char*)"sectionRowIndex", (getter)WebKit::_wrap_corehtmltablerowelement__get_sectionRowIndex, (setter)0, 0, 0 },
    { (char*)"cells", (getter)WebKit::_wrap_corehtmltablerowelement__get_cells, (setter)0, 0, 0 },
    { (char*)"align", (getter)WebKit::_wrap_corehtmltablerowelement__get_align, (setter)WebKit::_wrap_corehtmltablerowelement__set_align, 0, 0 },
    { (char*)"bgColor", (getter)WebKit::_wrap_corehtmltablerowelement__get_bgColor, (setter)WebKit::_wrap_corehtmltablerowelement__set_bgColor, 0, 0 },
    { (char*)"ch", (getter)WebKit::_wrap_corehtmltablerowelement__get_ch, (setter)WebKit::_wrap_corehtmltablerowelement__set_ch, 0, 0 },
    { (char*)"chOff", (getter)WebKit::_wrap_corehtmltablerowelement__get_chOff, (setter)WebKit::_wrap_corehtmltablerowelement__set_chOff, 0, 0 },
    { (char*)"vAlign", (getter)WebKit::_wrap_corehtmltablerowelement__get_vAlign, (setter)WebKit::_wrap_corehtmltablerowelement__set_vAlign, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLTableRowElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLTableRowElement* cobj = coreHTMLTableRowElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLTableRowElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLTableRowElement",                   /* tp_name */
    sizeof(PyDOMHTMLTableRowElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLTableRowElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLTableRowElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmltablerowelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLTableRowElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLTableSectionElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLTableSectionElement_init(HTMLTableSectionElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLTableSectionElement_insertRow(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    PyObject *py_ret;
    WebCore::HTMLElement* _ret;
    long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.HTMLTableSectionElement.insertRow", kwlist, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreHTMLTableSectionElement(self)->insertRow(index, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_HTMLTableSectionElement_deleteRow(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.HTMLTableSectionElement.deleteRow", kwlist, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreHTMLTableSectionElement(self)->deleteRow(index, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLTableSectionElement_methods[] = {
    { "insertRow", (PyCFunction)WebKit::_wrap_HTMLTableSectionElement_insertRow, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "deleteRow", (PyCFunction)WebKit::_wrap_HTMLTableSectionElement_deleteRow, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmltablesectionelement__get_align(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableSectionElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::alignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablesectionelement__set_align(PyObject *self, PyObject *args, void *closure)
{
    char *align;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablesectionelement__set_align", &align))
        return -1;
    WTF::String cvt_align = WTF::String::fromUTF8((const char*)align);
    coreHTMLTableSectionElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::alignAttr, cvt_align);

    return 0;
}

static PyObject *
_wrap_corehtmltablesectionelement__get_ch(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableSectionElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::charAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablesectionelement__set_ch(PyObject *self, PyObject *args, void *closure)
{
    char *ch;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablesectionelement__set_ch", &ch))
        return -1;
    WTF::String cvt_ch = WTF::String::fromUTF8((const char*)ch);
    coreHTMLTableSectionElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::charAttr, cvt_ch);

    return 0;
}

static PyObject *
_wrap_corehtmltablesectionelement__get_chOff(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableSectionElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::charoffAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablesectionelement__set_chOff(PyObject *self, PyObject *args, void *closure)
{
    char *chOff;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablesectionelement__set_chOff", &chOff))
        return -1;
    WTF::String cvt_chOff = WTF::String::fromUTF8((const char*)chOff);
    coreHTMLTableSectionElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::charoffAttr, cvt_chOff);

    return 0;
}

static PyObject *
_wrap_corehtmltablesectionelement__get_vAlign(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTableSectionElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::valignAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltablesectionelement__set_vAlign(PyObject *self, PyObject *args, void *closure)
{
    char *vAlign;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltablesectionelement__set_vAlign", &vAlign))
        return -1;
    WTF::String cvt_vAlign = WTF::String::fromUTF8((const char*)vAlign);
    coreHTMLTableSectionElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::valignAttr, cvt_vAlign);

    return 0;
}

static PyObject *
_wrap_corehtmltablesectionelement__get_rows(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::HTMLCollection* _ret;

    _ret = WTF::getPtr(coreHTMLTableSectionElement((PyDOMObject*)(self))->rows());
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmltablesectionelement_getsets[] = {
    { (char*)"align", (getter)WebKit::_wrap_corehtmltablesectionelement__get_align, (setter)WebKit::_wrap_corehtmltablesectionelement__set_align, 0, 0 },
    { (char*)"ch", (getter)WebKit::_wrap_corehtmltablesectionelement__get_ch, (setter)WebKit::_wrap_corehtmltablesectionelement__set_ch, 0, 0 },
    { (char*)"chOff", (getter)WebKit::_wrap_corehtmltablesectionelement__get_chOff, (setter)WebKit::_wrap_corehtmltablesectionelement__set_chOff, 0, 0 },
    { (char*)"vAlign", (getter)WebKit::_wrap_corehtmltablesectionelement__get_vAlign, (setter)WebKit::_wrap_corehtmltablesectionelement__set_vAlign, 0, 0 },
    { (char*)"rows", (getter)WebKit::_wrap_corehtmltablesectionelement__get_rows, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLTableSectionElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLTableSectionElement* cobj = coreHTMLTableSectionElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLTableSectionElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLTableSectionElement",                   /* tp_name */
    sizeof(PyDOMHTMLTableSectionElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLTableSectionElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLTableSectionElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmltablesectionelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLTableSectionElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLTextAreaElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLTextAreaElement_init(HTMLTextAreaElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLTextAreaElement_select(PyDOMObject *self)
{
    
    coreHTMLTextAreaElement(self)->select();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLTextAreaElement_checkValidity(PyDOMObject *self)
{
    bool ret;

    
    ret = coreHTMLTextAreaElement(self)->checkValidity();
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_HTMLTextAreaElement_setCustomValidity(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"error", NULL };
    char *error;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.HTMLTextAreaElement.setCustomValidity", kwlist, &error))
        return NULL;
    WTF::String cvt_error = WTF::String::fromUTF8((const char*)error);
    
    coreHTMLTextAreaElement(self)->setCustomValidity(cvt_error);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLTextAreaElement_setSelectionRange(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"start", (char*)"end", NULL };
    long start, end;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ll:pywebkit.HTMLTextAreaElement.setSelectionRange", kwlist, &start, &end))
        return NULL;
    
    coreHTMLTextAreaElement(self)->setSelectionRange(start, end);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLTextAreaElement_methods[] = {
    { "select", (PyCFunction)WebKit::_wrap_HTMLTextAreaElement_select, METH_NOARGS,
      NULL },
    { "checkValidity", (PyCFunction)WebKit::_wrap_HTMLTextAreaElement_checkValidity, METH_NOARGS,
      NULL },
    { "setCustomValidity", (PyCFunction)WebKit::_wrap_HTMLTextAreaElement_setCustomValidity, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setSelectionRange", (PyCFunction)WebKit::_wrap_HTMLTextAreaElement_setSelectionRange, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmltextareaelement__get_defaultValue(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->defaultValue();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltextareaelement__set_defaultValue(PyObject *self, PyObject *args, void *closure)
{
    char *defaultValue;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltextareaelement__set_defaultValue", &defaultValue))
        return -1;
    WTF::String cvt_defaultValue = WTF::String::fromUTF8((const char*)defaultValue);
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setDefaultValue(cvt_defaultValue);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_form(PyObject *self, void *closure)
{
    WebCore::HTMLFormElement* _ret;
    PyObject *py_ret;

    _ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->form();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmltextareaelement__get_validity(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::ValidityState* _ret;

    _ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->validity();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmltextareaelement__get_accessKey(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::accesskeyAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltextareaelement__set_accessKey(PyObject *self, PyObject *args, void *closure)
{
    char *accessKey;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltextareaelement__set_accessKey", &accessKey))
        return -1;
    WTF::String cvt_accessKey = WTF::String::fromUTF8((const char*)accessKey);
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::accesskeyAttr, cvt_accessKey);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_cols(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->cols();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmltextareaelement__set_cols(PyObject *self, PyObject *args, void *closure)
{
    long cols;

    if (!PyArg_Parse(args,"l:_wrap_corehtmltextareaelement__set_cols", &cols))
        return -1;
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setCols(cols);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_disabled(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::disabledAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmltextareaelement__set_disabled(PyObject *self, PyObject *args, void *closure)
{
    int disabled;

    if (!PyArg_Parse(args,"i:_wrap_corehtmltextareaelement__set_disabled", &disabled))
        return -1;
    bool cvt_disabled = (bool)disabled;
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, cvt_disabled);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_autofocus(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::autofocusAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmltextareaelement__set_autofocus(PyObject *self, PyObject *args, void *closure)
{
    int autofocus;

    if (!PyArg_Parse(args,"i:_wrap_corehtmltextareaelement__set_autofocus", &autofocus))
        return -1;
    bool cvt_autofocus = (bool)autofocus;
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::autofocusAttr, cvt_autofocus);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_maxLength(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->maxLength();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmltextareaelement__set_maxLength(PyObject *self, PyObject *args, void *closure)
{
    long maxLength;

    if (!PyArg_Parse(args,"l:_wrap_corehtmltextareaelement__set_maxLength", &maxLength))
        return -1;
    WebCore::ExceptionCode ec = 0;
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setMaxLength(maxLength, ec);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->name();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltextareaelement__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltextareaelement__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setName(cvt_name);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_placeholder(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::placeholderAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltextareaelement__set_placeholder(PyObject *self, PyObject *args, void *closure)
{
    char *placeholder;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltextareaelement__set_placeholder", &placeholder))
        return -1;
    WTF::String cvt_placeholder = WTF::String::fromUTF8((const char*)placeholder);
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::placeholderAttr, cvt_placeholder);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_readOnly(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::readonlyAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmltextareaelement__set_readOnly(PyObject *self, PyObject *args, void *closure)
{
    int readOnly;

    if (!PyArg_Parse(args,"i:_wrap_corehtmltextareaelement__set_readOnly", &readOnly))
        return -1;
    bool cvt_readOnly = (bool)readOnly;
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::readonlyAttr, cvt_readOnly);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_required(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::requiredAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmltextareaelement__set_required(PyObject *self, PyObject *args, void *closure)
{
    int required;

    if (!PyArg_Parse(args,"i:_wrap_corehtmltextareaelement__set_required", &required))
        return -1;
    bool cvt_required = (bool)required;
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::requiredAttr, cvt_required);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_rows(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->rows();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmltextareaelement__set_rows(PyObject *self, PyObject *args, void *closure)
{
    long rows;

    if (!PyArg_Parse(args,"l:_wrap_corehtmltextareaelement__set_rows", &rows))
        return -1;
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setRows(rows);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->type();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmltextareaelement__get_value(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->value();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltextareaelement__set_value(PyObject *self, PyObject *args, void *closure)
{
    char *value;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltextareaelement__set_value", &value))
        return -1;
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setValue(cvt_value);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_textLength(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->textLength();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_corehtmltextareaelement__get_willValidate(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->willValidate();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corehtmltextareaelement__get_validationMessage(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->validationMessage();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corehtmltextareaelement__get_selectionStart(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->selectionStart();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmltextareaelement__set_selectionStart(PyObject *self, PyObject *args, void *closure)
{
    long selectionStart;

    if (!PyArg_Parse(args,"l:_wrap_corehtmltextareaelement__set_selectionStart", &selectionStart))
        return -1;
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setSelectionStart(selectionStart);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_selectionEnd(PyObject *self, void *closure)
{
    long ret;

    ret = coreHTMLTextAreaElement((PyDOMObject*)(self))->selectionEnd();
    return PyInt_FromLong(ret);

}

static int
_wrap_corehtmltextareaelement__set_selectionEnd(PyObject *self, PyObject *args, void *closure)
{
    long selectionEnd;

    if (!PyArg_Parse(args,"l:_wrap_corehtmltextareaelement__set_selectionEnd", &selectionEnd))
        return -1;
    coreHTMLTextAreaElement((PyDOMObject*)(self))->setSelectionEnd(selectionEnd);

    return 0;
}

static PyObject *
_wrap_corehtmltextareaelement__get_labels(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::NodeList* _ret;

    _ret = WTF::getPtr(coreHTMLTextAreaElement((PyDOMObject*)(self))->labels());
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmltextareaelement_getsets[] = {
    { (char*)"defaultValue", (getter)WebKit::_wrap_corehtmltextareaelement__get_defaultValue, (setter)WebKit::_wrap_corehtmltextareaelement__set_defaultValue, 0, 0 },
    { (char*)"form", (getter)WebKit::_wrap_corehtmltextareaelement__get_form, (setter)0, 0, 0 },
    { (char*)"validity", (getter)WebKit::_wrap_corehtmltextareaelement__get_validity, (setter)0, 0, 0 },
    { (char*)"accessKey", (getter)WebKit::_wrap_corehtmltextareaelement__get_accessKey, (setter)WebKit::_wrap_corehtmltextareaelement__set_accessKey, 0, 0 },
    { (char*)"cols", (getter)WebKit::_wrap_corehtmltextareaelement__get_cols, (setter)WebKit::_wrap_corehtmltextareaelement__set_cols, 0, 0 },
    { (char*)"disabled", (getter)WebKit::_wrap_corehtmltextareaelement__get_disabled, (setter)WebKit::_wrap_corehtmltextareaelement__set_disabled, 0, 0 },
    { (char*)"autofocus", (getter)WebKit::_wrap_corehtmltextareaelement__get_autofocus, (setter)WebKit::_wrap_corehtmltextareaelement__set_autofocus, 0, 0 },
    { (char*)"maxLength", (getter)WebKit::_wrap_corehtmltextareaelement__get_maxLength, (setter)WebKit::_wrap_corehtmltextareaelement__set_maxLength, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corehtmltextareaelement__get_name, (setter)WebKit::_wrap_corehtmltextareaelement__set_name, 0, 0 },
    { (char*)"placeholder", (getter)WebKit::_wrap_corehtmltextareaelement__get_placeholder, (setter)WebKit::_wrap_corehtmltextareaelement__set_placeholder, 0, 0 },
    { (char*)"readOnly", (getter)WebKit::_wrap_corehtmltextareaelement__get_readOnly, (setter)WebKit::_wrap_corehtmltextareaelement__set_readOnly, 0, 0 },
    { (char*)"required", (getter)WebKit::_wrap_corehtmltextareaelement__get_required, (setter)WebKit::_wrap_corehtmltextareaelement__set_required, 0, 0 },
    { (char*)"rows", (getter)WebKit::_wrap_corehtmltextareaelement__get_rows, (setter)WebKit::_wrap_corehtmltextareaelement__set_rows, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_corehtmltextareaelement__get_type, (setter)0, 0, 0 },
    { (char*)"value", (getter)WebKit::_wrap_corehtmltextareaelement__get_value, (setter)WebKit::_wrap_corehtmltextareaelement__set_value, 0, 0 },
    { (char*)"textLength", (getter)WebKit::_wrap_corehtmltextareaelement__get_textLength, (setter)0, 0, 0 },
    { (char*)"willValidate", (getter)WebKit::_wrap_corehtmltextareaelement__get_willValidate, (setter)0, 0, 0 },
    { (char*)"validationMessage", (getter)WebKit::_wrap_corehtmltextareaelement__get_validationMessage, (setter)0, 0, 0 },
    { (char*)"selectionStart", (getter)WebKit::_wrap_corehtmltextareaelement__get_selectionStart, (setter)WebKit::_wrap_corehtmltextareaelement__set_selectionStart, 0, 0 },
    { (char*)"selectionEnd", (getter)WebKit::_wrap_corehtmltextareaelement__get_selectionEnd, (setter)WebKit::_wrap_corehtmltextareaelement__set_selectionEnd, 0, 0 },
    { (char*)"labels", (getter)WebKit::_wrap_corehtmltextareaelement__get_labels, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLTextAreaElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLTextAreaElement* cobj = coreHTMLTextAreaElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLTextAreaElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLTextAreaElement",                   /* tp_name */
    sizeof(PyDOMHTMLTextAreaElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLTextAreaElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLTextAreaElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmltextareaelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLTextAreaElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLTitleElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLTitleElement_init(HTMLTitleElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmltitleelement__get_text(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLTitleElement((PyDOMObject*)(self))->text();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmltitleelement__set_text(PyObject *self, PyObject *args, void *closure)
{
    char *text;

    if (!PyArg_Parse(args,"s:_wrap_corehtmltitleelement__set_text", &text))
        return -1;
    WTF::String cvt_text = WTF::String::fromUTF8((const char*)text);
    coreHTMLTitleElement((PyDOMObject*)(self))->setText(cvt_text);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmltitleelement_getsets[] = {
    { (char*)"text", (getter)WebKit::_wrap_corehtmltitleelement__get_text, (setter)WebKit::_wrap_corehtmltitleelement__set_text, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLTitleElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLTitleElement* cobj = coreHTMLTitleElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLTitleElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLTitleElement",                   /* tp_name */
    sizeof(PyDOMHTMLTitleElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLTitleElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmltitleelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLTitleElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLUListElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLUListElement_init(HTMLUListElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corehtmlulistelement__get_compact(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLUListElement((PyDOMObject*)(self))->hasAttribute(WebCore::HTMLNames::compactAttr);
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corehtmlulistelement__set_compact(PyObject *self, PyObject *args, void *closure)
{
    int compact;

    if (!PyArg_Parse(args,"i:_wrap_corehtmlulistelement__set_compact", &compact))
        return -1;
    bool cvt_compact = (bool)compact;
    coreHTMLUListElement((PyDOMObject*)(self))->setBooleanAttribute(WebCore::HTMLNames::compactAttr, cvt_compact);

    return 0;
}

static PyObject *
_wrap_corehtmlulistelement__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLUListElement((PyDOMObject*)(self))->getAttribute(WebCore::HTMLNames::typeAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlulistelement__set_type(PyObject *self, PyObject *args, void *closure)
{
    char *type;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlulistelement__set_type", &type))
        return -1;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    coreHTMLUListElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::typeAttr, cvt_type);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlulistelement_getsets[] = {
    { (char*)"compact", (getter)WebKit::_wrap_corehtmlulistelement__get_compact, (setter)WebKit::_wrap_corehtmlulistelement__set_compact, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_corehtmlulistelement__get_type, (setter)WebKit::_wrap_corehtmlulistelement__set_type, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLUListElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLUListElement* cobj = coreHTMLUListElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLUListElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLUListElement",                   /* tp_name */
    sizeof(PyDOMHTMLUListElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLUListElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlulistelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLUListElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- HTMLVideoElement ----------- */

namespace WebKit {
using namespace WebCore;

static int
HTMLVideoElement_init(HTMLVideoElement *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMHTMLMediaElement_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_HTMLVideoElement_webkitExitFullscreen(PyDOMObject *self)
{
    
    coreHTMLVideoElement(self)->webkitExitFullscreen();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_HTMLVideoElement_webkitExitFullScreen(PyDOMObject *self)
{
    
    coreHTMLVideoElement(self)->webkitExitFullScreen();
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHTMLVideoElement_methods[] = {
    { "webkitExitFullscreen", (PyCFunction)WebKit::_wrap_HTMLVideoElement_webkitExitFullscreen, METH_NOARGS,
      NULL },
    { "webkitExitFullScreen", (PyCFunction)WebKit::_wrap_HTMLVideoElement_webkitExitFullScreen, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehtmlvideoelement__get_width(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreHTMLVideoElement((PyDOMObject*)(self))->getUnsignedIntegralAttribute(WebCore::HTMLNames::widthAttr);
    return PyLong_FromUnsignedLong(ret);

}

static int
_wrap_corehtmlvideoelement__set_width(PyObject *self, PyObject *args, void *closure)
{
    unsigned long width;

    if (!PyArg_Parse(args,"k:_wrap_corehtmlvideoelement__set_width", &width))
        return -1;
    coreHTMLVideoElement((PyDOMObject*)(self))->setUnsignedIntegralAttribute(WebCore::HTMLNames::widthAttr, width);

    return 0;
}

static PyObject *
_wrap_corehtmlvideoelement__get_height(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreHTMLVideoElement((PyDOMObject*)(self))->getUnsignedIntegralAttribute(WebCore::HTMLNames::heightAttr);
    return PyLong_FromUnsignedLong(ret);

}

static int
_wrap_corehtmlvideoelement__set_height(PyObject *self, PyObject *args, void *closure)
{
    unsigned long height;

    if (!PyArg_Parse(args,"k:_wrap_corehtmlvideoelement__set_height", &height))
        return -1;
    coreHTMLVideoElement((PyDOMObject*)(self))->setUnsignedIntegralAttribute(WebCore::HTMLNames::heightAttr, height);

    return 0;
}

static PyObject *
_wrap_corehtmlvideoelement__get_videoWidth(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreHTMLVideoElement((PyDOMObject*)(self))->videoWidth();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_corehtmlvideoelement__get_videoHeight(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreHTMLVideoElement((PyDOMObject*)(self))->videoHeight();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_corehtmlvideoelement__get_poster(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreHTMLVideoElement((PyDOMObject*)(self))->getURLAttribute(WebCore::HTMLNames::posterAttr);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corehtmlvideoelement__set_poster(PyObject *self, PyObject *args, void *closure)
{
    char *poster;

    if (!PyArg_Parse(args,"s:_wrap_corehtmlvideoelement__set_poster", &poster))
        return -1;
    WTF::String cvt_poster = WTF::String::fromUTF8((const char*)poster);
    coreHTMLVideoElement((PyDOMObject*)(self))->setAttribute(WebCore::HTMLNames::posterAttr, cvt_poster);

    return 0;
}

static PyObject *
_wrap_corehtmlvideoelement__get_webkitSupportsFullscreen(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLVideoElement((PyDOMObject*)(self))->webkitSupportsFullscreen();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corehtmlvideoelement__get_webkitDisplayingFullscreen(PyObject *self, void *closure)
{
    bool ret;

    ret = coreHTMLVideoElement((PyDOMObject*)(self))->webkitDisplayingFullscreen();
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehtmlvideoelement_getsets[] = {
    { (char*)"width", (getter)WebKit::_wrap_corehtmlvideoelement__get_width, (setter)WebKit::_wrap_corehtmlvideoelement__set_width, 0, 0 },
    { (char*)"height", (getter)WebKit::_wrap_corehtmlvideoelement__get_height, (setter)WebKit::_wrap_corehtmlvideoelement__set_height, 0, 0 },
    { (char*)"videoWidth", (getter)WebKit::_wrap_corehtmlvideoelement__get_videoWidth, (setter)0, 0, 0 },
    { (char*)"videoHeight", (getter)WebKit::_wrap_corehtmlvideoelement__get_videoHeight, (setter)0, 0, 0 },
    { (char*)"poster", (getter)WebKit::_wrap_corehtmlvideoelement__get_poster, (setter)WebKit::_wrap_corehtmlvideoelement__set_poster, 0, 0 },
    { (char*)"webkitSupportsFullscreen", (getter)WebKit::_wrap_corehtmlvideoelement__get_webkitSupportsFullscreen, (setter)0, 0, 0 },
    { (char*)"webkitDisplayingFullscreen", (getter)WebKit::_wrap_corehtmlvideoelement__get_webkitDisplayingFullscreen, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_HTMLVideoElement(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::HTMLVideoElement* cobj = coreHTMLVideoElement(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHTMLVideoElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.HTMLVideoElement",                   /* tp_name */
    sizeof(PyDOMHTMLVideoElement),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_HTMLVideoElement,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHTMLVideoElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehtmlvideoelement_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::HTMLVideoElement_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- ImageData ----------- */

namespace WebKit {
using namespace WebCore;

static int
ImageData_init(ImageData *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coreimagedata__get_width(PyObject *self, void *closure)
{
    long ret;

    ret = coreImageData((PyDOMObject*)(self))->width();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coreimagedata__get_height(PyObject *self, void *closure)
{
    long ret;

    ret = coreImageData((PyDOMObject*)(self))->height();
    return PyInt_FromLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreimagedata_getsets[] = {
    { (char*)"width", (getter)WebKit::_wrap_coreimagedata__get_width, (setter)0, 0, 0 },
    { (char*)"height", (getter)WebKit::_wrap_coreimagedata__get_height, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_ImageData(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::ImageData* cobj = coreImageData(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMImageData_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.ImageData",                   /* tp_name */
    sizeof(PyDOMImageData),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_ImageData,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreimagedata_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::ImageData_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- MediaError ----------- */

namespace WebKit {
using namespace WebCore;

static int
MediaError_init(MediaError *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coremediaerror__get_code(PyObject *self, void *closure)
{
    int ret;

    ret = coreMediaError((PyDOMObject*)(self))->code();
    return PyInt_FromLong(ret);
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coremediaerror_getsets[] = {
    { (char*)"code", (getter)WebKit::_wrap_coremediaerror__get_code, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_MediaError(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::MediaError* cobj = coreMediaError(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMMediaError_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.MediaError",                   /* tp_name */
    sizeof(PyDOMMediaError),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_MediaError,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coremediaerror_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::MediaError_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- TextMetrics ----------- */

namespace WebKit {
using namespace WebCore;

static int
TextMetrics_init(TextMetrics *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coretextmetrics__get_width(PyObject *self, void *closure)
{
    double ret;

    ret = coreTextMetrics((PyDOMObject*)(self))->width();
    return PyFloat_FromDouble(ret);
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coretextmetrics_getsets[] = {
    { (char*)"width", (getter)WebKit::_wrap_coretextmetrics__get_width, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_TextMetrics(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::TextMetrics* cobj = coreTextMetrics(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMTextMetrics_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.TextMetrics",                   /* tp_name */
    sizeof(PyDOMTextMetrics),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_TextMetrics,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coretextmetrics_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::TextMetrics_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- TimeRanges ----------- */

namespace WebKit {
using namespace WebCore;

static int
TimeRanges_init(TimeRanges *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_TimeRanges_start(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    double ret;
    unsigned long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.TimeRanges.start", kwlist, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreTimeRanges(self)->start(index, ec);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_TimeRanges_end(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    double ret;
    unsigned long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.TimeRanges.end", kwlist, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreTimeRanges(self)->end(index, ec);
    
    return PyFloat_FromDouble(ret);
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMTimeRanges_methods[] = {
    { "start", (PyCFunction)WebKit::_wrap_TimeRanges_start, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "end", (PyCFunction)WebKit::_wrap_TimeRanges_end, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coretimeranges__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreTimeRanges((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coretimeranges_getsets[] = {
    { (char*)"length", (getter)WebKit::_wrap_coretimeranges__get_length, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_TimeRanges(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::TimeRanges* cobj = coreTimeRanges(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMTimeRanges_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.TimeRanges",                   /* tp_name */
    sizeof(PyDOMTimeRanges),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_TimeRanges,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMTimeRanges_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coretimeranges_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::TimeRanges_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- ValidityState ----------- */

namespace WebKit {
using namespace WebCore;

static int
ValidityState_init(ValidityState *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corevaliditystate__get_valueMissing(PyObject *self, void *closure)
{
    bool ret;

    ret = coreValidityState((PyDOMObject*)(self))->valueMissing();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corevaliditystate__get_typeMismatch(PyObject *self, void *closure)
{
    bool ret;

    ret = coreValidityState((PyDOMObject*)(self))->typeMismatch();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corevaliditystate__get_patternMismatch(PyObject *self, void *closure)
{
    bool ret;

    ret = coreValidityState((PyDOMObject*)(self))->patternMismatch();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corevaliditystate__get_tooLong(PyObject *self, void *closure)
{
    bool ret;

    ret = coreValidityState((PyDOMObject*)(self))->tooLong();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corevaliditystate__get_rangeUnderflow(PyObject *self, void *closure)
{
    bool ret;

    ret = coreValidityState((PyDOMObject*)(self))->rangeUnderflow();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corevaliditystate__get_rangeOverflow(PyObject *self, void *closure)
{
    bool ret;

    ret = coreValidityState((PyDOMObject*)(self))->rangeOverflow();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corevaliditystate__get_stepMismatch(PyObject *self, void *closure)
{
    bool ret;

    ret = coreValidityState((PyDOMObject*)(self))->stepMismatch();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corevaliditystate__get_customError(PyObject *self, void *closure)
{
    bool ret;

    ret = coreValidityState((PyDOMObject*)(self))->customError();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corevaliditystate__get_valid(PyObject *self, void *closure)
{
    bool ret;

    ret = coreValidityState((PyDOMObject*)(self))->valid();
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corevaliditystate_getsets[] = {
    { (char*)"valueMissing", (getter)WebKit::_wrap_corevaliditystate__get_valueMissing, (setter)0, 0, 0 },
    { (char*)"typeMismatch", (getter)WebKit::_wrap_corevaliditystate__get_typeMismatch, (setter)0, 0, 0 },
    { (char*)"patternMismatch", (getter)WebKit::_wrap_corevaliditystate__get_patternMismatch, (setter)0, 0, 0 },
    { (char*)"tooLong", (getter)WebKit::_wrap_corevaliditystate__get_tooLong, (setter)0, 0, 0 },
    { (char*)"rangeUnderflow", (getter)WebKit::_wrap_corevaliditystate__get_rangeUnderflow, (setter)0, 0, 0 },
    { (char*)"rangeOverflow", (getter)WebKit::_wrap_corevaliditystate__get_rangeOverflow, (setter)0, 0, 0 },
    { (char*)"stepMismatch", (getter)WebKit::_wrap_corevaliditystate__get_stepMismatch, (setter)0, 0, 0 },
    { (char*)"customError", (getter)WebKit::_wrap_corevaliditystate__get_customError, (setter)0, 0, 0 },
    { (char*)"valid", (getter)WebKit::_wrap_corevaliditystate__get_valid, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_ValidityState(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::ValidityState* cobj = coreValidityState(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMValidityState_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.ValidityState",                   /* tp_name */
    sizeof(PyDOMValidityState),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_ValidityState,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corevaliditystate_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::ValidityState_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- VoidCallback ----------- */

namespace WebKit {
using namespace WebCore;

static int
VoidCallback_init(VoidCallback *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_VoidCallback_handleEvent(PyDOMObject *self)
{
    
    coreVoidCallback(self)->handleEvent();
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMVoidCallback_methods[] = {
    { "handleEvent", (PyCFunction)WebKit::_wrap_VoidCallback_handleEvent, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
void dealloc_VoidCallback(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::VoidCallback* cobj = coreVoidCallback(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMVoidCallback_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.VoidCallback",                   /* tp_name */
    sizeof(PyDOMVoidCallback),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_VoidCallback,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMVoidCallback_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::VoidCallback_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- XMLHttpRequestException ----------- */

namespace WebKit {
using namespace WebCore;

static int
XMLHttpRequestException_init(XMLHttpRequestException *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corexmlhttprequestexception__get_code(PyObject *self, void *closure)
{
    int ret;

    ret = coreXMLHttpRequestException((PyDOMObject*)(self))->code();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_corexmlhttprequestexception__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreXMLHttpRequestException((PyDOMObject*)(self))->name();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corexmlhttprequestexception__get_message(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreXMLHttpRequestException((PyDOMObject*)(self))->message();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corexmlhttprequestexception_getsets[] = {
    { (char*)"code", (getter)WebKit::_wrap_corexmlhttprequestexception__get_code, (setter)0, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_corexmlhttprequestexception__get_name, (setter)0, 0, 0 },
    { (char*)"message", (getter)WebKit::_wrap_corexmlhttprequestexception__get_message, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_XMLHttpRequestException(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::XMLHttpRequestException* cobj = coreXMLHttpRequestException(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMXMLHttpRequestException_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.XMLHttpRequestException",                   /* tp_name */
    sizeof(PyDOMXMLHttpRequestException),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_XMLHttpRequestException,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corexmlhttprequestexception_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::XMLHttpRequestException_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- XMLHttpRequest ----------- */

namespace WebKit {
using namespace WebCore;

static int
XMLHttpRequest_init(XMLHttpRequest *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_XMLHttpRequest_open(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"method", (char*)"url", (char*)"async", (char*)"user", (char*)"password", NULL };
    char *method, *url, *user, *password;
    int async;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ssiss:pywebkit.XMLHttpRequest.open", kwlist, &method, &url, &async, &user, &password))
        return NULL;
    WTF::String cvt_method = WTF::String::fromUTF8((const char*)method);
    WTF::String _cvt_url = WTF::String::fromUTF8((const char*)url);
    WebCore::KURL cvt_url = coreXMLHttpRequest(self)->scriptExecutionContext()->completeURL(_cvt_url);
    bool cvt_async = (bool)async;
    WTF::String cvt_user = WTF::String::fromUTF8((const char*)user);
    WTF::String cvt_password = WTF::String::fromUTF8((const char*)password);
    WebCore::ExceptionCode ec = 0;
    
    coreXMLHttpRequest(self)->open(cvt_method, cvt_url, cvt_async, cvt_user, cvt_password, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_XMLHttpRequest_setRequestHeader(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"header", (char*)"value", NULL };
    char *header, *value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.XMLHttpRequest.setRequestHeader", kwlist, &header, &value))
        return NULL;
    WTF::String cvt_header = WTF::String::fromUTF8((const char*)header);
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    WebCore::ExceptionCode ec = 0;
    
    coreXMLHttpRequest(self)->setRequestHeader(cvt_header, cvt_value, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_XMLHttpRequest_send(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"data", NULL };
    char *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.XMLHttpRequest.send", kwlist, &data))
        return NULL;
    WTF::String cvt_data = WTF::String::fromUTF8((const char*)data);
    WebCore::ExceptionCode ec = 0;
    
    coreXMLHttpRequest(self)->send(cvt_data, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_XMLHttpRequest_abort(PyDOMObject *self)
{
    
    coreXMLHttpRequest(self)->abort();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_XMLHttpRequest_getAllResponseHeaders(PyDOMObject *self)
{
    char *_ret;
    WTF::String ret;

    WebCore::ExceptionCode ec = 0;
    
    ret = coreXMLHttpRequest(self)->getAllResponseHeaders(ec);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_XMLHttpRequest_getResponseHeader(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"header", NULL };
    char *header, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.XMLHttpRequest.getResponseHeader", kwlist, &header))
        return NULL;
    WTF::String cvt_header = WTF::String::fromUTF8((const char*)header);
    WebCore::ExceptionCode ec = 0;
    
    ret = coreXMLHttpRequest(self)->getResponseHeader(cvt_header, ec);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_XMLHttpRequest_overrideMimeType(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"override", NULL };
    char *override;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.XMLHttpRequest.overrideMimeType", kwlist, &override))
        return NULL;
    WTF::String cvt_override = WTF::String::fromUTF8((const char*)override);
    
    coreXMLHttpRequest(self)->overrideMimeType(cvt_override);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_XMLHttpRequest_addEventListener(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"listener", (char*)"useCapture", NULL };
    char *type;
    PyDOMObject *py_listener;
    int useCapture;
    EventListener *listener = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sOi:pywebkit.XMLHttpRequest.addEventListener", kwlist, &type, &py_listener, &useCapture))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    if (py_listener)
        listener = coreEventListener(py_listener);
    bool cvt_useCapture = (bool)useCapture;
    
    coreXMLHttpRequest(self)->addEventListener(cvt_type, (EventListener *) listener, cvt_useCapture);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_XMLHttpRequest_removeEventListener(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"listener", (char*)"useCapture", NULL };
    char *type;
    PyDOMObject *py_listener;
    int useCapture;
    EventListener *listener = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sOi:pywebkit.XMLHttpRequest.removeEventListener", kwlist, &type, &py_listener, &useCapture))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    if (py_listener)
        listener = coreEventListener(py_listener);
    bool cvt_useCapture = (bool)useCapture;
    
    coreXMLHttpRequest(self)->removeEventListener(cvt_type, (EventListener *) listener, cvt_useCapture);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_XMLHttpRequest_dispatchEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"evt", NULL };
    PyDOMObject *evt;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.XMLHttpRequest.dispatchEvent", kwlist, PtrPyDOMEvent_Type, &evt))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreXMLHttpRequest(self)->dispatchEvent(coreEvent(evt), ec);
    
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMXMLHttpRequest_methods[] = {
    { "open", (PyCFunction)WebKit::_wrap_XMLHttpRequest_open, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setRequestHeader", (PyCFunction)WebKit::_wrap_XMLHttpRequest_setRequestHeader, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "send", (PyCFunction)WebKit::_wrap_XMLHttpRequest_send, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "abort", (PyCFunction)WebKit::_wrap_XMLHttpRequest_abort, METH_NOARGS,
      NULL },
    { "getAllResponseHeaders", (PyCFunction)WebKit::_wrap_XMLHttpRequest_getAllResponseHeaders, METH_NOARGS,
      NULL },
    { "getResponseHeader", (PyCFunction)WebKit::_wrap_XMLHttpRequest_getResponseHeader, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "overrideMimeType", (PyCFunction)WebKit::_wrap_XMLHttpRequest_overrideMimeType, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "addEventListener", (PyCFunction)WebKit::_wrap_XMLHttpRequest_addEventListener, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeEventListener", (PyCFunction)WebKit::_wrap_XMLHttpRequest_removeEventListener, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "dispatchEvent", (PyCFunction)WebKit::_wrap_XMLHttpRequest_dispatchEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corexmlhttprequest__get_onabort(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreXMLHttpRequest((PyDOMObject*)(self))->onabort();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corexmlhttprequest__set_onabort(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onabort;
    EventListener *onabort = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corexmlhttprequest__set_onabort", &py_onabort))
        return -1;
    if (py_onabort)
        onabort = coreEventListener(py_onabort);
    coreXMLHttpRequest((PyDOMObject*)(self))->setOnabort((EventListener *) onabort);

    return 0;
}

static PyObject *
_wrap_corexmlhttprequest__get_onerror(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreXMLHttpRequest((PyDOMObject*)(self))->onerror();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corexmlhttprequest__set_onerror(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onerror;
    EventListener *onerror = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corexmlhttprequest__set_onerror", &py_onerror))
        return -1;
    if (py_onerror)
        onerror = coreEventListener(py_onerror);
    coreXMLHttpRequest((PyDOMObject*)(self))->setOnerror((EventListener *) onerror);

    return 0;
}

static PyObject *
_wrap_corexmlhttprequest__get_onload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreXMLHttpRequest((PyDOMObject*)(self))->onload();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corexmlhttprequest__set_onload(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onload;
    EventListener *onload = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corexmlhttprequest__set_onload", &py_onload))
        return -1;
    if (py_onload)
        onload = coreEventListener(py_onload);
    coreXMLHttpRequest((PyDOMObject*)(self))->setOnload((EventListener *) onload);

    return 0;
}

static PyObject *
_wrap_corexmlhttprequest__get_onloadstart(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreXMLHttpRequest((PyDOMObject*)(self))->onloadstart();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corexmlhttprequest__set_onloadstart(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onloadstart;
    EventListener *onloadstart = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corexmlhttprequest__set_onloadstart", &py_onloadstart))
        return -1;
    if (py_onloadstart)
        onloadstart = coreEventListener(py_onloadstart);
    coreXMLHttpRequest((PyDOMObject*)(self))->setOnloadstart((EventListener *) onloadstart);

    return 0;
}

static PyObject *
_wrap_corexmlhttprequest__get_onprogress(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreXMLHttpRequest((PyDOMObject*)(self))->onprogress();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corexmlhttprequest__set_onprogress(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onprogress;
    EventListener *onprogress = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corexmlhttprequest__set_onprogress", &py_onprogress))
        return -1;
    if (py_onprogress)
        onprogress = coreEventListener(py_onprogress);
    coreXMLHttpRequest((PyDOMObject*)(self))->setOnprogress((EventListener *) onprogress);

    return 0;
}

static PyObject *
_wrap_corexmlhttprequest__get_onreadystatechange(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreXMLHttpRequest((PyDOMObject*)(self))->onreadystatechange();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corexmlhttprequest__set_onreadystatechange(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onreadystatechange;
    EventListener *onreadystatechange = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corexmlhttprequest__set_onreadystatechange", &py_onreadystatechange))
        return -1;
    if (py_onreadystatechange)
        onreadystatechange = coreEventListener(py_onreadystatechange);
    coreXMLHttpRequest((PyDOMObject*)(self))->setOnreadystatechange((EventListener *) onreadystatechange);

    return 0;
}

static PyObject *
_wrap_corexmlhttprequest__get_readyState(PyObject *self, void *closure)
{
    int ret;

    ret = coreXMLHttpRequest((PyDOMObject*)(self))->readyState();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_corexmlhttprequest__get_withCredentials(PyObject *self, void *closure)
{
    bool ret;

    ret = coreXMLHttpRequest((PyDOMObject*)(self))->withCredentials();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corexmlhttprequest__set_withCredentials(PyObject *self, PyObject *args, void *closure)
{
    int withCredentials;

    if (!PyArg_Parse(args,"i:_wrap_corexmlhttprequest__set_withCredentials", &withCredentials))
        return -1;
    bool cvt_withCredentials = (bool)withCredentials;
    WebCore::ExceptionCode ec = 0;
    coreXMLHttpRequest((PyDOMObject*)(self))->setWithCredentials(cvt_withCredentials, ec);

    return 0;
}

static PyObject *
_wrap_corexmlhttprequest__get_upload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::XMLHttpRequestUpload* _ret;

    _ret = coreXMLHttpRequest((PyDOMObject*)(self))->upload();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corexmlhttprequest__get_responseText(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    WebCore::ExceptionCode ec = 0;
    ret = coreXMLHttpRequest((PyDOMObject*)(self))->responseText(ec);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corexmlhttprequest__get_responseXML(PyObject *self, void *closure)
{
    WebCore::Document* _ret;
    PyObject *py_ret;

    WebCore::ExceptionCode ec = 0;
    _ret = coreXMLHttpRequest((PyDOMObject*)(self))->responseXML(ec);
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corexmlhttprequest__get_status(PyObject *self, void *closure)
{
    int ret;

    WebCore::ExceptionCode ec = 0;
    ret = coreXMLHttpRequest((PyDOMObject*)(self))->status(ec);
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_corexmlhttprequest__get_statusText(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    WebCore::ExceptionCode ec = 0;
    ret = coreXMLHttpRequest((PyDOMObject*)(self))->statusText(ec);
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corexmlhttprequest_getsets[] = {
    { (char*)"onabort", (getter)WebKit::_wrap_corexmlhttprequest__get_onabort, (setter)WebKit::_wrap_corexmlhttprequest__set_onabort, 0, 0 },
    { (char*)"onerror", (getter)WebKit::_wrap_corexmlhttprequest__get_onerror, (setter)WebKit::_wrap_corexmlhttprequest__set_onerror, 0, 0 },
    { (char*)"onload", (getter)WebKit::_wrap_corexmlhttprequest__get_onload, (setter)WebKit::_wrap_corexmlhttprequest__set_onload, 0, 0 },
    { (char*)"onloadstart", (getter)WebKit::_wrap_corexmlhttprequest__get_onloadstart, (setter)WebKit::_wrap_corexmlhttprequest__set_onloadstart, 0, 0 },
    { (char*)"onprogress", (getter)WebKit::_wrap_corexmlhttprequest__get_onprogress, (setter)WebKit::_wrap_corexmlhttprequest__set_onprogress, 0, 0 },
    { (char*)"onreadystatechange", (getter)WebKit::_wrap_corexmlhttprequest__get_onreadystatechange, (setter)WebKit::_wrap_corexmlhttprequest__set_onreadystatechange, 0, 0 },
    { (char*)"readyState", (getter)WebKit::_wrap_corexmlhttprequest__get_readyState, (setter)0, 0, 0 },
    { (char*)"withCredentials", (getter)WebKit::_wrap_corexmlhttprequest__get_withCredentials, (setter)WebKit::_wrap_corexmlhttprequest__set_withCredentials, 0, 0 },
    { (char*)"upload", (getter)WebKit::_wrap_corexmlhttprequest__get_upload, (setter)0, 0, 0 },
    { (char*)"responseText", (getter)WebKit::_wrap_corexmlhttprequest__get_responseText, (setter)0, 0, 0 },
    { (char*)"responseXML", (getter)WebKit::_wrap_corexmlhttprequest__get_responseXML, (setter)0, 0, 0 },
    { (char*)"status", (getter)WebKit::_wrap_corexmlhttprequest__get_status, (setter)0, 0, 0 },
    { (char*)"statusText", (getter)WebKit::_wrap_corexmlhttprequest__get_statusText, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_XMLHttpRequest(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::XMLHttpRequest* cobj = coreXMLHttpRequest(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMXMLHttpRequest_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.XMLHttpRequest",                   /* tp_name */
    sizeof(PyDOMXMLHttpRequest),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_XMLHttpRequest,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMXMLHttpRequest_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corexmlhttprequest_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::XMLHttpRequest_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- XMLHttpRequestProgressEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
XMLHttpRequestProgressEvent_init(XMLHttpRequestProgressEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMProgressEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corexmlhttprequestprogressevent__get_position(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreXMLHttpRequestProgressEvent((PyDOMObject*)(self))->position();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_corexmlhttprequestprogressevent__get_totalSize(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreXMLHttpRequestProgressEvent((PyDOMObject*)(self))->totalSize();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corexmlhttprequestprogressevent_getsets[] = {
    { (char*)"position", (getter)WebKit::_wrap_corexmlhttprequestprogressevent__get_position, (setter)0, 0, 0 },
    { (char*)"totalSize", (getter)WebKit::_wrap_corexmlhttprequestprogressevent__get_totalSize, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_XMLHttpRequestProgressEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::XMLHttpRequestProgressEvent* cobj = coreXMLHttpRequestProgressEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMXMLHttpRequestProgressEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.XMLHttpRequestProgressEvent",                   /* tp_name */
    sizeof(PyDOMXMLHttpRequestProgressEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_XMLHttpRequestProgressEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corexmlhttprequestprogressevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::XMLHttpRequestProgressEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- XMLHttpRequestUpload ----------- */

namespace WebKit {
using namespace WebCore;

static int
XMLHttpRequestUpload_init(XMLHttpRequestUpload *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_XMLHttpRequestUpload_addEventListener(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"listener", (char*)"useCapture", NULL };
    char *type;
    PyDOMObject *py_listener;
    int useCapture;
    EventListener *listener = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sOi:pywebkit.XMLHttpRequestUpload.addEventListener", kwlist, &type, &py_listener, &useCapture))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    if (py_listener)
        listener = coreEventListener(py_listener);
    bool cvt_useCapture = (bool)useCapture;
    
    coreXMLHttpRequestUpload(self)->addEventListener(cvt_type, (EventListener *) listener, cvt_useCapture);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_XMLHttpRequestUpload_removeEventListener(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"listener", (char*)"useCapture", NULL };
    char *type;
    PyDOMObject *py_listener;
    int useCapture;
    EventListener *listener = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sOi:pywebkit.XMLHttpRequestUpload.removeEventListener", kwlist, &type, &py_listener, &useCapture))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    if (py_listener)
        listener = coreEventListener(py_listener);
    bool cvt_useCapture = (bool)useCapture;
    
    coreXMLHttpRequestUpload(self)->removeEventListener(cvt_type, (EventListener *) listener, cvt_useCapture);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_XMLHttpRequestUpload_dispatchEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"evt", NULL };
    PyDOMObject *evt;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.XMLHttpRequestUpload.dispatchEvent", kwlist, PtrPyDOMEvent_Type, &evt))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreXMLHttpRequestUpload(self)->dispatchEvent(coreEvent(evt), ec);
    
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMXMLHttpRequestUpload_methods[] = {
    { "addEventListener", (PyCFunction)WebKit::_wrap_XMLHttpRequestUpload_addEventListener, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeEventListener", (PyCFunction)WebKit::_wrap_XMLHttpRequestUpload_removeEventListener, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "dispatchEvent", (PyCFunction)WebKit::_wrap_XMLHttpRequestUpload_dispatchEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corexmlhttprequestupload__get_onabort(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreXMLHttpRequestUpload((PyDOMObject*)(self))->onabort();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corexmlhttprequestupload__set_onabort(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onabort;
    EventListener *onabort = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corexmlhttprequestupload__set_onabort", &py_onabort))
        return -1;
    if (py_onabort)
        onabort = coreEventListener(py_onabort);
    coreXMLHttpRequestUpload((PyDOMObject*)(self))->setOnabort((EventListener *) onabort);

    return 0;
}

static PyObject *
_wrap_corexmlhttprequestupload__get_onerror(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreXMLHttpRequestUpload((PyDOMObject*)(self))->onerror();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corexmlhttprequestupload__set_onerror(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onerror;
    EventListener *onerror = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corexmlhttprequestupload__set_onerror", &py_onerror))
        return -1;
    if (py_onerror)
        onerror = coreEventListener(py_onerror);
    coreXMLHttpRequestUpload((PyDOMObject*)(self))->setOnerror((EventListener *) onerror);

    return 0;
}

static PyObject *
_wrap_corexmlhttprequestupload__get_onload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreXMLHttpRequestUpload((PyDOMObject*)(self))->onload();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corexmlhttprequestupload__set_onload(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onload;
    EventListener *onload = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corexmlhttprequestupload__set_onload", &py_onload))
        return -1;
    if (py_onload)
        onload = coreEventListener(py_onload);
    coreXMLHttpRequestUpload((PyDOMObject*)(self))->setOnload((EventListener *) onload);

    return 0;
}

static PyObject *
_wrap_corexmlhttprequestupload__get_onloadstart(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreXMLHttpRequestUpload((PyDOMObject*)(self))->onloadstart();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corexmlhttprequestupload__set_onloadstart(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onloadstart;
    EventListener *onloadstart = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corexmlhttprequestupload__set_onloadstart", &py_onloadstart))
        return -1;
    if (py_onloadstart)
        onloadstart = coreEventListener(py_onloadstart);
    coreXMLHttpRequestUpload((PyDOMObject*)(self))->setOnloadstart((EventListener *) onloadstart);

    return 0;
}

static PyObject *
_wrap_corexmlhttprequestupload__get_onprogress(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreXMLHttpRequestUpload((PyDOMObject*)(self))->onprogress();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_corexmlhttprequestupload__set_onprogress(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onprogress;
    EventListener *onprogress = NULL;

    if (!PyArg_Parse(args,"O:_wrap_corexmlhttprequestupload__set_onprogress", &py_onprogress))
        return -1;
    if (py_onprogress)
        onprogress = coreEventListener(py_onprogress);
    coreXMLHttpRequestUpload((PyDOMObject*)(self))->setOnprogress((EventListener *) onprogress);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corexmlhttprequestupload_getsets[] = {
    { (char*)"onabort", (getter)WebKit::_wrap_corexmlhttprequestupload__get_onabort, (setter)WebKit::_wrap_corexmlhttprequestupload__set_onabort, 0, 0 },
    { (char*)"onerror", (getter)WebKit::_wrap_corexmlhttprequestupload__get_onerror, (setter)WebKit::_wrap_corexmlhttprequestupload__set_onerror, 0, 0 },
    { (char*)"onload", (getter)WebKit::_wrap_corexmlhttprequestupload__get_onload, (setter)WebKit::_wrap_corexmlhttprequestupload__set_onload, 0, 0 },
    { (char*)"onloadstart", (getter)WebKit::_wrap_corexmlhttprequestupload__get_onloadstart, (setter)WebKit::_wrap_corexmlhttprequestupload__set_onloadstart, 0, 0 },
    { (char*)"onprogress", (getter)WebKit::_wrap_corexmlhttprequestupload__get_onprogress, (setter)WebKit::_wrap_corexmlhttprequestupload__set_onprogress, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_XMLHttpRequestUpload(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::XMLHttpRequestUpload* cobj = coreXMLHttpRequestUpload(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMXMLHttpRequestUpload_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.XMLHttpRequestUpload",                   /* tp_name */
    sizeof(PyDOMXMLHttpRequestUpload),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_XMLHttpRequestUpload,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMXMLHttpRequestUpload_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corexmlhttprequestupload_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::XMLHttpRequestUpload_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- BarInfo ----------- */

namespace WebKit {
using namespace WebCore;

static int
BarInfo_init(BarInfo *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corebarinfo__get_visible(PyObject *self, void *closure)
{
    bool ret;

    ret = coreBarInfo((PyDOMObject*)(self))->visible();
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corebarinfo_getsets[] = {
    { (char*)"visible", (getter)WebKit::_wrap_corebarinfo__get_visible, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_BarInfo(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::BarInfo* cobj = coreBarInfo(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMBarInfo_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.BarInfo",                   /* tp_name */
    sizeof(PyDOMBarInfo),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_BarInfo,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corebarinfo_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::BarInfo_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Coordinates ----------- */

namespace WebKit {
using namespace WebCore;

static int
Coordinates_init(Coordinates *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corecoordinates__get_latitude(PyObject *self, void *closure)
{
    double ret;

    ret = coreCoordinates((PyDOMObject*)(self))->latitude();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_corecoordinates__get_longitude(PyObject *self, void *closure)
{
    double ret;

    ret = coreCoordinates((PyDOMObject*)(self))->longitude();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_corecoordinates__get_altitude(PyObject *self, void *closure)
{
    double ret;

    ret = coreCoordinates((PyDOMObject*)(self))->altitude();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_corecoordinates__get_accuracy(PyObject *self, void *closure)
{
    double ret;

    ret = coreCoordinates((PyDOMObject*)(self))->accuracy();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_corecoordinates__get_altitudeAccuracy(PyObject *self, void *closure)
{
    double ret;

    ret = coreCoordinates((PyDOMObject*)(self))->altitudeAccuracy();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_corecoordinates__get_heading(PyObject *self, void *closure)
{
    double ret;

    ret = coreCoordinates((PyDOMObject*)(self))->heading();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_corecoordinates__get_speed(PyObject *self, void *closure)
{
    double ret;

    ret = coreCoordinates((PyDOMObject*)(self))->speed();
    return PyFloat_FromDouble(ret);
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecoordinates_getsets[] = {
    { (char*)"latitude", (getter)WebKit::_wrap_corecoordinates__get_latitude, (setter)0, 0, 0 },
    { (char*)"longitude", (getter)WebKit::_wrap_corecoordinates__get_longitude, (setter)0, 0, 0 },
    { (char*)"altitude", (getter)WebKit::_wrap_corecoordinates__get_altitude, (setter)0, 0, 0 },
    { (char*)"accuracy", (getter)WebKit::_wrap_corecoordinates__get_accuracy, (setter)0, 0, 0 },
    { (char*)"altitudeAccuracy", (getter)WebKit::_wrap_corecoordinates__get_altitudeAccuracy, (setter)0, 0, 0 },
    { (char*)"heading", (getter)WebKit::_wrap_corecoordinates__get_heading, (setter)0, 0, 0 },
    { (char*)"speed", (getter)WebKit::_wrap_corecoordinates__get_speed, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Coordinates(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Coordinates* cobj = coreCoordinates(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCoordinates_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Coordinates",                   /* tp_name */
    sizeof(PyDOMCoordinates),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Coordinates,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecoordinates_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Coordinates_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- DOMSelection ----------- */

namespace WebKit {
using namespace WebCore;

static int
DOMSelection_init(DOMSelection *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_DOMSelection_collapse(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"node", (char*)"index", NULL };
    PyDOMObject *node;
    long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!l:pywebkit.DOMSelection.collapse", kwlist, PtrPyDOMNode_Type, &node, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreDOMSelection(self)->collapse(coreNode(node), index, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMSelection_collapseToEnd(PyDOMObject *self)
{
    WebCore::ExceptionCode ec = 0;
    
    coreDOMSelection(self)->collapseToEnd(ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMSelection_collapseToStart(PyDOMObject *self)
{
    WebCore::ExceptionCode ec = 0;
    
    coreDOMSelection(self)->collapseToStart(ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMSelection_deleteFromDocument(PyDOMObject *self)
{
    
    coreDOMSelection(self)->deleteFromDocument();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMSelection_containsNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"node", (char*)"allowPartial", NULL };
    int allowPartial;
    PyDOMObject *node;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:pywebkit.DOMSelection.containsNode", kwlist, PtrPyDOMNode_Type, &node, &allowPartial))
        return NULL;
    bool cvt_allowPartial = (bool)allowPartial;
    
    ret = coreDOMSelection(self)->containsNode(coreNode(node), cvt_allowPartial);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_DOMSelection_selectAllChildren(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"node", NULL };
    PyDOMObject *node;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.DOMSelection.selectAllChildren", kwlist, PtrPyDOMNode_Type, &node))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreDOMSelection(self)->selectAllChildren(coreNode(node), ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMSelection_extend(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"node", (char*)"offset", NULL };
    PyDOMObject *node;
    long offset;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!l:pywebkit.DOMSelection.extend", kwlist, PtrPyDOMNode_Type, &node, &offset))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreDOMSelection(self)->extend(coreNode(node), offset, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMSelection_getRangeAt(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    PyObject *py_ret;
    WebCore::Range* _ret;
    long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.DOMSelection.getRangeAt", kwlist, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreDOMSelection(self)->getRangeAt(index, ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_DOMSelection_removeAllRanges(PyDOMObject *self)
{
    
    coreDOMSelection(self)->removeAllRanges();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMSelection_addRange(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"range", NULL };
    PyDOMObject *range;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.DOMSelection.addRange", kwlist, PtrPyDOMRange_Type, &range))
        return NULL;
    
    coreDOMSelection(self)->addRange(coreRange(range));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMSelection_modify(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"alter", (char*)"direction", (char*)"granularity", NULL };
    char *alter, *direction, *granularity;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sss:pywebkit.DOMSelection.modify", kwlist, &alter, &direction, &granularity))
        return NULL;
    WTF::String cvt_alter = WTF::String::fromUTF8((const char*)alter);
    WTF::String cvt_direction = WTF::String::fromUTF8((const char*)direction);
    WTF::String cvt_granularity = WTF::String::fromUTF8((const char*)granularity);
    
    coreDOMSelection(self)->modify(cvt_alter, cvt_direction, cvt_granularity);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMSelection_setBaseAndExtent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"baseNode", (char*)"baseOffset", (char*)"extentNode", (char*)"extentOffset", NULL };
    PyDOMObject *baseNode, *extentNode;
    long baseOffset, extentOffset;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!lO!l:pywebkit.DOMSelection.setBaseAndExtent", kwlist, PtrPyDOMNode_Type, &baseNode, &baseOffset, PtrPyDOMNode_Type, &extentNode, &extentOffset))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreDOMSelection(self)->setBaseAndExtent(coreNode(baseNode), baseOffset, coreNode(extentNode), extentOffset, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMSelection_setPosition(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"node", (char*)"offset", NULL };
    PyDOMObject *node;
    long offset;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!l:pywebkit.DOMSelection.setPosition", kwlist, PtrPyDOMNode_Type, &node, &offset))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreDOMSelection(self)->setPosition(coreNode(node), offset, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMSelection_empty(PyDOMObject *self)
{
    
    coreDOMSelection(self)->empty();
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMDOMSelection_methods[] = {
    { "collapse", (PyCFunction)WebKit::_wrap_DOMSelection_collapse, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "collapseToEnd", (PyCFunction)WebKit::_wrap_DOMSelection_collapseToEnd, METH_NOARGS,
      NULL },
    { "collapseToStart", (PyCFunction)WebKit::_wrap_DOMSelection_collapseToStart, METH_NOARGS,
      NULL },
    { "deleteFromDocument", (PyCFunction)WebKit::_wrap_DOMSelection_deleteFromDocument, METH_NOARGS,
      NULL },
    { "containsNode", (PyCFunction)WebKit::_wrap_DOMSelection_containsNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "selectAllChildren", (PyCFunction)WebKit::_wrap_DOMSelection_selectAllChildren, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "extend", (PyCFunction)WebKit::_wrap_DOMSelection_extend, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getRangeAt", (PyCFunction)WebKit::_wrap_DOMSelection_getRangeAt, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeAllRanges", (PyCFunction)WebKit::_wrap_DOMSelection_removeAllRanges, METH_NOARGS,
      NULL },
    { "addRange", (PyCFunction)WebKit::_wrap_DOMSelection_addRange, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "modify", (PyCFunction)WebKit::_wrap_DOMSelection_modify, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setBaseAndExtent", (PyCFunction)WebKit::_wrap_DOMSelection_setBaseAndExtent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setPosition", (PyCFunction)WebKit::_wrap_DOMSelection_setPosition, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "empty", (PyCFunction)WebKit::_wrap_DOMSelection_empty, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coredomselection__get_anchorNode(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreDOMSelection((PyDOMObject*)(self))->anchorNode();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomselection__get_anchorOffset(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMSelection((PyDOMObject*)(self))->anchorOffset();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomselection__get_focusNode(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreDOMSelection((PyDOMObject*)(self))->focusNode();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomselection__get_focusOffset(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMSelection((PyDOMObject*)(self))->focusOffset();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomselection__get_isCollapsed(PyObject *self, void *closure)
{
    bool ret;

    ret = coreDOMSelection((PyDOMObject*)(self))->isCollapsed();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coredomselection__get_rangeCount(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMSelection((PyDOMObject*)(self))->rangeCount();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomselection__get_baseNode(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreDOMSelection((PyDOMObject*)(self))->baseNode();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomselection__get_baseOffset(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMSelection((PyDOMObject*)(self))->baseOffset();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomselection__get_extentNode(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreDOMSelection((PyDOMObject*)(self))->extentNode();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomselection__get_extentOffset(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMSelection((PyDOMObject*)(self))->extentOffset();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomselection__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDOMSelection((PyDOMObject*)(self))->type();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coredomselection_getsets[] = {
    { (char*)"anchorNode", (getter)WebKit::_wrap_coredomselection__get_anchorNode, (setter)0, 0, 0 },
    { (char*)"anchorOffset", (getter)WebKit::_wrap_coredomselection__get_anchorOffset, (setter)0, 0, 0 },
    { (char*)"focusNode", (getter)WebKit::_wrap_coredomselection__get_focusNode, (setter)0, 0, 0 },
    { (char*)"focusOffset", (getter)WebKit::_wrap_coredomselection__get_focusOffset, (setter)0, 0, 0 },
    { (char*)"isCollapsed", (getter)WebKit::_wrap_coredomselection__get_isCollapsed, (setter)0, 0, 0 },
    { (char*)"rangeCount", (getter)WebKit::_wrap_coredomselection__get_rangeCount, (setter)0, 0, 0 },
    { (char*)"baseNode", (getter)WebKit::_wrap_coredomselection__get_baseNode, (setter)0, 0, 0 },
    { (char*)"baseOffset", (getter)WebKit::_wrap_coredomselection__get_baseOffset, (setter)0, 0, 0 },
    { (char*)"extentNode", (getter)WebKit::_wrap_coredomselection__get_extentNode, (setter)0, 0, 0 },
    { (char*)"extentOffset", (getter)WebKit::_wrap_coredomselection__get_extentOffset, (setter)0, 0, 0 },
    { (char*)"type", (getter)WebKit::_wrap_coredomselection__get_type, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_DOMSelection(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::DOMSelection* cobj = coreDOMSelection(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMDOMSelection_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.DOMSelection",                   /* tp_name */
    sizeof(PyDOMDOMSelection),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_DOMSelection,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMDOMSelection_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coredomselection_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::DOMSelection_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- DOMWindow ----------- */

namespace WebKit {
using namespace WebCore;

static int
DOMWindow_init(DOMWindow *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_DOMWindow_getSelection(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::DOMSelection* _ret;

    
    _ret = coreDOMWindow(self)->getSelection();
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_DOMWindow_focus(PyDOMObject *self)
{
    
    coreDOMWindow(self)->focus();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_blur(PyDOMObject *self)
{
    
    coreDOMWindow(self)->blur();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_close(PyDOMObject *self)
{
    
    coreDOMWindow(self)->close();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_print(PyDOMObject *self)
{
    
    coreDOMWindow(self)->print();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_stop(PyDOMObject *self)
{
    
    coreDOMWindow(self)->stop();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_alert(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"message", NULL };
    char *message;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.DOMWindow.alert", kwlist, &message))
        return NULL;
    WTF::String cvt_message = WTF::String::fromUTF8((const char*)message);
    
    coreDOMWindow(self)->alert(cvt_message);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_confirm(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"message", NULL };
    char *message;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.DOMWindow.confirm", kwlist, &message))
        return NULL;
    WTF::String cvt_message = WTF::String::fromUTF8((const char*)message);
    
    ret = coreDOMWindow(self)->confirm(cvt_message);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_DOMWindow_prompt(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"message", (char*)"defaultValue", NULL };
    char *message, *defaultValue, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:pywebkit.DOMWindow.prompt", kwlist, &message, &defaultValue))
        return NULL;
    WTF::String cvt_message = WTF::String::fromUTF8((const char*)message);
    WTF::String cvt_defaultValue = WTF::String::fromUTF8((const char*)defaultValue);
    
    ret = coreDOMWindow(self)->prompt(cvt_message, cvt_defaultValue);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_DOMWindow_find(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"string", (char*)"caseSensitive", (char*)"backwards", (char*)"wrap", (char*)"wholeWord", (char*)"searchInFrames", (char*)"showDialog", NULL };
    char *string;
    int caseSensitive, backwards, wrap, wholeWord, searchInFrames, showDialog;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siiiiii:pywebkit.DOMWindow.find", kwlist, &string, &caseSensitive, &backwards, &wrap, &wholeWord, &searchInFrames, &showDialog))
        return NULL;
    WTF::String cvt_string = WTF::String::fromUTF8((const char*)string);
    bool cvt_caseSensitive = (bool)caseSensitive;
    bool cvt_backwards = (bool)backwards;
    bool cvt_wrap = (bool)wrap;
    bool cvt_wholeWord = (bool)wholeWord;
    bool cvt_searchInFrames = (bool)searchInFrames;
    bool cvt_showDialog = (bool)showDialog;
    
    ret = coreDOMWindow(self)->find(cvt_string, cvt_caseSensitive, cvt_backwards, cvt_wrap, cvt_wholeWord, cvt_searchInFrames, cvt_showDialog);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_DOMWindow_scrollBy(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"x", (char*)"y", NULL };
    long x, y;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ll:pywebkit.DOMWindow.scrollBy", kwlist, &x, &y))
        return NULL;
    
    coreDOMWindow(self)->scrollBy(x, y);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_scrollTo(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"x", (char*)"y", NULL };
    long x, y;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ll:pywebkit.DOMWindow.scrollTo", kwlist, &x, &y))
        return NULL;
    
    coreDOMWindow(self)->scrollTo(x, y);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_scroll(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"x", (char*)"y", NULL };
    long x, y;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ll:pywebkit.DOMWindow.scroll", kwlist, &x, &y))
        return NULL;
    
    coreDOMWindow(self)->scroll(x, y);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_moveBy(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"x", (char*)"y", NULL };
    double x, y;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dd:pywebkit.DOMWindow.moveBy", kwlist, &x, &y))
        return NULL;
    
    coreDOMWindow(self)->moveBy(x, y);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_moveTo(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"x", (char*)"y", NULL };
    double x, y;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dd:pywebkit.DOMWindow.moveTo", kwlist, &x, &y))
        return NULL;
    
    coreDOMWindow(self)->moveTo(x, y);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_resizeBy(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"x", (char*)"y", NULL };
    double x, y;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dd:pywebkit.DOMWindow.resizeBy", kwlist, &x, &y))
        return NULL;
    
    coreDOMWindow(self)->resizeBy(x, y);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_resizeTo(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"width", (char*)"height", NULL };
    double width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dd:pywebkit.DOMWindow.resizeTo", kwlist, &width, &height))
        return NULL;
    
    coreDOMWindow(self)->resizeTo(width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_getComputedStyle(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"element", (char*)"pseudoElement", NULL };
    char *pseudoElement;
    PyDOMObject *element;
    WebCore::CSSStyleDeclaration* _ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!s:pywebkit.DOMWindow.getComputedStyle", kwlist, PtrPyDOMElement_Type, &element, &pseudoElement))
        return NULL;
    WTF::String cvt_pseudoElement = WTF::String::fromUTF8((const char*)pseudoElement);
    
    _ret = WTF::getPtr(coreDOMWindow(self)->getComputedStyle(coreElement(element), cvt_pseudoElement));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_DOMWindow_getMatchedCSSRules(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"element", (char*)"pseudoElement", (char*)"authorOnly", NULL };
    PyDOMObject *element;
    WebCore::CSSRuleList* _ret;
    int authorOnly;
    char *pseudoElement;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!si:pywebkit.DOMWindow.getMatchedCSSRules", kwlist, PtrPyDOMElement_Type, &element, &pseudoElement, &authorOnly))
        return NULL;
    WTF::String cvt_pseudoElement = WTF::String::fromUTF8((const char*)pseudoElement);
    bool cvt_authorOnly = (bool)authorOnly;
    
    _ret = WTF::getPtr(coreDOMWindow(self)->getMatchedCSSRules(coreElement(element), cvt_pseudoElement, cvt_authorOnly));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_DOMWindow_webkitConvertPointFromPageToNode(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"node", (char*)"p", NULL };
    WebCore::WebKitPoint* _ret;
    PyDOMObject *node, *p;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:pywebkit.DOMWindow.webkitConvertPointFromPageToNode", kwlist, PtrPyDOMNode_Type, &node, PtrPyDOMWebKitPoint_Type, &p))
        return NULL;
    
    _ret = WTF::getPtr(coreDOMWindow(self)->webkitConvertPointFromPageToNode(coreNode(node), coreWebKitPoint(p)));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_DOMWindow_webkitConvertPointFromNodeToPage(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"node", (char*)"p", NULL };
    WebCore::WebKitPoint* _ret;
    PyDOMObject *node, *p;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:pywebkit.DOMWindow.webkitConvertPointFromNodeToPage", kwlist, PtrPyDOMNode_Type, &node, PtrPyDOMWebKitPoint_Type, &p))
        return NULL;
    
    _ret = WTF::getPtr(coreDOMWindow(self)->webkitConvertPointFromNodeToPage(coreNode(node), coreWebKitPoint(p)));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_DOMWindow_setTimeout(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"handler", (char*)"timeout", NULL };
    PyDOMObject *py_handler;
    ScheduledActionBase* handler;
    long timeout, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"Ol:pywebkit.DOMWindow.setTimeout", kwlist, &py_handler, &timeout))
        return NULL;
    if (py_handler)
        handler = WTF::getPtr(coreScheduledActionBase(py_handler));
    WebCore::ExceptionCode ec = 0;
    
    ret = coreDOMWindow(self)->setTimeout(adoptPtr(handler), timeout, ec);
    
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_DOMWindow_clearTimeout(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"handle", NULL };
    long handle;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.DOMWindow.clearTimeout", kwlist, &handle))
        return NULL;
    
    coreDOMWindow(self)->clearTimeout(handle);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_setInterval(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"handler", (char*)"timeout", NULL };
    PyDOMObject *py_handler;
    ScheduledActionBase* handler;
    long timeout, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"Ol:pywebkit.DOMWindow.setInterval", kwlist, &py_handler, &timeout))
        return NULL;
    if (py_handler)
        handler = WTF::getPtr(coreScheduledActionBase(py_handler));
    WebCore::ExceptionCode ec = 0;
    
    ret = coreDOMWindow(self)->setInterval(adoptPtr(handler), timeout, ec);
    
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_DOMWindow_clearInterval(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"handle", NULL };
    long handle;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.DOMWindow.clearInterval", kwlist, &handle))
        return NULL;
    
    coreDOMWindow(self)->clearInterval(handle);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_atob(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"string", NULL };
    char *string, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.DOMWindow.atob", kwlist, &string))
        return NULL;
    WTF::String cvt_string = WTF::String::fromUTF8((const char*)string);
    WebCore::ExceptionCode ec = 0;
    
    ret = coreDOMWindow(self)->atob(cvt_string, ec);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_DOMWindow_btoa(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"string", NULL };
    char *string, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.DOMWindow.btoa", kwlist, &string))
        return NULL;
    WTF::String cvt_string = WTF::String::fromUTF8((const char*)string);
    WebCore::ExceptionCode ec = 0;
    
    ret = coreDOMWindow(self)->btoa(cvt_string, ec);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_DOMWindow_addEventListener(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"listener", (char*)"useCapture", NULL };
    char *type;
    PyDOMObject *py_listener;
    int useCapture;
    EventListener *listener = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sOi:pywebkit.DOMWindow.addEventListener", kwlist, &type, &py_listener, &useCapture))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    if (py_listener)
        listener = coreEventListener(py_listener);
    bool cvt_useCapture = (bool)useCapture;
    
    coreDOMWindow(self)->addEventListener(cvt_type, (EventListener *) listener, cvt_useCapture);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_removeEventListener(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"listener", (char*)"useCapture", NULL };
    char *type;
    PyDOMObject *py_listener;
    int useCapture;
    EventListener *listener = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sOi:pywebkit.DOMWindow.removeEventListener", kwlist, &type, &py_listener, &useCapture))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    if (py_listener)
        listener = coreEventListener(py_listener);
    bool cvt_useCapture = (bool)useCapture;
    
    coreDOMWindow(self)->removeEventListener(cvt_type, (EventListener *) listener, cvt_useCapture);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_dispatchEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"evt", NULL };
    PyDOMObject *evt;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.DOMWindow.dispatchEvent", kwlist, PtrPyDOMEvent_Type, &evt))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreDOMWindow(self)->dispatchEvent(coreEvent(evt), ec);
    
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_DOMWindow_captureEvents(PyDOMObject *self)
{
    
    coreDOMWindow(self)->captureEvents();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_DOMWindow_releaseEvents(PyDOMObject *self)
{
    
    coreDOMWindow(self)->releaseEvents();
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMDOMWindow_methods[] = {
    { "getSelection", (PyCFunction)WebKit::_wrap_DOMWindow_getSelection, METH_NOARGS,
      NULL },
    { "focus", (PyCFunction)WebKit::_wrap_DOMWindow_focus, METH_NOARGS,
      NULL },
    { "blur", (PyCFunction)WebKit::_wrap_DOMWindow_blur, METH_NOARGS,
      NULL },
    { "close", (PyCFunction)WebKit::_wrap_DOMWindow_close, METH_NOARGS,
      NULL },
    { "print_", (PyCFunction)WebKit::_wrap_DOMWindow_print, METH_NOARGS,
      NULL },
    { "stop", (PyCFunction)WebKit::_wrap_DOMWindow_stop, METH_NOARGS,
      NULL },
    { "alert", (PyCFunction)WebKit::_wrap_DOMWindow_alert, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "confirm", (PyCFunction)WebKit::_wrap_DOMWindow_confirm, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "prompt", (PyCFunction)WebKit::_wrap_DOMWindow_prompt, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "find", (PyCFunction)WebKit::_wrap_DOMWindow_find, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "scrollBy", (PyCFunction)WebKit::_wrap_DOMWindow_scrollBy, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "scrollTo", (PyCFunction)WebKit::_wrap_DOMWindow_scrollTo, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "scroll", (PyCFunction)WebKit::_wrap_DOMWindow_scroll, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "moveBy", (PyCFunction)WebKit::_wrap_DOMWindow_moveBy, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "moveTo", (PyCFunction)WebKit::_wrap_DOMWindow_moveTo, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "resizeBy", (PyCFunction)WebKit::_wrap_DOMWindow_resizeBy, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "resizeTo", (PyCFunction)WebKit::_wrap_DOMWindow_resizeTo, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getComputedStyle", (PyCFunction)WebKit::_wrap_DOMWindow_getComputedStyle, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getMatchedCSSRules", (PyCFunction)WebKit::_wrap_DOMWindow_getMatchedCSSRules, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "webkitConvertPointFromPageToNode", (PyCFunction)WebKit::_wrap_DOMWindow_webkitConvertPointFromPageToNode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "webkitConvertPointFromNodeToPage", (PyCFunction)WebKit::_wrap_DOMWindow_webkitConvertPointFromNodeToPage, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setTimeout", (PyCFunction)WebKit::_wrap_DOMWindow_setTimeout, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "clearTimeout", (PyCFunction)WebKit::_wrap_DOMWindow_clearTimeout, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setInterval", (PyCFunction)WebKit::_wrap_DOMWindow_setInterval, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "clearInterval", (PyCFunction)WebKit::_wrap_DOMWindow_clearInterval, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "atob", (PyCFunction)WebKit::_wrap_DOMWindow_atob, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "btoa", (PyCFunction)WebKit::_wrap_DOMWindow_btoa, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "addEventListener", (PyCFunction)WebKit::_wrap_DOMWindow_addEventListener, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeEventListener", (PyCFunction)WebKit::_wrap_DOMWindow_removeEventListener, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "dispatchEvent", (PyCFunction)WebKit::_wrap_DOMWindow_dispatchEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "captureEvents", (PyCFunction)WebKit::_wrap_DOMWindow_captureEvents, METH_NOARGS,
      NULL },
    { "releaseEvents", (PyCFunction)WebKit::_wrap_DOMWindow_releaseEvents, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coredomwindow__get_screen(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Screen* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->screen();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_history(PyObject *self, void *closure)
{
    WebCore::History* _ret;
    PyObject *py_ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->history();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_locationbar(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::BarInfo* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->locationbar();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_menubar(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::BarInfo* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->menubar();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_personalbar(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::BarInfo* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->personalbar();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_scrollbars(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::BarInfo* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->scrollbars();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_statusbar(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::BarInfo* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->statusbar();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_toolbar(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::BarInfo* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->toolbar();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_navigator(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Navigator* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->navigator();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_clientInformation(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Navigator* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->clientInformation();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_location(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Location* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->location();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_frameElement(PyObject *self, void *closure)
{
    WebCore::Element* _ret;
    PyObject *py_ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->frameElement();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_offscreenBuffering(PyObject *self, void *closure)
{
    bool ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->offscreenBuffering();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coredomwindow__get_outerHeight(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->outerHeight();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomwindow__get_outerWidth(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->outerWidth();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomwindow__get_innerHeight(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->innerHeight();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomwindow__get_innerWidth(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->innerWidth();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomwindow__get_screenX(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->screenX();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomwindow__get_screenY(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->screenY();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomwindow__get_screenLeft(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->screenLeft();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomwindow__get_screenTop(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->screenTop();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomwindow__get_scrollX(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->scrollX();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomwindow__get_scrollY(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->scrollY();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomwindow__get_pageXOffset(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->pageXOffset();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomwindow__get_pageYOffset(PyObject *self, void *closure)
{
    long ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->pageYOffset();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_coredomwindow__get_closed(PyObject *self, void *closure)
{
    bool ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->closed();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_coredomwindow__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_coredomwindow__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->name();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_coredomwindow__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreDOMWindow((PyDOMObject*)(self))->setName(cvt_name);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_status(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->status();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_status(PyObject *self, PyObject *args, void *closure)
{
    char *status;

    if (!PyArg_Parse(args,"s:_wrap_coredomwindow__set_status", &status))
        return -1;
    WTF::String cvt_status = WTF::String::fromUTF8((const char*)status);
    coreDOMWindow((PyDOMObject*)(self))->setStatus(cvt_status);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_defaultStatus(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->defaultStatus();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_defaultStatus(PyObject *self, PyObject *args, void *closure)
{
    char *defaultStatus;

    if (!PyArg_Parse(args,"s:_wrap_coredomwindow__set_defaultStatus", &defaultStatus))
        return -1;
    WTF::String cvt_defaultStatus = WTF::String::fromUTF8((const char*)defaultStatus);
    coreDOMWindow((PyDOMObject*)(self))->setDefaultStatus(cvt_defaultStatus);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_self(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::DOMWindow* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->self();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_window(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::DOMWindow* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->window();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_frames(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::DOMWindow* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->frames();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_opener(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::DOMWindow* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->opener();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_parent(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::DOMWindow* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->parent();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_top(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::DOMWindow* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->top();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_document(PyObject *self, void *closure)
{
    WebCore::Document* _ret;
    PyObject *py_ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->document();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_styleMedia(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::StyleMedia* _ret;

    _ret = WTF::getPtr(coreDOMWindow((PyDOMObject*)(self))->styleMedia());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_coredomwindow__get_devicePixelRatio(PyObject *self, void *closure)
{
    double ret;

    ret = coreDOMWindow((PyDOMObject*)(self))->devicePixelRatio();
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_coredomwindow__get_onabort(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onabort();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onabort(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onabort;
    EventListener *onabort = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onabort", &py_onabort))
        return -1;
    if (py_onabort)
        onabort = coreEventListener(py_onabort);
    coreDOMWindow((PyDOMObject*)(self))->setOnabort((EventListener *) onabort);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onbeforeunload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onbeforeunload();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onbeforeunload(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onbeforeunload;
    EventListener *onbeforeunload = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onbeforeunload", &py_onbeforeunload))
        return -1;
    if (py_onbeforeunload)
        onbeforeunload = coreEventListener(py_onbeforeunload);
    coreDOMWindow((PyDOMObject*)(self))->setOnbeforeunload((EventListener *) onbeforeunload);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onblur(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onblur();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onblur(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onblur;
    EventListener *onblur = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onblur", &py_onblur))
        return -1;
    if (py_onblur)
        onblur = coreEventListener(py_onblur);
    coreDOMWindow((PyDOMObject*)(self))->setOnblur((EventListener *) onblur);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_oncanplay(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->oncanplay();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_oncanplay(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oncanplay;
    EventListener *oncanplay = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_oncanplay", &py_oncanplay))
        return -1;
    if (py_oncanplay)
        oncanplay = coreEventListener(py_oncanplay);
    coreDOMWindow((PyDOMObject*)(self))->setOncanplay((EventListener *) oncanplay);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_oncanplaythrough(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->oncanplaythrough();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_oncanplaythrough(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oncanplaythrough;
    EventListener *oncanplaythrough = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_oncanplaythrough", &py_oncanplaythrough))
        return -1;
    if (py_oncanplaythrough)
        oncanplaythrough = coreEventListener(py_oncanplaythrough);
    coreDOMWindow((PyDOMObject*)(self))->setOncanplaythrough((EventListener *) oncanplaythrough);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onchange(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onchange();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onchange(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onchange;
    EventListener *onchange = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onchange", &py_onchange))
        return -1;
    if (py_onchange)
        onchange = coreEventListener(py_onchange);
    coreDOMWindow((PyDOMObject*)(self))->setOnchange((EventListener *) onchange);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onclick(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onclick();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onclick(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onclick;
    EventListener *onclick = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onclick", &py_onclick))
        return -1;
    if (py_onclick)
        onclick = coreEventListener(py_onclick);
    coreDOMWindow((PyDOMObject*)(self))->setOnclick((EventListener *) onclick);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_oncontextmenu(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->oncontextmenu();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_oncontextmenu(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oncontextmenu;
    EventListener *oncontextmenu = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_oncontextmenu", &py_oncontextmenu))
        return -1;
    if (py_oncontextmenu)
        oncontextmenu = coreEventListener(py_oncontextmenu);
    coreDOMWindow((PyDOMObject*)(self))->setOncontextmenu((EventListener *) oncontextmenu);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_ondblclick(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->ondblclick();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_ondblclick(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondblclick;
    EventListener *ondblclick = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_ondblclick", &py_ondblclick))
        return -1;
    if (py_ondblclick)
        ondblclick = coreEventListener(py_ondblclick);
    coreDOMWindow((PyDOMObject*)(self))->setOndblclick((EventListener *) ondblclick);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_ondrag(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->ondrag();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_ondrag(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondrag;
    EventListener *ondrag = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_ondrag", &py_ondrag))
        return -1;
    if (py_ondrag)
        ondrag = coreEventListener(py_ondrag);
    coreDOMWindow((PyDOMObject*)(self))->setOndrag((EventListener *) ondrag);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_ondragend(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->ondragend();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_ondragend(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragend;
    EventListener *ondragend = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_ondragend", &py_ondragend))
        return -1;
    if (py_ondragend)
        ondragend = coreEventListener(py_ondragend);
    coreDOMWindow((PyDOMObject*)(self))->setOndragend((EventListener *) ondragend);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_ondragenter(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->ondragenter();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_ondragenter(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragenter;
    EventListener *ondragenter = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_ondragenter", &py_ondragenter))
        return -1;
    if (py_ondragenter)
        ondragenter = coreEventListener(py_ondragenter);
    coreDOMWindow((PyDOMObject*)(self))->setOndragenter((EventListener *) ondragenter);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_ondragleave(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->ondragleave();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_ondragleave(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragleave;
    EventListener *ondragleave = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_ondragleave", &py_ondragleave))
        return -1;
    if (py_ondragleave)
        ondragleave = coreEventListener(py_ondragleave);
    coreDOMWindow((PyDOMObject*)(self))->setOndragleave((EventListener *) ondragleave);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_ondragover(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->ondragover();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_ondragover(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragover;
    EventListener *ondragover = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_ondragover", &py_ondragover))
        return -1;
    if (py_ondragover)
        ondragover = coreEventListener(py_ondragover);
    coreDOMWindow((PyDOMObject*)(self))->setOndragover((EventListener *) ondragover);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_ondragstart(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->ondragstart();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_ondragstart(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondragstart;
    EventListener *ondragstart = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_ondragstart", &py_ondragstart))
        return -1;
    if (py_ondragstart)
        ondragstart = coreEventListener(py_ondragstart);
    coreDOMWindow((PyDOMObject*)(self))->setOndragstart((EventListener *) ondragstart);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_ondrop(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->ondrop();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_ondrop(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondrop;
    EventListener *ondrop = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_ondrop", &py_ondrop))
        return -1;
    if (py_ondrop)
        ondrop = coreEventListener(py_ondrop);
    coreDOMWindow((PyDOMObject*)(self))->setOndrop((EventListener *) ondrop);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_ondurationchange(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->ondurationchange();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_ondurationchange(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ondurationchange;
    EventListener *ondurationchange = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_ondurationchange", &py_ondurationchange))
        return -1;
    if (py_ondurationchange)
        ondurationchange = coreEventListener(py_ondurationchange);
    coreDOMWindow((PyDOMObject*)(self))->setOndurationchange((EventListener *) ondurationchange);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onemptied(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onemptied();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onemptied(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onemptied;
    EventListener *onemptied = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onemptied", &py_onemptied))
        return -1;
    if (py_onemptied)
        onemptied = coreEventListener(py_onemptied);
    coreDOMWindow((PyDOMObject*)(self))->setOnemptied((EventListener *) onemptied);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onended(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onended();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onended(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onended;
    EventListener *onended = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onended", &py_onended))
        return -1;
    if (py_onended)
        onended = coreEventListener(py_onended);
    coreDOMWindow((PyDOMObject*)(self))->setOnended((EventListener *) onended);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onerror(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onerror();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onerror(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onerror;
    EventListener *onerror = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onerror", &py_onerror))
        return -1;
    if (py_onerror)
        onerror = coreEventListener(py_onerror);
    coreDOMWindow((PyDOMObject*)(self))->setOnerror((EventListener *) onerror);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onfocus(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onfocus();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onfocus(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onfocus;
    EventListener *onfocus = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onfocus", &py_onfocus))
        return -1;
    if (py_onfocus)
        onfocus = coreEventListener(py_onfocus);
    coreDOMWindow((PyDOMObject*)(self))->setOnfocus((EventListener *) onfocus);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onhashchange(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

	_ret = coreDOMWindow((PyDOMObject*)(self))->onhashchange();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onhashchange(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onhashchange;
    EventListener *onhashchange = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onhashchange", &py_onhashchange))
        return -1;
    if (py_onhashchange)
        onhashchange = coreEventListener(py_onhashchange);
    coreDOMWindow((PyDOMObject*)(self))->setOnhashchange((EventListener *) onhashchange);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_oninput(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->oninput();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_oninput(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oninput;
    EventListener *oninput = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_oninput", &py_oninput))
        return -1;
    if (py_oninput)
        oninput = coreEventListener(py_oninput);
    coreDOMWindow((PyDOMObject*)(self))->setOninput((EventListener *) oninput);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_oninvalid(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->oninvalid();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_oninvalid(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_oninvalid;
    EventListener *oninvalid = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_oninvalid", &py_oninvalid))
        return -1;
    if (py_oninvalid)
        oninvalid = coreEventListener(py_oninvalid);
    coreDOMWindow((PyDOMObject*)(self))->setOninvalid((EventListener *) oninvalid);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onkeydown(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onkeydown();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onkeydown(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onkeydown;
    EventListener *onkeydown = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onkeydown", &py_onkeydown))
        return -1;
    if (py_onkeydown)
        onkeydown = coreEventListener(py_onkeydown);
    coreDOMWindow((PyDOMObject*)(self))->setOnkeydown((EventListener *) onkeydown);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onkeypress(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onkeypress();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onkeypress(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onkeypress;
    EventListener *onkeypress = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onkeypress", &py_onkeypress))
        return -1;
    if (py_onkeypress)
        onkeypress = coreEventListener(py_onkeypress);
    coreDOMWindow((PyDOMObject*)(self))->setOnkeypress((EventListener *) onkeypress);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onkeyup(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onkeyup();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onkeyup(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onkeyup;
    EventListener *onkeyup = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onkeyup", &py_onkeyup))
        return -1;
    if (py_onkeyup)
        onkeyup = coreEventListener(py_onkeyup);
    coreDOMWindow((PyDOMObject*)(self))->setOnkeyup((EventListener *) onkeyup);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onload();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onload(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onload;
    EventListener *onload = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onload", &py_onload))
        return -1;
    if (py_onload)
        onload = coreEventListener(py_onload);
    coreDOMWindow((PyDOMObject*)(self))->setOnload((EventListener *) onload);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onloadeddata(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onloadeddata();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onloadeddata(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onloadeddata;
    EventListener *onloadeddata = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onloadeddata", &py_onloadeddata))
        return -1;
    if (py_onloadeddata)
        onloadeddata = coreEventListener(py_onloadeddata);
    coreDOMWindow((PyDOMObject*)(self))->setOnloadeddata((EventListener *) onloadeddata);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onloadedmetadata(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onloadedmetadata();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onloadedmetadata(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onloadedmetadata;
    EventListener *onloadedmetadata = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onloadedmetadata", &py_onloadedmetadata))
        return -1;
    if (py_onloadedmetadata)
        onloadedmetadata = coreEventListener(py_onloadedmetadata);
    coreDOMWindow((PyDOMObject*)(self))->setOnloadedmetadata((EventListener *) onloadedmetadata);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onloadstart(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onloadstart();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onloadstart(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onloadstart;
    EventListener *onloadstart = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onloadstart", &py_onloadstart))
        return -1;
    if (py_onloadstart)
        onloadstart = coreEventListener(py_onloadstart);
    coreDOMWindow((PyDOMObject*)(self))->setOnloadstart((EventListener *) onloadstart);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onmessage(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onmessage();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onmessage(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmessage;
    EventListener *onmessage = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onmessage", &py_onmessage))
        return -1;
    if (py_onmessage)
        onmessage = coreEventListener(py_onmessage);
    coreDOMWindow((PyDOMObject*)(self))->setOnmessage((EventListener *) onmessage);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onmousedown(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onmousedown();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onmousedown(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmousedown;
    EventListener *onmousedown = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onmousedown", &py_onmousedown))
        return -1;
    if (py_onmousedown)
        onmousedown = coreEventListener(py_onmousedown);
    coreDOMWindow((PyDOMObject*)(self))->setOnmousedown((EventListener *) onmousedown);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onmousemove(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onmousemove();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onmousemove(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmousemove;
    EventListener *onmousemove = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onmousemove", &py_onmousemove))
        return -1;
    if (py_onmousemove)
        onmousemove = coreEventListener(py_onmousemove);
    coreDOMWindow((PyDOMObject*)(self))->setOnmousemove((EventListener *) onmousemove);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onmouseout(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onmouseout();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onmouseout(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmouseout;
    EventListener *onmouseout = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onmouseout", &py_onmouseout))
        return -1;
    if (py_onmouseout)
        onmouseout = coreEventListener(py_onmouseout);
    coreDOMWindow((PyDOMObject*)(self))->setOnmouseout((EventListener *) onmouseout);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onmouseover(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onmouseover();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onmouseover(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmouseover;
    EventListener *onmouseover = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onmouseover", &py_onmouseover))
        return -1;
    if (py_onmouseover)
        onmouseover = coreEventListener(py_onmouseover);
    coreDOMWindow((PyDOMObject*)(self))->setOnmouseover((EventListener *) onmouseover);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onmouseup(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onmouseup();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onmouseup(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmouseup;
    EventListener *onmouseup = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onmouseup", &py_onmouseup))
        return -1;
    if (py_onmouseup)
        onmouseup = coreEventListener(py_onmouseup);
    coreDOMWindow((PyDOMObject*)(self))->setOnmouseup((EventListener *) onmouseup);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onmousewheel(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onmousewheel();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onmousewheel(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmousewheel;
    EventListener *onmousewheel = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onmousewheel", &py_onmousewheel))
        return -1;
    if (py_onmousewheel)
        onmousewheel = coreEventListener(py_onmousewheel);
    coreDOMWindow((PyDOMObject*)(self))->setOnmousewheel((EventListener *) onmousewheel);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onoffline(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onoffline();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onoffline(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onoffline;
    EventListener *onoffline = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onoffline", &py_onoffline))
        return -1;
    if (py_onoffline)
        onoffline = coreEventListener(py_onoffline);
    coreDOMWindow((PyDOMObject*)(self))->setOnoffline((EventListener *) onoffline);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_ononline(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->ononline();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_ononline(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ononline;
    EventListener *ononline = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_ononline", &py_ononline))
        return -1;
    if (py_ononline)
        ononline = coreEventListener(py_ononline);
    coreDOMWindow((PyDOMObject*)(self))->setOnonline((EventListener *) ononline);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onpagehide(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onpagehide();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onpagehide(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onpagehide;
    EventListener *onpagehide = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onpagehide", &py_onpagehide))
        return -1;
    if (py_onpagehide)
        onpagehide = coreEventListener(py_onpagehide);
    coreDOMWindow((PyDOMObject*)(self))->setOnpagehide((EventListener *) onpagehide);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onpageshow(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onpageshow();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onpageshow(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onpageshow;
    EventListener *onpageshow = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onpageshow", &py_onpageshow))
        return -1;
    if (py_onpageshow)
        onpageshow = coreEventListener(py_onpageshow);
    coreDOMWindow((PyDOMObject*)(self))->setOnpageshow((EventListener *) onpageshow);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onpause(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onpause();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onpause(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onpause;
    EventListener *onpause = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onpause", &py_onpause))
        return -1;
    if (py_onpause)
        onpause = coreEventListener(py_onpause);
    coreDOMWindow((PyDOMObject*)(self))->setOnpause((EventListener *) onpause);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onplay(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onplay();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onplay(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onplay;
    EventListener *onplay = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onplay", &py_onplay))
        return -1;
    if (py_onplay)
        onplay = coreEventListener(py_onplay);
    coreDOMWindow((PyDOMObject*)(self))->setOnplay((EventListener *) onplay);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onplaying(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onplaying();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onplaying(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onplaying;
    EventListener *onplaying = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onplaying", &py_onplaying))
        return -1;
    if (py_onplaying)
        onplaying = coreEventListener(py_onplaying);
    coreDOMWindow((PyDOMObject*)(self))->setOnplaying((EventListener *) onplaying);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onpopstate(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onpopstate();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onpopstate(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onpopstate;
    EventListener *onpopstate = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onpopstate", &py_onpopstate))
        return -1;
    if (py_onpopstate)
        onpopstate = coreEventListener(py_onpopstate);
    coreDOMWindow((PyDOMObject*)(self))->setOnpopstate((EventListener *) onpopstate);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onprogress(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onprogress();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onprogress(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onprogress;
    EventListener *onprogress = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onprogress", &py_onprogress))
        return -1;
    if (py_onprogress)
        onprogress = coreEventListener(py_onprogress);
    coreDOMWindow((PyDOMObject*)(self))->setOnprogress((EventListener *) onprogress);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onratechange(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onratechange();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onratechange(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onratechange;
    EventListener *onratechange = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onratechange", &py_onratechange))
        return -1;
    if (py_onratechange)
        onratechange = coreEventListener(py_onratechange);
    coreDOMWindow((PyDOMObject*)(self))->setOnratechange((EventListener *) onratechange);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onresize(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onresize();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onresize(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onresize;
    EventListener *onresize = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onresize", &py_onresize))
        return -1;
    if (py_onresize)
        onresize = coreEventListener(py_onresize);
    coreDOMWindow((PyDOMObject*)(self))->setOnresize((EventListener *) onresize);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onscroll(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onscroll();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onscroll(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onscroll;
    EventListener *onscroll = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onscroll", &py_onscroll))
        return -1;
    if (py_onscroll)
        onscroll = coreEventListener(py_onscroll);
    coreDOMWindow((PyDOMObject*)(self))->setOnscroll((EventListener *) onscroll);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onseeked(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onseeked();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onseeked(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onseeked;
    EventListener *onseeked = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onseeked", &py_onseeked))
        return -1;
    if (py_onseeked)
        onseeked = coreEventListener(py_onseeked);
    coreDOMWindow((PyDOMObject*)(self))->setOnseeked((EventListener *) onseeked);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onseeking(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onseeking();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onseeking(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onseeking;
    EventListener *onseeking = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onseeking", &py_onseeking))
        return -1;
    if (py_onseeking)
        onseeking = coreEventListener(py_onseeking);
    coreDOMWindow((PyDOMObject*)(self))->setOnseeking((EventListener *) onseeking);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onselect(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onselect();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onselect(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onselect;
    EventListener *onselect = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onselect", &py_onselect))
        return -1;
    if (py_onselect)
        onselect = coreEventListener(py_onselect);
    coreDOMWindow((PyDOMObject*)(self))->setOnselect((EventListener *) onselect);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onstalled(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onstalled();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onstalled(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onstalled;
    EventListener *onstalled = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onstalled", &py_onstalled))
        return -1;
    if (py_onstalled)
        onstalled = coreEventListener(py_onstalled);
    coreDOMWindow((PyDOMObject*)(self))->setOnstalled((EventListener *) onstalled);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onstorage(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onstorage();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onstorage(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onstorage;
    EventListener *onstorage = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onstorage", &py_onstorage))
        return -1;
    if (py_onstorage)
        onstorage = coreEventListener(py_onstorage);
    coreDOMWindow((PyDOMObject*)(self))->setOnstorage((EventListener *) onstorage);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onsubmit(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onsubmit();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onsubmit(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onsubmit;
    EventListener *onsubmit = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onsubmit", &py_onsubmit))
        return -1;
    if (py_onsubmit)
        onsubmit = coreEventListener(py_onsubmit);
    coreDOMWindow((PyDOMObject*)(self))->setOnsubmit((EventListener *) onsubmit);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onsuspend(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onsuspend();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onsuspend(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onsuspend;
    EventListener *onsuspend = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onsuspend", &py_onsuspend))
        return -1;
    if (py_onsuspend)
        onsuspend = coreEventListener(py_onsuspend);
    coreDOMWindow((PyDOMObject*)(self))->setOnsuspend((EventListener *) onsuspend);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_ontimeupdate(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->ontimeupdate();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_ontimeupdate(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_ontimeupdate;
    EventListener *ontimeupdate = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_ontimeupdate", &py_ontimeupdate))
        return -1;
    if (py_ontimeupdate)
        ontimeupdate = coreEventListener(py_ontimeupdate);
    coreDOMWindow((PyDOMObject*)(self))->setOntimeupdate((EventListener *) ontimeupdate);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onunload(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onunload();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onunload(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onunload;
    EventListener *onunload = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onunload", &py_onunload))
        return -1;
    if (py_onunload)
        onunload = coreEventListener(py_onunload);
    coreDOMWindow((PyDOMObject*)(self))->setOnunload((EventListener *) onunload);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onvolumechange(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onvolumechange();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onvolumechange(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onvolumechange;
    EventListener *onvolumechange = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onvolumechange", &py_onvolumechange))
        return -1;
    if (py_onvolumechange)
        onvolumechange = coreEventListener(py_onvolumechange);
    coreDOMWindow((PyDOMObject*)(self))->setOnvolumechange((EventListener *) onvolumechange);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onwaiting(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onwaiting();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onwaiting(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onwaiting;
    EventListener *onwaiting = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onwaiting", &py_onwaiting))
        return -1;
    if (py_onwaiting)
        onwaiting = coreEventListener(py_onwaiting);
    coreDOMWindow((PyDOMObject*)(self))->setOnwaiting((EventListener *) onwaiting);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onreset(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onreset();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onreset(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onreset;
    EventListener *onreset = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onreset", &py_onreset))
        return -1;
    if (py_onreset)
        onreset = coreEventListener(py_onreset);
    coreDOMWindow((PyDOMObject*)(self))->setOnreset((EventListener *) onreset);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onsearch(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onsearch();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onsearch(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onsearch;
    EventListener *onsearch = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onsearch", &py_onsearch))
        return -1;
    if (py_onsearch)
        onsearch = coreEventListener(py_onsearch);
    coreDOMWindow((PyDOMObject*)(self))->setOnsearch((EventListener *) onsearch);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onwebkitanimationend(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onwebkitanimationend();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onwebkitanimationend(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onwebkitanimationend;
    EventListener *onwebkitanimationend = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onwebkitanimationend", &py_onwebkitanimationend))
        return -1;
    if (py_onwebkitanimationend)
        onwebkitanimationend = coreEventListener(py_onwebkitanimationend);
    coreDOMWindow((PyDOMObject*)(self))->setOnwebkitanimationend((EventListener *) onwebkitanimationend);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onwebkitanimationiteration(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onwebkitanimationiteration();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onwebkitanimationiteration(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onwebkitanimationiteration;
    EventListener *onwebkitanimationiteration = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onwebkitanimationiteration", &py_onwebkitanimationiteration))
        return -1;
    if (py_onwebkitanimationiteration)
        onwebkitanimationiteration = coreEventListener(py_onwebkitanimationiteration);
    coreDOMWindow((PyDOMObject*)(self))->setOnwebkitanimationiteration((EventListener *) onwebkitanimationiteration);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onwebkitanimationstart(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onwebkitanimationstart();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onwebkitanimationstart(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onwebkitanimationstart;
    EventListener *onwebkitanimationstart = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onwebkitanimationstart", &py_onwebkitanimationstart))
        return -1;
    if (py_onwebkitanimationstart)
        onwebkitanimationstart = coreEventListener(py_onwebkitanimationstart);
    coreDOMWindow((PyDOMObject*)(self))->setOnwebkitanimationstart((EventListener *) onwebkitanimationstart);

    return 0;
}

static PyObject *
_wrap_coredomwindow__get_onwebkittransitionend(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreDOMWindow((PyDOMObject*)(self))->onwebkittransitionend();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coredomwindow__set_onwebkittransitionend(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onwebkittransitionend;
    EventListener *onwebkittransitionend = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coredomwindow__set_onwebkittransitionend", &py_onwebkittransitionend))
        return -1;
    if (py_onwebkittransitionend)
        onwebkittransitionend = coreEventListener(py_onwebkittransitionend);
    coreDOMWindow((PyDOMObject*)(self))->setOnwebkittransitionend((EventListener *) onwebkittransitionend);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coredomwindow_getsets[] = {
    { (char*)"screen", (getter)WebKit::_wrap_coredomwindow__get_screen, (setter)0, 0, 0 },
    { (char*)"history", (getter)WebKit::_wrap_coredomwindow__get_history, (setter)0, 0, 0 },
    { (char*)"locationbar", (getter)WebKit::_wrap_coredomwindow__get_locationbar, (setter)0, 0, 0 },
    { (char*)"menubar", (getter)WebKit::_wrap_coredomwindow__get_menubar, (setter)0, 0, 0 },
    { (char*)"personalbar", (getter)WebKit::_wrap_coredomwindow__get_personalbar, (setter)0, 0, 0 },
    { (char*)"scrollbars", (getter)WebKit::_wrap_coredomwindow__get_scrollbars, (setter)0, 0, 0 },
    { (char*)"statusbar", (getter)WebKit::_wrap_coredomwindow__get_statusbar, (setter)0, 0, 0 },
    { (char*)"toolbar", (getter)WebKit::_wrap_coredomwindow__get_toolbar, (setter)0, 0, 0 },
    { (char*)"navigator", (getter)WebKit::_wrap_coredomwindow__get_navigator, (setter)0, 0, 0 },
    { (char*)"clientInformation", (getter)WebKit::_wrap_coredomwindow__get_clientInformation, (setter)0, 0, 0 },
    { (char*)"location", (getter)WebKit::_wrap_coredomwindow__get_location, (setter)0, 0, 0 },
    { (char*)"frameElement", (getter)WebKit::_wrap_coredomwindow__get_frameElement, (setter)0, 0, 0 },
    { (char*)"offscreenBuffering", (getter)WebKit::_wrap_coredomwindow__get_offscreenBuffering, (setter)0, 0, 0 },
    { (char*)"outerHeight", (getter)WebKit::_wrap_coredomwindow__get_outerHeight, (setter)0, 0, 0 },
    { (char*)"outerWidth", (getter)WebKit::_wrap_coredomwindow__get_outerWidth, (setter)0, 0, 0 },
    { (char*)"innerHeight", (getter)WebKit::_wrap_coredomwindow__get_innerHeight, (setter)0, 0, 0 },
    { (char*)"innerWidth", (getter)WebKit::_wrap_coredomwindow__get_innerWidth, (setter)0, 0, 0 },
    { (char*)"screenX", (getter)WebKit::_wrap_coredomwindow__get_screenX, (setter)0, 0, 0 },
    { (char*)"screenY", (getter)WebKit::_wrap_coredomwindow__get_screenY, (setter)0, 0, 0 },
    { (char*)"screenLeft", (getter)WebKit::_wrap_coredomwindow__get_screenLeft, (setter)0, 0, 0 },
    { (char*)"screenTop", (getter)WebKit::_wrap_coredomwindow__get_screenTop, (setter)0, 0, 0 },
    { (char*)"scrollX", (getter)WebKit::_wrap_coredomwindow__get_scrollX, (setter)0, 0, 0 },
    { (char*)"scrollY", (getter)WebKit::_wrap_coredomwindow__get_scrollY, (setter)0, 0, 0 },
    { (char*)"pageXOffset", (getter)WebKit::_wrap_coredomwindow__get_pageXOffset, (setter)0, 0, 0 },
    { (char*)"pageYOffset", (getter)WebKit::_wrap_coredomwindow__get_pageYOffset, (setter)0, 0, 0 },
    { (char*)"closed", (getter)WebKit::_wrap_coredomwindow__get_closed, (setter)0, 0, 0 },
    { (char*)"length", (getter)WebKit::_wrap_coredomwindow__get_length, (setter)0, 0, 0 },
    { (char*)"name", (getter)WebKit::_wrap_coredomwindow__get_name, (setter)WebKit::_wrap_coredomwindow__set_name, 0, 0 },
    { (char*)"status", (getter)WebKit::_wrap_coredomwindow__get_status, (setter)WebKit::_wrap_coredomwindow__set_status, 0, 0 },
    { (char*)"defaultStatus", (getter)WebKit::_wrap_coredomwindow__get_defaultStatus, (setter)WebKit::_wrap_coredomwindow__set_defaultStatus, 0, 0 },
    { (char*)"self", (getter)WebKit::_wrap_coredomwindow__get_self, (setter)0, 0, 0 },
    { (char*)"window", (getter)WebKit::_wrap_coredomwindow__get_window, (setter)0, 0, 0 },
    { (char*)"frames", (getter)WebKit::_wrap_coredomwindow__get_frames, (setter)0, 0, 0 },
    { (char*)"opener", (getter)WebKit::_wrap_coredomwindow__get_opener, (setter)0, 0, 0 },
    { (char*)"parent", (getter)WebKit::_wrap_coredomwindow__get_parent, (setter)0, 0, 0 },
    { (char*)"top", (getter)WebKit::_wrap_coredomwindow__get_top, (setter)0, 0, 0 },
    { (char*)"document", (getter)WebKit::_wrap_coredomwindow__get_document, (setter)0, 0, 0 },
    { (char*)"styleMedia", (getter)WebKit::_wrap_coredomwindow__get_styleMedia, (setter)0, 0, 0 },
    { (char*)"devicePixelRatio", (getter)WebKit::_wrap_coredomwindow__get_devicePixelRatio, (setter)0, 0, 0 },
    { (char*)"onabort", (getter)WebKit::_wrap_coredomwindow__get_onabort, (setter)WebKit::_wrap_coredomwindow__set_onabort, 0, 0 },
    { (char*)"onbeforeunload", (getter)WebKit::_wrap_coredomwindow__get_onbeforeunload, (setter)WebKit::_wrap_coredomwindow__set_onbeforeunload, 0, 0 },
    { (char*)"onblur", (getter)WebKit::_wrap_coredomwindow__get_onblur, (setter)WebKit::_wrap_coredomwindow__set_onblur, 0, 0 },
    { (char*)"oncanplay", (getter)WebKit::_wrap_coredomwindow__get_oncanplay, (setter)WebKit::_wrap_coredomwindow__set_oncanplay, 0, 0 },
    { (char*)"oncanplaythrough", (getter)WebKit::_wrap_coredomwindow__get_oncanplaythrough, (setter)WebKit::_wrap_coredomwindow__set_oncanplaythrough, 0, 0 },
    { (char*)"onchange", (getter)WebKit::_wrap_coredomwindow__get_onchange, (setter)WebKit::_wrap_coredomwindow__set_onchange, 0, 0 },
    { (char*)"onclick", (getter)WebKit::_wrap_coredomwindow__get_onclick, (setter)WebKit::_wrap_coredomwindow__set_onclick, 0, 0 },
    { (char*)"oncontextmenu", (getter)WebKit::_wrap_coredomwindow__get_oncontextmenu, (setter)WebKit::_wrap_coredomwindow__set_oncontextmenu, 0, 0 },
    { (char*)"ondblclick", (getter)WebKit::_wrap_coredomwindow__get_ondblclick, (setter)WebKit::_wrap_coredomwindow__set_ondblclick, 0, 0 },
    { (char*)"ondrag", (getter)WebKit::_wrap_coredomwindow__get_ondrag, (setter)WebKit::_wrap_coredomwindow__set_ondrag, 0, 0 },
    { (char*)"ondragend", (getter)WebKit::_wrap_coredomwindow__get_ondragend, (setter)WebKit::_wrap_coredomwindow__set_ondragend, 0, 0 },
    { (char*)"ondragenter", (getter)WebKit::_wrap_coredomwindow__get_ondragenter, (setter)WebKit::_wrap_coredomwindow__set_ondragenter, 0, 0 },
    { (char*)"ondragleave", (getter)WebKit::_wrap_coredomwindow__get_ondragleave, (setter)WebKit::_wrap_coredomwindow__set_ondragleave, 0, 0 },
    { (char*)"ondragover", (getter)WebKit::_wrap_coredomwindow__get_ondragover, (setter)WebKit::_wrap_coredomwindow__set_ondragover, 0, 0 },
    { (char*)"ondragstart", (getter)WebKit::_wrap_coredomwindow__get_ondragstart, (setter)WebKit::_wrap_coredomwindow__set_ondragstart, 0, 0 },
    { (char*)"ondrop", (getter)WebKit::_wrap_coredomwindow__get_ondrop, (setter)WebKit::_wrap_coredomwindow__set_ondrop, 0, 0 },
    { (char*)"ondurationchange", (getter)WebKit::_wrap_coredomwindow__get_ondurationchange, (setter)WebKit::_wrap_coredomwindow__set_ondurationchange, 0, 0 },
    { (char*)"onemptied", (getter)WebKit::_wrap_coredomwindow__get_onemptied, (setter)WebKit::_wrap_coredomwindow__set_onemptied, 0, 0 },
    { (char*)"onended", (getter)WebKit::_wrap_coredomwindow__get_onended, (setter)WebKit::_wrap_coredomwindow__set_onended, 0, 0 },
    { (char*)"onerror", (getter)WebKit::_wrap_coredomwindow__get_onerror, (setter)WebKit::_wrap_coredomwindow__set_onerror, 0, 0 },
    { (char*)"onfocus", (getter)WebKit::_wrap_coredomwindow__get_onfocus, (setter)WebKit::_wrap_coredomwindow__set_onfocus, 0, 0 },
    { (char*)"onhashchange", (getter)WebKit::_wrap_coredomwindow__get_onhashchange, (setter)WebKit::_wrap_coredomwindow__set_onhashchange, 0, 0 },
    { (char*)"oninput", (getter)WebKit::_wrap_coredomwindow__get_oninput, (setter)WebKit::_wrap_coredomwindow__set_oninput, 0, 0 },
    { (char*)"oninvalid", (getter)WebKit::_wrap_coredomwindow__get_oninvalid, (setter)WebKit::_wrap_coredomwindow__set_oninvalid, 0, 0 },
    { (char*)"onkeydown", (getter)WebKit::_wrap_coredomwindow__get_onkeydown, (setter)WebKit::_wrap_coredomwindow__set_onkeydown, 0, 0 },
    { (char*)"onkeypress", (getter)WebKit::_wrap_coredomwindow__get_onkeypress, (setter)WebKit::_wrap_coredomwindow__set_onkeypress, 0, 0 },
    { (char*)"onkeyup", (getter)WebKit::_wrap_coredomwindow__get_onkeyup, (setter)WebKit::_wrap_coredomwindow__set_onkeyup, 0, 0 },
    { (char*)"onload", (getter)WebKit::_wrap_coredomwindow__get_onload, (setter)WebKit::_wrap_coredomwindow__set_onload, 0, 0 },
    { (char*)"onloadeddata", (getter)WebKit::_wrap_coredomwindow__get_onloadeddata, (setter)WebKit::_wrap_coredomwindow__set_onloadeddata, 0, 0 },
    { (char*)"onloadedmetadata", (getter)WebKit::_wrap_coredomwindow__get_onloadedmetadata, (setter)WebKit::_wrap_coredomwindow__set_onloadedmetadata, 0, 0 },
    { (char*)"onloadstart", (getter)WebKit::_wrap_coredomwindow__get_onloadstart, (setter)WebKit::_wrap_coredomwindow__set_onloadstart, 0, 0 },
    { (char*)"onmessage", (getter)WebKit::_wrap_coredomwindow__get_onmessage, (setter)WebKit::_wrap_coredomwindow__set_onmessage, 0, 0 },
    { (char*)"onmousedown", (getter)WebKit::_wrap_coredomwindow__get_onmousedown, (setter)WebKit::_wrap_coredomwindow__set_onmousedown, 0, 0 },
    { (char*)"onmousemove", (getter)WebKit::_wrap_coredomwindow__get_onmousemove, (setter)WebKit::_wrap_coredomwindow__set_onmousemove, 0, 0 },
    { (char*)"onmouseout", (getter)WebKit::_wrap_coredomwindow__get_onmouseout, (setter)WebKit::_wrap_coredomwindow__set_onmouseout, 0, 0 },
    { (char*)"onmouseover", (getter)WebKit::_wrap_coredomwindow__get_onmouseover, (setter)WebKit::_wrap_coredomwindow__set_onmouseover, 0, 0 },
    { (char*)"onmouseup", (getter)WebKit::_wrap_coredomwindow__get_onmouseup, (setter)WebKit::_wrap_coredomwindow__set_onmouseup, 0, 0 },
    { (char*)"onmousewheel", (getter)WebKit::_wrap_coredomwindow__get_onmousewheel, (setter)WebKit::_wrap_coredomwindow__set_onmousewheel, 0, 0 },
    { (char*)"onoffline", (getter)WebKit::_wrap_coredomwindow__get_onoffline, (setter)WebKit::_wrap_coredomwindow__set_onoffline, 0, 0 },
    { (char*)"ononline", (getter)WebKit::_wrap_coredomwindow__get_ononline, (setter)WebKit::_wrap_coredomwindow__set_ononline, 0, 0 },
    { (char*)"onpagehide", (getter)WebKit::_wrap_coredomwindow__get_onpagehide, (setter)WebKit::_wrap_coredomwindow__set_onpagehide, 0, 0 },
    { (char*)"onpageshow", (getter)WebKit::_wrap_coredomwindow__get_onpageshow, (setter)WebKit::_wrap_coredomwindow__set_onpageshow, 0, 0 },
    { (char*)"onpause", (getter)WebKit::_wrap_coredomwindow__get_onpause, (setter)WebKit::_wrap_coredomwindow__set_onpause, 0, 0 },
    { (char*)"onplay", (getter)WebKit::_wrap_coredomwindow__get_onplay, (setter)WebKit::_wrap_coredomwindow__set_onplay, 0, 0 },
    { (char*)"onplaying", (getter)WebKit::_wrap_coredomwindow__get_onplaying, (setter)WebKit::_wrap_coredomwindow__set_onplaying, 0, 0 },
    { (char*)"onpopstate", (getter)WebKit::_wrap_coredomwindow__get_onpopstate, (setter)WebKit::_wrap_coredomwindow__set_onpopstate, 0, 0 },
    { (char*)"onprogress", (getter)WebKit::_wrap_coredomwindow__get_onprogress, (setter)WebKit::_wrap_coredomwindow__set_onprogress, 0, 0 },
    { (char*)"onratechange", (getter)WebKit::_wrap_coredomwindow__get_onratechange, (setter)WebKit::_wrap_coredomwindow__set_onratechange, 0, 0 },
    { (char*)"onresize", (getter)WebKit::_wrap_coredomwindow__get_onresize, (setter)WebKit::_wrap_coredomwindow__set_onresize, 0, 0 },
    { (char*)"onscroll", (getter)WebKit::_wrap_coredomwindow__get_onscroll, (setter)WebKit::_wrap_coredomwindow__set_onscroll, 0, 0 },
    { (char*)"onseeked", (getter)WebKit::_wrap_coredomwindow__get_onseeked, (setter)WebKit::_wrap_coredomwindow__set_onseeked, 0, 0 },
    { (char*)"onseeking", (getter)WebKit::_wrap_coredomwindow__get_onseeking, (setter)WebKit::_wrap_coredomwindow__set_onseeking, 0, 0 },
    { (char*)"onselect", (getter)WebKit::_wrap_coredomwindow__get_onselect, (setter)WebKit::_wrap_coredomwindow__set_onselect, 0, 0 },
    { (char*)"onstalled", (getter)WebKit::_wrap_coredomwindow__get_onstalled, (setter)WebKit::_wrap_coredomwindow__set_onstalled, 0, 0 },
    { (char*)"onstorage", (getter)WebKit::_wrap_coredomwindow__get_onstorage, (setter)WebKit::_wrap_coredomwindow__set_onstorage, 0, 0 },
    { (char*)"onsubmit", (getter)WebKit::_wrap_coredomwindow__get_onsubmit, (setter)WebKit::_wrap_coredomwindow__set_onsubmit, 0, 0 },
    { (char*)"onsuspend", (getter)WebKit::_wrap_coredomwindow__get_onsuspend, (setter)WebKit::_wrap_coredomwindow__set_onsuspend, 0, 0 },
    { (char*)"ontimeupdate", (getter)WebKit::_wrap_coredomwindow__get_ontimeupdate, (setter)WebKit::_wrap_coredomwindow__set_ontimeupdate, 0, 0 },
    { (char*)"onunload", (getter)WebKit::_wrap_coredomwindow__get_onunload, (setter)WebKit::_wrap_coredomwindow__set_onunload, 0, 0 },
    { (char*)"onvolumechange", (getter)WebKit::_wrap_coredomwindow__get_onvolumechange, (setter)WebKit::_wrap_coredomwindow__set_onvolumechange, 0, 0 },
    { (char*)"onwaiting", (getter)WebKit::_wrap_coredomwindow__get_onwaiting, (setter)WebKit::_wrap_coredomwindow__set_onwaiting, 0, 0 },
    { (char*)"onreset", (getter)WebKit::_wrap_coredomwindow__get_onreset, (setter)WebKit::_wrap_coredomwindow__set_onreset, 0, 0 },
    { (char*)"onsearch", (getter)WebKit::_wrap_coredomwindow__get_onsearch, (setter)WebKit::_wrap_coredomwindow__set_onsearch, 0, 0 },
    { (char*)"onwebkitanimationend", (getter)WebKit::_wrap_coredomwindow__get_onwebkitanimationend, (setter)WebKit::_wrap_coredomwindow__set_onwebkitanimationend, 0, 0 },
    { (char*)"onwebkitanimationiteration", (getter)WebKit::_wrap_coredomwindow__get_onwebkitanimationiteration, (setter)WebKit::_wrap_coredomwindow__set_onwebkitanimationiteration, 0, 0 },
    { (char*)"onwebkitanimationstart", (getter)WebKit::_wrap_coredomwindow__get_onwebkitanimationstart, (setter)WebKit::_wrap_coredomwindow__set_onwebkitanimationstart, 0, 0 },
    { (char*)"onwebkittransitionend", (getter)WebKit::_wrap_coredomwindow__get_onwebkittransitionend, (setter)WebKit::_wrap_coredomwindow__set_onwebkittransitionend, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_DOMWindow(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::DOMWindow* cobj = coreDOMWindow(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMDOMWindow_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.DOMWindow",                   /* tp_name */
    sizeof(PyDOMDOMWindow),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_DOMWindow,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMDOMWindow_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coredomwindow_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::DOMWindow_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- EventSource ----------- */

namespace WebKit {
using namespace WebCore;

static int
EventSource_init(EventSource *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_EventSource_close(PyDOMObject *self)
{
    
    coreEventSource(self)->close();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_EventSource_addEventListener(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"listener", (char*)"useCapture", NULL };
    char *type;
    PyDOMObject *py_listener;
    int useCapture;
    EventListener *listener = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sOi:pywebkit.EventSource.addEventListener", kwlist, &type, &py_listener, &useCapture))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    if (py_listener)
        listener = coreEventListener(py_listener);
    bool cvt_useCapture = (bool)useCapture;
    
    coreEventSource(self)->addEventListener(cvt_type, (EventListener *) listener, cvt_useCapture);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_EventSource_removeEventListener(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"type", (char*)"listener", (char*)"useCapture", NULL };
    char *type;
    PyDOMObject *py_listener;
    int useCapture;
    EventListener *listener = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sOi:pywebkit.EventSource.removeEventListener", kwlist, &type, &py_listener, &useCapture))
        return NULL;
    WTF::String cvt_type = WTF::String::fromUTF8((const char*)type);
    if (py_listener)
        listener = coreEventListener(py_listener);
    bool cvt_useCapture = (bool)useCapture;
    
    coreEventSource(self)->removeEventListener(cvt_type, (EventListener *) listener, cvt_useCapture);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_EventSource_dispatchEvent(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"evt", NULL };
    PyDOMObject *evt;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.EventSource.dispatchEvent", kwlist, PtrPyDOMEvent_Type, &evt))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreEventSource(self)->dispatchEvent(coreEvent(evt), ec);
    
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMEventSource_methods[] = {
    { "close", (PyCFunction)WebKit::_wrap_EventSource_close, METH_NOARGS,
      NULL },
    { "addEventListener", (PyCFunction)WebKit::_wrap_EventSource_addEventListener, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeEventListener", (PyCFunction)WebKit::_wrap_EventSource_removeEventListener, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "dispatchEvent", (PyCFunction)WebKit::_wrap_EventSource_dispatchEvent, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coreeventsource__get_URL(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreEventSource((PyDOMObject*)(self))->url();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreeventsource__get_readyState(PyObject *self, void *closure)
{
    int ret;

    ret = coreEventSource((PyDOMObject*)(self))->readyState();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_coreeventsource__get_onopen(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreEventSource((PyDOMObject*)(self))->onopen();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreeventsource__set_onopen(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onopen;
    EventListener *onopen = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreeventsource__set_onopen", &py_onopen))
        return -1;
    if (py_onopen)
        onopen = coreEventListener(py_onopen);
    coreEventSource((PyDOMObject*)(self))->setOnopen((EventListener *) onopen);

    return 0;
}

static PyObject *
_wrap_coreeventsource__get_onmessage(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreEventSource((PyDOMObject*)(self))->onmessage();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreeventsource__set_onmessage(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onmessage;
    EventListener *onmessage = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreeventsource__set_onmessage", &py_onmessage))
        return -1;
    if (py_onmessage)
        onmessage = coreEventListener(py_onmessage);
    coreEventSource((PyDOMObject*)(self))->setOnmessage((EventListener *) onmessage);

    return 0;
}

static PyObject *
_wrap_coreeventsource__get_onerror(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::EventListener* _ret;

    _ret = coreEventSource((PyDOMObject*)(self))->onerror();
    py_ret = toPython(_ret);
    return py_ret;
}

static int
_wrap_coreeventsource__set_onerror(PyObject *self, PyObject *args, void *closure)
{
    PyDOMObject *py_onerror;
    EventListener *onerror = NULL;

    if (!PyArg_Parse(args,"O:_wrap_coreeventsource__set_onerror", &py_onerror))
        return -1;
    if (py_onerror)
        onerror = coreEventListener(py_onerror);
    coreEventSource((PyDOMObject*)(self))->setOnerror((EventListener *) onerror);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreeventsource_getsets[] = {
    { (char*)"URL", (getter)WebKit::_wrap_coreeventsource__get_URL, (setter)0, 0, 0 },
    { (char*)"readyState", (getter)WebKit::_wrap_coreeventsource__get_readyState, (setter)0, 0, 0 },
    { (char*)"onopen", (getter)WebKit::_wrap_coreeventsource__get_onopen, (setter)WebKit::_wrap_coreeventsource__set_onopen, 0, 0 },
    { (char*)"onmessage", (getter)WebKit::_wrap_coreeventsource__get_onmessage, (setter)WebKit::_wrap_coreeventsource__set_onmessage, 0, 0 },
    { (char*)"onerror", (getter)WebKit::_wrap_coreeventsource__get_onerror, (setter)WebKit::_wrap_coreeventsource__set_onerror, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_EventSource(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::EventSource* cobj = coreEventSource(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMEventSource_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.EventSource",                   /* tp_name */
    sizeof(PyDOMEventSource),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_EventSource,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMEventSource_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreeventsource_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::EventSource_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Geolocation ----------- */

namespace WebKit {
using namespace WebCore;

static int
Geolocation_init(Geolocation *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_Geolocation_clearWatch(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"watchId", NULL };
    long watchId;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.Geolocation.clearWatch", kwlist, &watchId))
        return NULL;
    
    coreGeolocation(self)->clearWatch(watchId);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMGeolocation_methods[] = {
    { "clearWatch", (PyCFunction)WebKit::_wrap_Geolocation_clearWatch, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
void dealloc_Geolocation(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Geolocation* cobj = coreGeolocation(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMGeolocation_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Geolocation",                   /* tp_name */
    sizeof(PyDOMGeolocation),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Geolocation,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMGeolocation_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Geolocation_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Geoposition ----------- */

namespace WebKit {
using namespace WebCore;

static int
Geoposition_init(Geoposition *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coregeoposition__get_coords(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Coordinates* _ret;

    _ret = coreGeoposition((PyDOMObject*)(self))->coords();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coregeoposition_getsets[] = {
    { (char*)"coords", (getter)WebKit::_wrap_coregeoposition__get_coords, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Geoposition(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Geoposition* cobj = coreGeoposition(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMGeoposition_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Geoposition",                   /* tp_name */
    sizeof(PyDOMGeoposition),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Geoposition,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coregeoposition_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Geoposition_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- History ----------- */

namespace WebKit {
using namespace WebCore;

static int
History_init(History *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_History_back(PyDOMObject *self)
{
    
    coreHistory(self)->back();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_History_forward(PyDOMObject *self)
{
    
    coreHistory(self)->forward();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_History_go(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"distance", NULL };
    long distance;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"l:pywebkit.History.go", kwlist, &distance))
        return NULL;
    
    coreHistory(self)->go(distance);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMHistory_methods[] = {
    { "back", (PyCFunction)WebKit::_wrap_History_back, METH_NOARGS,
      NULL },
    { "forward", (PyCFunction)WebKit::_wrap_History_forward, METH_NOARGS,
      NULL },
    { "go", (PyCFunction)WebKit::_wrap_History_go, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corehistory__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreHistory((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corehistory_getsets[] = {
    { (char*)"length", (getter)WebKit::_wrap_corehistory__get_length, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_History(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::History* cobj = coreHistory(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMHistory_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.History",                   /* tp_name */
    sizeof(PyDOMHistory),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_History,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMHistory_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corehistory_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::History_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Location ----------- */

namespace WebKit {
using namespace WebCore;

static int
Location_init(Location *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_Location_getParameter(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"name", NULL };
    char *name, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.Location.getParameter", kwlist, &name))
        return NULL;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    
    ret = coreLocation(self)->getParameter(cvt_name);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMLocation_methods[] = {
    { "getParameter", (PyCFunction)WebKit::_wrap_Location_getParameter, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corelocation__get_href(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreLocation((PyDOMObject*)(self))->href();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corelocation__get_protocol(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreLocation((PyDOMObject*)(self))->protocol();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corelocation__get_host(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreLocation((PyDOMObject*)(self))->host();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corelocation__get_hostname(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreLocation((PyDOMObject*)(self))->hostname();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corelocation__get_port(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreLocation((PyDOMObject*)(self))->port();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corelocation__get_pathname(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreLocation((PyDOMObject*)(self))->pathname();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corelocation__get_search(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreLocation((PyDOMObject*)(self))->search();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corelocation__get_hash(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreLocation((PyDOMObject*)(self))->hash();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corelocation__get_origin(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreLocation((PyDOMObject*)(self))->origin();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corelocation_getsets[] = {
    { (char*)"href", (getter)WebKit::_wrap_corelocation__get_href, (setter)0, 0, 0 },
    { (char*)"protocol", (getter)WebKit::_wrap_corelocation__get_protocol, (setter)0, 0, 0 },
    { (char*)"host", (getter)WebKit::_wrap_corelocation__get_host, (setter)0, 0, 0 },
    { (char*)"hostname", (getter)WebKit::_wrap_corelocation__get_hostname, (setter)0, 0, 0 },
    { (char*)"port", (getter)WebKit::_wrap_corelocation__get_port, (setter)0, 0, 0 },
    { (char*)"pathname", (getter)WebKit::_wrap_corelocation__get_pathname, (setter)0, 0, 0 },
    { (char*)"search", (getter)WebKit::_wrap_corelocation__get_search, (setter)0, 0, 0 },
    { (char*)"hash", (getter)WebKit::_wrap_corelocation__get_hash, (setter)0, 0, 0 },
    { (char*)"origin", (getter)WebKit::_wrap_corelocation__get_origin, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Location(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Location* cobj = coreLocation(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMLocation_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Location",                   /* tp_name */
    sizeof(PyDOMLocation),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Location,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMLocation_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corelocation_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Location_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Navigator ----------- */

namespace WebKit {
using namespace WebCore;

static int
Navigator_init(Navigator *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_Navigator_javaEnabled(PyDOMObject *self)
{
    bool ret;

    
    ret = coreNavigator(self)->javaEnabled();
    
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMNavigator_methods[] = {
    { "javaEnabled", (PyCFunction)WebKit::_wrap_Navigator_javaEnabled, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corenavigator__get_appCodeName(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNavigator((PyDOMObject*)(self))->appCodeName();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenavigator__get_appName(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNavigator((PyDOMObject*)(self))->appName();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenavigator__get_appVersion(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNavigator((PyDOMObject*)(self))->appVersion();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenavigator__get_language(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNavigator((PyDOMObject*)(self))->language();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenavigator__get_userAgent(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNavigator((PyDOMObject*)(self))->userAgent();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenavigator__get_platform(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNavigator((PyDOMObject*)(self))->platform();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenavigator__get_product(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNavigator((PyDOMObject*)(self))->product();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenavigator__get_productSub(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNavigator((PyDOMObject*)(self))->productSub();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenavigator__get_vendor(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNavigator((PyDOMObject*)(self))->vendor();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenavigator__get_vendorSub(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreNavigator((PyDOMObject*)(self))->vendorSub();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corenavigator__get_cookieEnabled(PyObject *self, void *closure)
{
    bool ret;

    ret = coreNavigator((PyDOMObject*)(self))->cookieEnabled();
    return PyBool_FromLong((long)ret);

}

static PyObject *
_wrap_corenavigator__get_onLine(PyObject *self, void *closure)
{
    bool ret;

    ret = coreNavigator((PyDOMObject*)(self))->onLine();
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corenavigator_getsets[] = {
    { (char*)"appCodeName", (getter)WebKit::_wrap_corenavigator__get_appCodeName, (setter)0, 0, 0 },
    { (char*)"appName", (getter)WebKit::_wrap_corenavigator__get_appName, (setter)0, 0, 0 },
    { (char*)"appVersion", (getter)WebKit::_wrap_corenavigator__get_appVersion, (setter)0, 0, 0 },
    { (char*)"language", (getter)WebKit::_wrap_corenavigator__get_language, (setter)0, 0, 0 },
    { (char*)"userAgent", (getter)WebKit::_wrap_corenavigator__get_userAgent, (setter)0, 0, 0 },
    { (char*)"platform", (getter)WebKit::_wrap_corenavigator__get_platform, (setter)0, 0, 0 },
    { (char*)"product", (getter)WebKit::_wrap_corenavigator__get_product, (setter)0, 0, 0 },
    { (char*)"productSub", (getter)WebKit::_wrap_corenavigator__get_productSub, (setter)0, 0, 0 },
    { (char*)"vendor", (getter)WebKit::_wrap_corenavigator__get_vendor, (setter)0, 0, 0 },
    { (char*)"vendorSub", (getter)WebKit::_wrap_corenavigator__get_vendorSub, (setter)0, 0, 0 },
    { (char*)"cookieEnabled", (getter)WebKit::_wrap_corenavigator__get_cookieEnabled, (setter)0, 0, 0 },
    { (char*)"onLine", (getter)WebKit::_wrap_corenavigator__get_onLine, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Navigator(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Navigator* cobj = coreNavigator(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMNavigator_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Navigator",                   /* tp_name */
    sizeof(PyDOMNavigator),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Navigator,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMNavigator_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corenavigator_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Navigator_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- PositionError ----------- */

namespace WebKit {
using namespace WebCore;

static int
PositionError_init(PositionError *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corepositionerror__get_code(PyObject *self, void *closure)
{
    int ret;

    ret = corePositionError((PyDOMObject*)(self))->code();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_corepositionerror__get_message(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = corePositionError((PyDOMObject*)(self))->message();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corepositionerror_getsets[] = {
    { (char*)"code", (getter)WebKit::_wrap_corepositionerror__get_code, (setter)0, 0, 0 },
    { (char*)"message", (getter)WebKit::_wrap_corepositionerror__get_message, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_PositionError(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::PositionError* cobj = corePositionError(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMPositionError_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.PositionError",                   /* tp_name */
    sizeof(PyDOMPositionError),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_PositionError,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corepositionerror_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::PositionError_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Screen ----------- */

namespace WebKit {
using namespace WebCore;

static int
Screen_init(Screen *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corescreen__get_height(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreScreen((PyDOMObject*)(self))->height();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_corescreen__get_width(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreScreen((PyDOMObject*)(self))->width();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_corescreen__get_colorDepth(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreScreen((PyDOMObject*)(self))->colorDepth();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_corescreen__get_pixelDepth(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreScreen((PyDOMObject*)(self))->pixelDepth();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_corescreen__get_availLeft(PyObject *self, void *closure)
{
    long ret;

    ret = coreScreen((PyDOMObject*)(self))->availLeft();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corescreen__get_availTop(PyObject *self, void *closure)
{
    long ret;

    ret = coreScreen((PyDOMObject*)(self))->availTop();
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_corescreen__get_availHeight(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreScreen((PyDOMObject*)(self))->availHeight();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_corescreen__get_availWidth(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreScreen((PyDOMObject*)(self))->availWidth();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corescreen_getsets[] = {
    { (char*)"height", (getter)WebKit::_wrap_corescreen__get_height, (setter)0, 0, 0 },
    { (char*)"width", (getter)WebKit::_wrap_corescreen__get_width, (setter)0, 0, 0 },
    { (char*)"colorDepth", (getter)WebKit::_wrap_corescreen__get_colorDepth, (setter)0, 0, 0 },
    { (char*)"pixelDepth", (getter)WebKit::_wrap_corescreen__get_pixelDepth, (setter)0, 0, 0 },
    { (char*)"availLeft", (getter)WebKit::_wrap_corescreen__get_availLeft, (setter)0, 0, 0 },
    { (char*)"availTop", (getter)WebKit::_wrap_corescreen__get_availTop, (setter)0, 0, 0 },
    { (char*)"availHeight", (getter)WebKit::_wrap_corescreen__get_availHeight, (setter)0, 0, 0 },
    { (char*)"availWidth", (getter)WebKit::_wrap_corescreen__get_availWidth, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Screen(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Screen* cobj = coreScreen(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMScreen_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Screen",                   /* tp_name */
    sizeof(PyDOMScreen),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Screen,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corescreen_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Screen_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- WebKitPoint ----------- */

namespace WebKit {
using namespace WebCore;

static int
WebKitPoint_init(WebKitPoint *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corewebkitpoint__get_x(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitPoint((PyDOMObject*)(self))->x();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitpoint__set_x(PyObject *self, PyObject *args, void *closure)
{
    double x;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitpoint__set_x", &x))
        return -1;
    coreWebKitPoint((PyDOMObject*)(self))->setX(x);

    return 0;
}

static PyObject *
_wrap_corewebkitpoint__get_y(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitPoint((PyDOMObject*)(self))->y();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitpoint__set_y(PyObject *self, PyObject *args, void *closure)
{
    double y;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitpoint__set_y", &y))
        return -1;
    coreWebKitPoint((PyDOMObject*)(self))->setY(y);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corewebkitpoint_getsets[] = {
    { (char*)"x", (getter)WebKit::_wrap_corewebkitpoint__get_x, (setter)WebKit::_wrap_corewebkitpoint__set_x, 0, 0 },
    { (char*)"y", (getter)WebKit::_wrap_corewebkitpoint__get_y, (setter)WebKit::_wrap_corewebkitpoint__set_y, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_WebKitPoint(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::WebKitPoint* cobj = coreWebKitPoint(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMWebKitPoint_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.WebKitPoint",                   /* tp_name */
    sizeof(PyDOMWebKitPoint),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_WebKitPoint,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corewebkitpoint_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::WebKitPoint_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- WorkerNavigator ----------- */

namespace WebKit {
using namespace WebCore;

static int
WorkerNavigator_init(WorkerNavigator *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_coreworkernavigator__get_appName(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreWorkerNavigator((PyDOMObject*)(self))->appName();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreworkernavigator__get_appVersion(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreWorkerNavigator((PyDOMObject*)(self))->appVersion();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreworkernavigator__get_platform(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreWorkerNavigator((PyDOMObject*)(self))->platform();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreworkernavigator__get_userAgent(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreWorkerNavigator((PyDOMObject*)(self))->userAgent();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_coreworkernavigator__get_onLine(PyObject *self, void *closure)
{
    bool ret;

    ret = coreWorkerNavigator((PyDOMObject*)(self))->onLine();
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coreworkernavigator_getsets[] = {
    { (char*)"appName", (getter)WebKit::_wrap_coreworkernavigator__get_appName, (setter)0, 0, 0 },
    { (char*)"appVersion", (getter)WebKit::_wrap_coreworkernavigator__get_appVersion, (setter)0, 0, 0 },
    { (char*)"platform", (getter)WebKit::_wrap_coreworkernavigator__get_platform, (setter)0, 0, 0 },
    { (char*)"userAgent", (getter)WebKit::_wrap_coreworkernavigator__get_userAgent, (setter)0, 0, 0 },
    { (char*)"onLine", (getter)WebKit::_wrap_coreworkernavigator__get_onLine, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_WorkerNavigator(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::WorkerNavigator* cobj = coreWorkerNavigator(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMWorkerNavigator_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.WorkerNavigator",                   /* tp_name */
    sizeof(PyDOMWorkerNavigator),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_WorkerNavigator,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coreworkernavigator_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::WorkerNavigator_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Counter ----------- */

namespace WebKit {
using namespace WebCore;

static int
Counter_init(Counter *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corecounter__get_identifier(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreCounter((PyDOMObject*)(self))->identifier();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corecounter__get_listStyle(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreCounter((PyDOMObject*)(self))->listStyle();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corecounter__get_separator(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreCounter((PyDOMObject*)(self))->separator();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecounter_getsets[] = {
    { (char*)"identifier", (getter)WebKit::_wrap_corecounter__get_identifier, (setter)0, 0, 0 },
    { (char*)"listStyle", (getter)WebKit::_wrap_corecounter__get_listStyle, (setter)0, 0, 0 },
    { (char*)"separator", (getter)WebKit::_wrap_corecounter__get_separator, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Counter(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Counter* cobj = coreCounter(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCounter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Counter",                   /* tp_name */
    sizeof(PyDOMCounter),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Counter,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecounter_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Counter_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSRule ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSRule_init(CSSRule *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corecssrule__get_type(PyObject *self, void *closure)
{
    int ret;

    ret = coreCSSRule((PyDOMObject*)(self))->type();
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_corecssrule__get_cssText(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreCSSRule((PyDOMObject*)(self))->cssText();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corecssrule__set_cssText(PyObject *self, PyObject *args, void *closure)
{
    char *cssText;

    if (!PyArg_Parse(args,"s:_wrap_corecssrule__set_cssText", &cssText))
        return -1;
    WTF::String cvt_cssText = WTF::String::fromUTF8((const char*)cssText);
    WebCore::ExceptionCode ec = 0;
    coreCSSRule((PyDOMObject*)(self))->setCssText(cvt_cssText, ec);

    return 0;
}

static PyObject *
_wrap_corecssrule__get_parentStyleSheet(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSStyleSheet* _ret;

    _ret = coreCSSRule((PyDOMObject*)(self))->parentStyleSheet();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corecssrule__get_parentRule(PyObject *self, void *closure)
{
    WebCore::CSSRule* _ret;
    PyObject *py_ret;

    _ret = coreCSSRule((PyDOMObject*)(self))->parentRule();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecssrule_getsets[] = {
    { (char*)"type", (getter)WebKit::_wrap_corecssrule__get_type, (setter)0, 0, 0 },
    { (char*)"cssText", (getter)WebKit::_wrap_corecssrule__get_cssText, (setter)WebKit::_wrap_corecssrule__set_cssText, 0, 0 },
    { (char*)"parentStyleSheet", (getter)WebKit::_wrap_corecssrule__get_parentStyleSheet, (setter)0, 0, 0 },
    { (char*)"parentRule", (getter)WebKit::_wrap_corecssrule__get_parentRule, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CSSRule(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSRule* cobj = coreCSSRule(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSRule_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSRule",                   /* tp_name */
    sizeof(PyDOMCSSRule),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSRule,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecssrule_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSRule_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSCharsetRule ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSCharsetRule_init(CSSCharsetRule *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCSSRule_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corecsscharsetrule__get_encoding(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreCSSCharsetRule((PyDOMObject*)(self))->encoding();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corecsscharsetrule__set_encoding(PyObject *self, PyObject *args, void *closure)
{
    char *encoding;

    if (!PyArg_Parse(args,"s:_wrap_corecsscharsetrule__set_encoding", &encoding))
        return -1;
    WTF::String cvt_encoding = WTF::String::fromUTF8((const char*)encoding);
    WebCore::ExceptionCode ec = 0;
    coreCSSCharsetRule((PyDOMObject*)(self))->setEncoding(cvt_encoding, ec);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecsscharsetrule_getsets[] = {
    { (char*)"encoding", (getter)WebKit::_wrap_corecsscharsetrule__get_encoding, (setter)WebKit::_wrap_corecsscharsetrule__set_encoding, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CSSCharsetRule(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSCharsetRule* cobj = coreCSSCharsetRule(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSCharsetRule_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSCharsetRule",                   /* tp_name */
    sizeof(PyDOMCSSCharsetRule),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSCharsetRule,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecsscharsetrule_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSCharsetRule_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSFontFaceRule ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSFontFaceRule_init(CSSFontFaceRule *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCSSRule_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corecssfontfacerule__get_style(PyObject *self, void *closure)
{
    WebCore::CSSStyleDeclaration* _ret;
    PyObject *py_ret;

    _ret = coreCSSFontFaceRule((PyDOMObject*)(self))->style();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecssfontfacerule_getsets[] = {
    { (char*)"style", (getter)WebKit::_wrap_corecssfontfacerule__get_style, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CSSFontFaceRule(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSFontFaceRule* cobj = coreCSSFontFaceRule(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSFontFaceRule_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSFontFaceRule",                   /* tp_name */
    sizeof(PyDOMCSSFontFaceRule),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSFontFaceRule,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecssfontfacerule_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSFontFaceRule_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSImportRule ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSImportRule_init(CSSImportRule *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCSSRule_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corecssimportrule__get_href(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreCSSImportRule((PyDOMObject*)(self))->href();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corecssimportrule__get_media(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::MediaList* _ret;

    _ret = coreCSSImportRule((PyDOMObject*)(self))->media();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corecssimportrule__get_styleSheet(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSStyleSheet* _ret;

    _ret = coreCSSImportRule((PyDOMObject*)(self))->styleSheet();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecssimportrule_getsets[] = {
    { (char*)"href", (getter)WebKit::_wrap_corecssimportrule__get_href, (setter)0, 0, 0 },
    { (char*)"media", (getter)WebKit::_wrap_corecssimportrule__get_media, (setter)0, 0, 0 },
    { (char*)"styleSheet", (getter)WebKit::_wrap_corecssimportrule__get_styleSheet, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CSSImportRule(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSImportRule* cobj = coreCSSImportRule(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSImportRule_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSImportRule",                   /* tp_name */
    sizeof(PyDOMCSSImportRule),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSImportRule,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecssimportrule_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSImportRule_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSMediaRule ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSMediaRule_init(CSSMediaRule *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCSSRule_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_CSSMediaRule_insertRule(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"rule", (char*)"index", NULL };
    char *rule;
    unsigned long index, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sk:pywebkit.CSSMediaRule.insertRule", kwlist, &rule, &index))
        return NULL;
    WTF::String cvt_rule = WTF::String::fromUTF8((const char*)rule);
    WebCore::ExceptionCode ec = 0;
    
    ret = coreCSSMediaRule(self)->insertRule(cvt_rule, index, ec);
    
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_CSSMediaRule_deleteRule(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    unsigned long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.CSSMediaRule.deleteRule", kwlist, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreCSSMediaRule(self)->deleteRule(index, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMCSSMediaRule_methods[] = {
    { "insertRule", (PyCFunction)WebKit::_wrap_CSSMediaRule_insertRule, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "deleteRule", (PyCFunction)WebKit::_wrap_CSSMediaRule_deleteRule, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corecssmediarule__get_media(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::MediaList* _ret;

    _ret = coreCSSMediaRule((PyDOMObject*)(self))->media();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corecssmediarule__get_cssRules(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSRuleList* _ret;

    _ret = coreCSSMediaRule((PyDOMObject*)(self))->cssRules();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecssmediarule_getsets[] = {
    { (char*)"media", (getter)WebKit::_wrap_corecssmediarule__get_media, (setter)0, 0, 0 },
    { (char*)"cssRules", (getter)WebKit::_wrap_corecssmediarule__get_cssRules, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CSSMediaRule(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSMediaRule* cobj = coreCSSMediaRule(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSMediaRule_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSMediaRule",                   /* tp_name */
    sizeof(PyDOMCSSMediaRule),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSMediaRule,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMCSSMediaRule_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecssmediarule_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSMediaRule_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSPageRule ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSPageRule_init(CSSPageRule *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCSSRule_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corecsspagerule__get_selectorText(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreCSSPageRule((PyDOMObject*)(self))->selectorText();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corecsspagerule__set_selectorText(PyObject *self, PyObject *args, void *closure)
{
    char *selectorText;

    if (!PyArg_Parse(args,"s:_wrap_corecsspagerule__set_selectorText", &selectorText))
        return -1;
    WTF::String cvt_selectorText = WTF::String::fromUTF8((const char*)selectorText);
    coreCSSPageRule((PyDOMObject*)(self))->setSelectorText(cvt_selectorText);

    return 0;
}

static PyObject *
_wrap_corecsspagerule__get_style(PyObject *self, void *closure)
{
    WebCore::CSSStyleDeclaration* _ret;
    PyObject *py_ret;

    _ret = coreCSSPageRule((PyDOMObject*)(self))->style();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecsspagerule_getsets[] = {
    { (char*)"selectorText", (getter)WebKit::_wrap_corecsspagerule__get_selectorText, (setter)WebKit::_wrap_corecsspagerule__set_selectorText, 0, 0 },
    { (char*)"style", (getter)WebKit::_wrap_corecsspagerule__get_style, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CSSPageRule(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSPageRule* cobj = coreCSSPageRule(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSPageRule_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSPageRule",                   /* tp_name */
    sizeof(PyDOMCSSPageRule),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSPageRule,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecsspagerule_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSPageRule_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSValue ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSValue_init(CSSValue *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corecssvalue__get_cssText(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreCSSValue((PyDOMObject*)(self))->cssText();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corecssvalue__set_cssText(PyObject *self, PyObject *args, void *closure)
{
    char *cssText;

    if (!PyArg_Parse(args,"s:_wrap_corecssvalue__set_cssText", &cssText))
        return -1;
    WTF::String cvt_cssText = WTF::String::fromUTF8((const char*)cssText);
    WebCore::ExceptionCode ec = 0;
    coreCSSValue((PyDOMObject*)(self))->setCssText(cvt_cssText, ec);

    return 0;
}

static PyObject *
_wrap_corecssvalue__get_cssValueType(PyObject *self, void *closure)
{
    int ret;

    ret = coreCSSValue((PyDOMObject*)(self))->cssValueType();
    return PyInt_FromLong(ret);
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecssvalue_getsets[] = {
    { (char*)"cssText", (getter)WebKit::_wrap_corecssvalue__get_cssText, (setter)WebKit::_wrap_corecssvalue__set_cssText, 0, 0 },
    { (char*)"cssValueType", (getter)WebKit::_wrap_corecssvalue__get_cssValueType, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CSSValue(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSValue* cobj = coreCSSValue(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSValue_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSValue",                   /* tp_name */
    sizeof(PyDOMCSSValue),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSValue,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecssvalue_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSValue_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSPrimitiveValue ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSPrimitiveValue_init(CSSPrimitiveValue *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCSSValue_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_CSSPrimitiveValue_setFloatValue(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"unitType", (char*)"floatValue", NULL };
    int unitType;
    double floatValue;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"id:pywebkit.CSSPrimitiveValue.setFloatValue", kwlist, &unitType, &floatValue))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreCSSPrimitiveValue(self)->setFloatValue(unitType, floatValue, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_CSSPrimitiveValue_getFloatValue(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"unitType", NULL };
    int unitType;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:pywebkit.CSSPrimitiveValue.getFloatValue", kwlist, &unitType))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    ret = coreCSSPrimitiveValue(self)->getFloatValue(unitType, ec);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_CSSPrimitiveValue_setStringValue(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"stringType", (char*)"stringValue", NULL };
    int stringType;
    char *stringValue;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"is:pywebkit.CSSPrimitiveValue.setStringValue", kwlist, &stringType, &stringValue))
        return NULL;
    WTF::String cvt_stringValue = WTF::String::fromUTF8((const char*)stringValue);
    WebCore::ExceptionCode ec = 0;
    
    coreCSSPrimitiveValue(self)->setStringValue(stringType, cvt_stringValue, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_CSSPrimitiveValue_getStringValue(PyDOMObject *self)
{
    char *_ret;
    WTF::String ret;

    WebCore::ExceptionCode ec = 0;
    
    ret = coreCSSPrimitiveValue(self)->getStringValue(ec);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_CSSPrimitiveValue_getCounterValue(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::Counter* _ret;

    WebCore::ExceptionCode ec = 0;
    
    _ret = coreCSSPrimitiveValue(self)->getCounterValue(ec);
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_CSSPrimitiveValue_getRectValue(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::Rect* _ret;

    WebCore::ExceptionCode ec = 0;
    
    _ret = coreCSSPrimitiveValue(self)->getRectValue(ec);
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_CSSPrimitiveValue_getRGBColorValue(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::RGBColor* _ret;

    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreCSSPrimitiveValue(self)->getRGBColorValue(ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMCSSPrimitiveValue_methods[] = {
    { "setFloatValue", (PyCFunction)WebKit::_wrap_CSSPrimitiveValue_setFloatValue, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getFloatValue", (PyCFunction)WebKit::_wrap_CSSPrimitiveValue_getFloatValue, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setStringValue", (PyCFunction)WebKit::_wrap_CSSPrimitiveValue_setStringValue, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getStringValue", (PyCFunction)WebKit::_wrap_CSSPrimitiveValue_getStringValue, METH_NOARGS,
      NULL },
    { "getCounterValue", (PyCFunction)WebKit::_wrap_CSSPrimitiveValue_getCounterValue, METH_NOARGS,
      NULL },
    { "getRectValue", (PyCFunction)WebKit::_wrap_CSSPrimitiveValue_getRectValue, METH_NOARGS,
      NULL },
    { "getRGBColorValue", (PyCFunction)WebKit::_wrap_CSSPrimitiveValue_getRGBColorValue, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corecssprimitivevalue__get_primitiveType(PyObject *self, void *closure)
{
    int ret;

    ret = coreCSSPrimitiveValue((PyDOMObject*)(self))->primitiveType();
    return PyInt_FromLong(ret);
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecssprimitivevalue_getsets[] = {
    { (char*)"primitiveType", (getter)WebKit::_wrap_corecssprimitivevalue__get_primitiveType, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CSSPrimitiveValue(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSPrimitiveValue* cobj = coreCSSPrimitiveValue(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSPrimitiveValue_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSPrimitiveValue",                   /* tp_name */
    sizeof(PyDOMCSSPrimitiveValue),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSPrimitiveValue,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMCSSPrimitiveValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecssprimitivevalue_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSPrimitiveValue_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSRuleList ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSRuleList_init(CSSRuleList *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_CSSRuleList_item(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    WebCore::CSSRule* _ret;
    unsigned long index;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.CSSRuleList.item", kwlist, &index))
        return NULL;
    
    _ret = coreCSSRuleList(self)->item(index);
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMCSSRuleList_methods[] = {
    { "item", (PyCFunction)WebKit::_wrap_CSSRuleList_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corecssrulelist__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreCSSRuleList((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecssrulelist_getsets[] = {
    { (char*)"length", (getter)WebKit::_wrap_corecssrulelist__get_length, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CSSRuleList(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSRuleList* cobj = coreCSSRuleList(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSRuleList_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSRuleList",                   /* tp_name */
    sizeof(PyDOMCSSRuleList),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSRuleList,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMCSSRuleList_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecssrulelist_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSRuleList_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSStyleDeclaration ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSStyleDeclaration_init(CSSStyleDeclaration *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_CSSStyleDeclaration_getPropertyValue(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"propertyName", NULL };
    char *propertyName, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.CSSStyleDeclaration.getPropertyValue", kwlist, &propertyName))
        return NULL;
    WTF::String cvt_propertyName = WTF::String::fromUTF8((const char*)propertyName);
    
    ret = coreCSSStyleDeclaration(self)->getPropertyValue(cvt_propertyName);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_CSSStyleDeclaration_getPropertyCSSValue(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"propertyName", NULL };
    char *propertyName;
    PyObject *py_ret;
    WebCore::CSSValue* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.CSSStyleDeclaration.getPropertyCSSValue", kwlist, &propertyName))
        return NULL;
    WTF::String cvt_propertyName = WTF::String::fromUTF8((const char*)propertyName);
    
    _ret = WTF::getPtr(coreCSSStyleDeclaration(self)->getPropertyCSSValue(cvt_propertyName));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_CSSStyleDeclaration_removeProperty(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"propertyName", NULL };
    char *propertyName, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.CSSStyleDeclaration.removeProperty", kwlist, &propertyName))
        return NULL;
    WTF::String cvt_propertyName = WTF::String::fromUTF8((const char*)propertyName);
    WebCore::ExceptionCode ec = 0;
    
    ret = coreCSSStyleDeclaration(self)->removeProperty(cvt_propertyName, ec);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_CSSStyleDeclaration_getPropertyPriority(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"propertyName", NULL };
    char *propertyName, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.CSSStyleDeclaration.getPropertyPriority", kwlist, &propertyName))
        return NULL;
    WTF::String cvt_propertyName = WTF::String::fromUTF8((const char*)propertyName);
    
    ret = coreCSSStyleDeclaration(self)->getPropertyPriority(cvt_propertyName);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_CSSStyleDeclaration_setProperty(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"propertyName", (char*)"value", (char*)"priority", NULL };
    char *propertyName, *value, *priority;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sss:pywebkit.CSSStyleDeclaration.setProperty", kwlist, &propertyName, &value, &priority))
        return NULL;
    WTF::String cvt_propertyName = WTF::String::fromUTF8((const char*)propertyName);
    WTF::String cvt_value = WTF::String::fromUTF8((const char*)value);
    WTF::String cvt_priority = WTF::String::fromUTF8((const char*)priority);
    WebCore::ExceptionCode ec = 0;
    
    coreCSSStyleDeclaration(self)->setProperty(cvt_propertyName, cvt_value, cvt_priority, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_CSSStyleDeclaration_item(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    char *_ret;
    unsigned long index;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.CSSStyleDeclaration.item", kwlist, &index))
        return NULL;
    
    ret = coreCSSStyleDeclaration(self)->item(index);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_CSSStyleDeclaration_getPropertyShorthand(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"propertyName", NULL };
    char *propertyName, *_ret;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.CSSStyleDeclaration.getPropertyShorthand", kwlist, &propertyName))
        return NULL;
    WTF::String cvt_propertyName = WTF::String::fromUTF8((const char*)propertyName);
    
    ret = coreCSSStyleDeclaration(self)->getPropertyShorthand(cvt_propertyName);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_CSSStyleDeclaration_isPropertyImplicit(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"propertyName", NULL };
    char *propertyName;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.CSSStyleDeclaration.isPropertyImplicit", kwlist, &propertyName))
        return NULL;
    WTF::String cvt_propertyName = WTF::String::fromUTF8((const char*)propertyName);
    
    ret = coreCSSStyleDeclaration(self)->isPropertyImplicit(cvt_propertyName);
    
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMCSSStyleDeclaration_methods[] = {
    { "getPropertyValue", (PyCFunction)WebKit::_wrap_CSSStyleDeclaration_getPropertyValue, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getPropertyCSSValue", (PyCFunction)WebKit::_wrap_CSSStyleDeclaration_getPropertyCSSValue, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeProperty", (PyCFunction)WebKit::_wrap_CSSStyleDeclaration_removeProperty, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getPropertyPriority", (PyCFunction)WebKit::_wrap_CSSStyleDeclaration_getPropertyPriority, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setProperty", (PyCFunction)WebKit::_wrap_CSSStyleDeclaration_setProperty, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "item", (PyCFunction)WebKit::_wrap_CSSStyleDeclaration_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "getPropertyShorthand", (PyCFunction)WebKit::_wrap_CSSStyleDeclaration_getPropertyShorthand, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "isPropertyImplicit", (PyCFunction)WebKit::_wrap_CSSStyleDeclaration_isPropertyImplicit, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corecssstyledeclaration__get_cssText(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreCSSStyleDeclaration((PyDOMObject*)(self))->cssText();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corecssstyledeclaration__set_cssText(PyObject *self, PyObject *args, void *closure)
{
    char *cssText;

    if (!PyArg_Parse(args,"s:_wrap_corecssstyledeclaration__set_cssText", &cssText))
        return -1;
    WTF::String cvt_cssText = WTF::String::fromUTF8((const char*)cssText);
    WebCore::ExceptionCode ec = 0;
    coreCSSStyleDeclaration((PyDOMObject*)(self))->setCssText(cvt_cssText, ec);

    return 0;
}

static PyObject *
_wrap_corecssstyledeclaration__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreCSSStyleDeclaration((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_corecssstyledeclaration__get_parentRule(PyObject *self, void *closure)
{
    WebCore::CSSRule* _ret;
    PyObject *py_ret;

    _ret = coreCSSStyleDeclaration((PyDOMObject*)(self))->parentRule();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecssstyledeclaration_getsets[] = {
    { (char*)"cssText", (getter)WebKit::_wrap_corecssstyledeclaration__get_cssText, (setter)WebKit::_wrap_corecssstyledeclaration__set_cssText, 0, 0 },
    { (char*)"length", (getter)WebKit::_wrap_corecssstyledeclaration__get_length, (setter)0, 0, 0 },
    { (char*)"parentRule", (getter)WebKit::_wrap_corecssstyledeclaration__get_parentRule, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CSSStyleDeclaration(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSStyleDeclaration* cobj = coreCSSStyleDeclaration(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSStyleDeclaration_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSStyleDeclaration",                   /* tp_name */
    sizeof(PyDOMCSSStyleDeclaration),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSStyleDeclaration,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMCSSStyleDeclaration_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecssstyledeclaration_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSStyleDeclaration_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSStyleRule ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSStyleRule_init(CSSStyleRule *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCSSRule_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corecssstylerule__get_selectorText(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreCSSStyleRule((PyDOMObject*)(self))->selectorText();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corecssstylerule__set_selectorText(PyObject *self, PyObject *args, void *closure)
{
    char *selectorText;

    if (!PyArg_Parse(args,"s:_wrap_corecssstylerule__set_selectorText", &selectorText))
        return -1;
    WTF::String cvt_selectorText = WTF::String::fromUTF8((const char*)selectorText);
    coreCSSStyleRule((PyDOMObject*)(self))->setSelectorText(cvt_selectorText);

    return 0;
}

static PyObject *
_wrap_corecssstylerule__get_style(PyObject *self, void *closure)
{
    WebCore::CSSStyleDeclaration* _ret;
    PyObject *py_ret;

    _ret = coreCSSStyleRule((PyDOMObject*)(self))->style();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecssstylerule_getsets[] = {
    { (char*)"selectorText", (getter)WebKit::_wrap_corecssstylerule__get_selectorText, (setter)WebKit::_wrap_corecssstylerule__set_selectorText, 0, 0 },
    { (char*)"style", (getter)WebKit::_wrap_corecssstylerule__get_style, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CSSStyleRule(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSStyleRule* cobj = coreCSSStyleRule(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSStyleRule_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSStyleRule",                   /* tp_name */
    sizeof(PyDOMCSSStyleRule),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSStyleRule,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecssstylerule_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSStyleRule_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- StyleSheet ----------- */

namespace WebKit {
using namespace WebCore;

static int
StyleSheet_init(StyleSheet *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corestylesheet__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreStyleSheet((PyDOMObject*)(self))->type();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corestylesheet__get_disabled(PyObject *self, void *closure)
{
    bool ret;

    ret = coreStyleSheet((PyDOMObject*)(self))->disabled();
    return PyBool_FromLong((long)ret);

}

static int
_wrap_corestylesheet__set_disabled(PyObject *self, PyObject *args, void *closure)
{
    int disabled;

    if (!PyArg_Parse(args,"i:_wrap_corestylesheet__set_disabled", &disabled))
        return -1;
    bool cvt_disabled = (bool)disabled;
    coreStyleSheet((PyDOMObject*)(self))->setDisabled(cvt_disabled);

    return 0;
}

static PyObject *
_wrap_corestylesheet__get_ownerNode(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::Node* _ret;

    _ret = coreStyleSheet((PyDOMObject*)(self))->ownerNode();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corestylesheet__get_parentStyleSheet(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::StyleSheet* _ret;

    _ret = coreStyleSheet((PyDOMObject*)(self))->parentStyleSheet();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corestylesheet__get_href(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreStyleSheet((PyDOMObject*)(self))->href();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corestylesheet__get_title(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreStyleSheet((PyDOMObject*)(self))->title();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corestylesheet__get_media(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::MediaList* _ret;

    _ret = coreStyleSheet((PyDOMObject*)(self))->media();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corestylesheet_getsets[] = {
    { (char*)"type", (getter)WebKit::_wrap_corestylesheet__get_type, (setter)0, 0, 0 },
    { (char*)"disabled", (getter)WebKit::_wrap_corestylesheet__get_disabled, (setter)WebKit::_wrap_corestylesheet__set_disabled, 0, 0 },
    { (char*)"ownerNode", (getter)WebKit::_wrap_corestylesheet__get_ownerNode, (setter)0, 0, 0 },
    { (char*)"parentStyleSheet", (getter)WebKit::_wrap_corestylesheet__get_parentStyleSheet, (setter)0, 0, 0 },
    { (char*)"href", (getter)WebKit::_wrap_corestylesheet__get_href, (setter)0, 0, 0 },
    { (char*)"title", (getter)WebKit::_wrap_corestylesheet__get_title, (setter)0, 0, 0 },
    { (char*)"media", (getter)WebKit::_wrap_corestylesheet__get_media, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_StyleSheet(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::StyleSheet* cobj = coreStyleSheet(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMStyleSheet_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.StyleSheet",                   /* tp_name */
    sizeof(PyDOMStyleSheet),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_StyleSheet,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corestylesheet_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::StyleSheet_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSStyleSheet ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSStyleSheet_init(CSSStyleSheet *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMStyleSheet_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_CSSStyleSheet_insertRule(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"rule", (char*)"index", NULL };
    char *rule;
    unsigned long index, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sk:pywebkit.CSSStyleSheet.insertRule", kwlist, &rule, &index))
        return NULL;
    WTF::String cvt_rule = WTF::String::fromUTF8((const char*)rule);
    WebCore::ExceptionCode ec = 0;
    
    ret = coreCSSStyleSheet(self)->insertRule(cvt_rule, index, ec);
    
    return PyLong_FromUnsignedLong(ret);

}

static PyObject *
_wrap_CSSStyleSheet_deleteRule(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    unsigned long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.CSSStyleSheet.deleteRule", kwlist, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreCSSStyleSheet(self)->deleteRule(index, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_CSSStyleSheet_addRule(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"selector", (char*)"style", (char*)"index", NULL };
    char *selector, *style;
    unsigned long index;
    long ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ssk:pywebkit.CSSStyleSheet.addRule", kwlist, &selector, &style, &index))
        return NULL;
    WTF::String cvt_selector = WTF::String::fromUTF8((const char*)selector);
    WTF::String cvt_style = WTF::String::fromUTF8((const char*)style);
    WebCore::ExceptionCode ec = 0;
    
    ret = coreCSSStyleSheet(self)->addRule(cvt_selector, cvt_style, index, ec);
    
    return PyInt_FromLong(ret);

}

static PyObject *
_wrap_CSSStyleSheet_removeRule(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    unsigned long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.CSSStyleSheet.removeRule", kwlist, &index))
        return NULL;
    WebCore::ExceptionCode ec = 0;
    
    coreCSSStyleSheet(self)->removeRule(index, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMCSSStyleSheet_methods[] = {
    { "insertRule", (PyCFunction)WebKit::_wrap_CSSStyleSheet_insertRule, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "deleteRule", (PyCFunction)WebKit::_wrap_CSSStyleSheet_deleteRule, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "addRule", (PyCFunction)WebKit::_wrap_CSSStyleSheet_addRule, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "removeRule", (PyCFunction)WebKit::_wrap_CSSStyleSheet_removeRule, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corecssstylesheet__get_ownerRule(PyObject *self, void *closure)
{
    WebCore::CSSRule* _ret;
    PyObject *py_ret;

    _ret = coreCSSStyleSheet((PyDOMObject*)(self))->ownerRule();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corecssstylesheet__get_cssRules(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSRuleList* _ret;

    _ret = WTF::getPtr(coreCSSStyleSheet((PyDOMObject*)(self))->cssRules());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corecssstylesheet__get_rules(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSRuleList* _ret;

    _ret = WTF::getPtr(coreCSSStyleSheet((PyDOMObject*)(self))->rules());
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecssstylesheet_getsets[] = {
    { (char*)"ownerRule", (getter)WebKit::_wrap_corecssstylesheet__get_ownerRule, (setter)0, 0, 0 },
    { (char*)"cssRules", (getter)WebKit::_wrap_corecssstylesheet__get_cssRules, (setter)0, 0, 0 },
    { (char*)"rules", (getter)WebKit::_wrap_corecssstylesheet__get_rules, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CSSStyleSheet(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSStyleSheet* cobj = coreCSSStyleSheet(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSStyleSheet_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSStyleSheet",                   /* tp_name */
    sizeof(PyDOMCSSStyleSheet),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSStyleSheet,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMCSSStyleSheet_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecssstylesheet_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSStyleSheet_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSUnknownRule ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSUnknownRule_init(CSSUnknownRule *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCSSRule_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
void dealloc_CSSUnknownRule(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSUnknownRule* cobj = coreCSSUnknownRule(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSUnknownRule_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSUnknownRule",                   /* tp_name */
    sizeof(PyDOMCSSUnknownRule),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSUnknownRule,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSUnknownRule_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- CSSValueList ----------- */

namespace WebKit {
using namespace WebCore;

static int
CSSValueList_init(CSSValueList *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCSSValue_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_CSSValueList_item(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    PyObject *py_ret;
    unsigned long index;
    WebCore::CSSValue* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.CSSValueList.item", kwlist, &index))
        return NULL;
    
    _ret = coreCSSValueList(self)->item(index);
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMCSSValueList_methods[] = {
    { "item", (PyCFunction)WebKit::_wrap_CSSValueList_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corecssvaluelist__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreCSSValueList((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corecssvaluelist_getsets[] = {
    { (char*)"length", (getter)WebKit::_wrap_corecssvaluelist__get_length, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_CSSValueList(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::CSSValueList* cobj = coreCSSValueList(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMCSSValueList_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.CSSValueList",                   /* tp_name */
    sizeof(PyDOMCSSValueList),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_CSSValueList,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMCSSValueList_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corecssvaluelist_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::CSSValueList_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- MediaList ----------- */

namespace WebKit {
using namespace WebCore;

static int
MediaList_init(MediaList *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_MediaList_item(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    char *_ret;
    unsigned long index;
    WTF::String ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.MediaList.item", kwlist, &index))
        return NULL;
    
    ret = coreMediaList(self)->item(index);
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_MediaList_deleteMedium(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"oldMedium", NULL };
    char *oldMedium;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.MediaList.deleteMedium", kwlist, &oldMedium))
        return NULL;
    WTF::String cvt_oldMedium = WTF::String::fromUTF8((const char*)oldMedium);
    WebCore::ExceptionCode ec = 0;
    
    coreMediaList(self)->deleteMedium(cvt_oldMedium, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_MediaList_appendMedium(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"newMedium", NULL };
    char *newMedium;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.MediaList.appendMedium", kwlist, &newMedium))
        return NULL;
    WTF::String cvt_newMedium = WTF::String::fromUTF8((const char*)newMedium);
    WebCore::ExceptionCode ec = 0;
    
    coreMediaList(self)->appendMedium(cvt_newMedium, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMMediaList_methods[] = {
    { "item", (PyCFunction)WebKit::_wrap_MediaList_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "deleteMedium", (PyCFunction)WebKit::_wrap_MediaList_deleteMedium, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "appendMedium", (PyCFunction)WebKit::_wrap_MediaList_appendMedium, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_coremedialist__get_mediaText(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreMediaList((PyDOMObject*)(self))->mediaText();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_coremedialist__set_mediaText(PyObject *self, PyObject *args, void *closure)
{
    char *mediaText;

    if (!PyArg_Parse(args,"s:_wrap_coremedialist__set_mediaText", &mediaText))
        return -1;
    WTF::String cvt_mediaText = WTF::String::fromUTF8((const char*)mediaText);
    WebCore::ExceptionCode ec = 0;
    coreMediaList((PyDOMObject*)(self))->setMediaText(cvt_mediaText, ec);

    return 0;
}

static PyObject *
_wrap_coremedialist__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreMediaList((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef coremedialist_getsets[] = {
    { (char*)"mediaText", (getter)WebKit::_wrap_coremedialist__get_mediaText, (setter)WebKit::_wrap_coremedialist__set_mediaText, 0, 0 },
    { (char*)"length", (getter)WebKit::_wrap_coremedialist__get_length, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_MediaList(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::MediaList* cobj = coreMediaList(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMMediaList_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.MediaList",                   /* tp_name */
    sizeof(PyDOMMediaList),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_MediaList,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMMediaList_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)coremedialist_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::MediaList_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- Rect ----------- */

namespace WebKit {
using namespace WebCore;

static int
Rect_init(Rect *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corerect__get_top(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSPrimitiveValue* _ret;

    _ret = coreRect((PyDOMObject*)(self))->top();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corerect__get_right(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSPrimitiveValue* _ret;

    _ret = coreRect((PyDOMObject*)(self))->right();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corerect__get_bottom(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSPrimitiveValue* _ret;

    _ret = coreRect((PyDOMObject*)(self))->bottom();
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corerect__get_left(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSPrimitiveValue* _ret;

    _ret = coreRect((PyDOMObject*)(self))->left();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corerect_getsets[] = {
    { (char*)"top", (getter)WebKit::_wrap_corerect__get_top, (setter)0, 0, 0 },
    { (char*)"right", (getter)WebKit::_wrap_corerect__get_right, (setter)0, 0, 0 },
    { (char*)"bottom", (getter)WebKit::_wrap_corerect__get_bottom, (setter)0, 0, 0 },
    { (char*)"left", (getter)WebKit::_wrap_corerect__get_left, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_Rect(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::Rect* cobj = coreRect(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMRect_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.Rect",                   /* tp_name */
    sizeof(PyDOMRect),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_Rect,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corerect_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::Rect_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- RGBColor ----------- */

namespace WebKit {
using namespace WebCore;

static int
RGBColor_init(RGBColor *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corergbcolor__get_red(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSPrimitiveValue* _ret;

    _ret = WTF::getPtr(coreRGBColor((PyDOMObject*)(self))->red());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corergbcolor__get_green(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSPrimitiveValue* _ret;

    _ret = WTF::getPtr(coreRGBColor((PyDOMObject*)(self))->green());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corergbcolor__get_blue(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSPrimitiveValue* _ret;

    _ret = WTF::getPtr(coreRGBColor((PyDOMObject*)(self))->blue());
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_corergbcolor__get_alpha(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSPrimitiveValue* _ret;

    _ret = WTF::getPtr(coreRGBColor((PyDOMObject*)(self))->alpha());
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corergbcolor_getsets[] = {
    { (char*)"red", (getter)WebKit::_wrap_corergbcolor__get_red, (setter)0, 0, 0 },
    { (char*)"green", (getter)WebKit::_wrap_corergbcolor__get_green, (setter)0, 0, 0 },
    { (char*)"blue", (getter)WebKit::_wrap_corergbcolor__get_blue, (setter)0, 0, 0 },
    { (char*)"alpha", (getter)WebKit::_wrap_corergbcolor__get_alpha, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_RGBColor(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::RGBColor* cobj = coreRGBColor(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMRGBColor_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.RGBColor",                   /* tp_name */
    sizeof(PyDOMRGBColor),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_RGBColor,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corergbcolor_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::RGBColor_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- StyleMedia ----------- */

namespace WebKit {
using namespace WebCore;

static int
StyleMedia_init(StyleMedia *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_StyleMedia_matchMedium(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"mediaquery", NULL };
    char *mediaquery;
    bool ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.StyleMedia.matchMedium", kwlist, &mediaquery))
        return NULL;
    WTF::String cvt_mediaquery = WTF::String::fromUTF8((const char*)mediaquery);
    
    ret = coreStyleMedia(self)->matchMedium(cvt_mediaquery);
    
    return PyBool_FromLong((long)ret);

}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMStyleMedia_methods[] = {
    { "matchMedium", (PyCFunction)WebKit::_wrap_StyleMedia_matchMedium, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corestylemedia__get_type(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreStyleMedia((PyDOMObject*)(self))->type();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corestylemedia_getsets[] = {
    { (char*)"type", (getter)WebKit::_wrap_corestylemedia__get_type, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_StyleMedia(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::StyleMedia* cobj = coreStyleMedia(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMStyleMedia_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.StyleMedia",                   /* tp_name */
    sizeof(PyDOMStyleMedia),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_StyleMedia,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMStyleMedia_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corestylemedia_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::StyleMedia_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- StyleSheetList ----------- */

namespace WebKit {
using namespace WebCore;

static int
StyleSheetList_init(StyleSheetList *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_StyleSheetList_item(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"index", NULL };
    PyObject *py_ret;
    WebCore::StyleSheet* _ret;
    unsigned long index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"k:pywebkit.StyleSheetList.item", kwlist, &index))
        return NULL;
    
    _ret = coreStyleSheetList(self)->item(index);
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMStyleSheetList_methods[] = {
    { "item", (PyCFunction)WebKit::_wrap_StyleSheetList_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corestylesheetlist__get_length(PyObject *self, void *closure)
{
    unsigned long ret;

    ret = coreStyleSheetList((PyDOMObject*)(self))->length();
    return PyLong_FromUnsignedLong(ret);

}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corestylesheetlist_getsets[] = {
    { (char*)"length", (getter)WebKit::_wrap_corestylesheetlist__get_length, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_StyleSheetList(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::StyleSheetList* cobj = coreStyleSheetList(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMStyleSheetList_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.StyleSheetList",                   /* tp_name */
    sizeof(PyDOMStyleSheetList),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_StyleSheetList,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMStyleSheetList_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corestylesheetlist_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::StyleSheetList_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- WebKitCSSKeyframeRule ----------- */

namespace WebKit {
using namespace WebCore;

static int
WebKitCSSKeyframeRule_init(WebKitCSSKeyframeRule *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCSSRule_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corewebkitcsskeyframerule__get_keyText(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreWebKitCSSKeyframeRule((PyDOMObject*)(self))->keyText();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corewebkitcsskeyframerule__set_keyText(PyObject *self, PyObject *args, void *closure)
{
    char *keyText;

    if (!PyArg_Parse(args,"s:_wrap_corewebkitcsskeyframerule__set_keyText", &keyText))
        return -1;
    WTF::String cvt_keyText = WTF::String::fromUTF8((const char*)keyText);
    coreWebKitCSSKeyframeRule((PyDOMObject*)(self))->setKeyText(cvt_keyText);

    return 0;
}

static PyObject *
_wrap_corewebkitcsskeyframerule__get_style(PyObject *self, void *closure)
{
    WebCore::CSSStyleDeclaration* _ret;
    PyObject *py_ret;

    _ret = coreWebKitCSSKeyframeRule((PyDOMObject*)(self))->style();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corewebkitcsskeyframerule_getsets[] = {
    { (char*)"keyText", (getter)WebKit::_wrap_corewebkitcsskeyframerule__get_keyText, (setter)WebKit::_wrap_corewebkitcsskeyframerule__set_keyText, 0, 0 },
    { (char*)"style", (getter)WebKit::_wrap_corewebkitcsskeyframerule__get_style, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_WebKitCSSKeyframeRule(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::WebKitCSSKeyframeRule* cobj = coreWebKitCSSKeyframeRule(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMWebKitCSSKeyframeRule_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.WebKitCSSKeyframeRule",                   /* tp_name */
    sizeof(PyDOMWebKitCSSKeyframeRule),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_WebKitCSSKeyframeRule,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corewebkitcsskeyframerule_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::WebKitCSSKeyframeRule_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- WebKitCSSKeyframesRule ----------- */

namespace WebKit {
using namespace WebCore;

static int
WebKitCSSKeyframesRule_init(WebKitCSSKeyframesRule *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCSSRule_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_WebKitCSSKeyframesRule_insertRule(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"rule", NULL };
    char *rule;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.WebKitCSSKeyframesRule.insertRule", kwlist, &rule))
        return NULL;
    WTF::String cvt_rule = WTF::String::fromUTF8((const char*)rule);
    
    coreWebKitCSSKeyframesRule(self)->insertRule(cvt_rule);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_WebKitCSSKeyframesRule_deleteRule(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"key", NULL };
    char *key;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.WebKitCSSKeyframesRule.deleteRule", kwlist, &key))
        return NULL;
    WTF::String cvt_key = WTF::String::fromUTF8((const char*)key);
    
    coreWebKitCSSKeyframesRule(self)->deleteRule(cvt_key);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_WebKitCSSKeyframesRule_findRule(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"key", NULL };
    char *key;
    PyObject *py_ret;
    WebCore::WebKitCSSKeyframeRule* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.WebKitCSSKeyframesRule.findRule", kwlist, &key))
        return NULL;
    WTF::String cvt_key = WTF::String::fromUTF8((const char*)key);
    
    _ret = coreWebKitCSSKeyframesRule(self)->findRule(cvt_key);
    
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMWebKitCSSKeyframesRule_methods[] = {
    { "insertRule", (PyCFunction)WebKit::_wrap_WebKitCSSKeyframesRule_insertRule, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "deleteRule", (PyCFunction)WebKit::_wrap_WebKitCSSKeyframesRule_deleteRule, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "findRule", (PyCFunction)WebKit::_wrap_WebKitCSSKeyframesRule_findRule, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corewebkitcsskeyframesrule__get_name(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreWebKitCSSKeyframesRule((PyDOMObject*)(self))->name();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static int
_wrap_corewebkitcsskeyframesrule__set_name(PyObject *self, PyObject *args, void *closure)
{
    char *name;

    if (!PyArg_Parse(args,"s:_wrap_corewebkitcsskeyframesrule__set_name", &name))
        return -1;
    WTF::String cvt_name = WTF::String::fromUTF8((const char*)name);
    coreWebKitCSSKeyframesRule((PyDOMObject*)(self))->setName(cvt_name);

    return 0;
}

static PyObject *
_wrap_corewebkitcsskeyframesrule__get_cssRules(PyObject *self, void *closure)
{
    PyObject *py_ret;
    WebCore::CSSRuleList* _ret;

    _ret = coreWebKitCSSKeyframesRule((PyDOMObject*)(self))->cssRules();
    py_ret = toPython(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corewebkitcsskeyframesrule_getsets[] = {
    { (char*)"name", (getter)WebKit::_wrap_corewebkitcsskeyframesrule__get_name, (setter)WebKit::_wrap_corewebkitcsskeyframesrule__set_name, 0, 0 },
    { (char*)"cssRules", (getter)WebKit::_wrap_corewebkitcsskeyframesrule__get_cssRules, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_WebKitCSSKeyframesRule(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::WebKitCSSKeyframesRule* cobj = coreWebKitCSSKeyframesRule(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMWebKitCSSKeyframesRule_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.WebKitCSSKeyframesRule",                   /* tp_name */
    sizeof(PyDOMWebKitCSSKeyframesRule),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_WebKitCSSKeyframesRule,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMWebKitCSSKeyframesRule_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corewebkitcsskeyframesrule_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::WebKitCSSKeyframesRule_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- WebKitCSSMatrix ----------- */

namespace WebKit {
using namespace WebCore;

static int
WebKitCSSMatrix_init(WebKitCSSMatrix *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMObject_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_WebKitCSSMatrix_setMatrixValue(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"string", NULL };
    char *string;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:pywebkit.WebKitCSSMatrix.setMatrixValue", kwlist, &string))
        return NULL;
    WTF::String cvt_string = WTF::String::fromUTF8((const char*)string);
    WebCore::ExceptionCode ec = 0;
    
    coreWebKitCSSMatrix(self)->setMatrixValue(cvt_string, ec);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_WebKitCSSMatrix_multiply(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"secondMatrix", NULL };
    PyObject *py_ret;
    PyDOMObject *secondMatrix;
    WebCore::WebKitCSSMatrix* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:pywebkit.WebKitCSSMatrix.multiply", kwlist, PtrPyDOMWebKitCSSMatrix_Type, &secondMatrix))
        return NULL;
    
    _ret = WTF::getPtr(coreWebKitCSSMatrix(self)->multiply(coreWebKitCSSMatrix(secondMatrix)));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_WebKitCSSMatrix_inverse(PyDOMObject *self)
{
    PyObject *py_ret;
    WebCore::WebKitCSSMatrix* _ret;

    WebCore::ExceptionCode ec = 0;
    
    _ret = WTF::getPtr(coreWebKitCSSMatrix(self)->inverse(ec));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_WebKitCSSMatrix_translate(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"x", (char*)"y", (char*)"z", NULL };
    PyObject *py_ret;
    double x, y, z;
    WebCore::WebKitCSSMatrix* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ddd:pywebkit.WebKitCSSMatrix.translate", kwlist, &x, &y, &z))
        return NULL;
    
    _ret = WTF::getPtr(coreWebKitCSSMatrix(self)->translate(x, y, z));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_WebKitCSSMatrix_scale(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"scaleX", (char*)"scaleY", (char*)"scaleZ", NULL };
    PyObject *py_ret;
    double scaleX, scaleY, scaleZ;
    WebCore::WebKitCSSMatrix* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ddd:pywebkit.WebKitCSSMatrix.scale", kwlist, &scaleX, &scaleY, &scaleZ))
        return NULL;
    
    _ret = WTF::getPtr(coreWebKitCSSMatrix(self)->scale(scaleX, scaleY, scaleZ));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_WebKitCSSMatrix_rotate(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"rotX", (char*)"rotY", (char*)"rotZ", NULL };
    PyObject *py_ret;
    double rotX, rotY, rotZ;
    WebCore::WebKitCSSMatrix* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ddd:pywebkit.WebKitCSSMatrix.rotate", kwlist, &rotX, &rotY, &rotZ))
        return NULL;
    
    _ret = WTF::getPtr(coreWebKitCSSMatrix(self)->rotate(rotX, rotY, rotZ));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_WebKitCSSMatrix_rotateAxisAngle(PyDOMObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*)"x", (char*)"y", (char*)"z", (char*)"angle", NULL };
    PyObject *py_ret;
    double x, y, z, angle;
    WebCore::WebKitCSSMatrix* _ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dddd:pywebkit.WebKitCSSMatrix.rotateAxisAngle", kwlist, &x, &y, &z, &angle))
        return NULL;
    
    _ret = WTF::getPtr(coreWebKitCSSMatrix(self)->rotateAxisAngle(x, y, z, angle));
    
    py_ret = toPython(_ret);
    return py_ret;
}

static PyObject *
_wrap_WebKitCSSMatrix_toString(PyDOMObject *self)
{
    char *_ret;
    WTF::String ret;

    
    ret = coreWebKitCSSMatrix(self)->toString();
    
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyMethodDef _PyDOMWebKitCSSMatrix_methods[] = {
    { "setMatrixValue", (PyCFunction)WebKit::_wrap_WebKitCSSMatrix_setMatrixValue, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "multiply", (PyCFunction)WebKit::_wrap_WebKitCSSMatrix_multiply, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "inverse", (PyCFunction)WebKit::_wrap_WebKitCSSMatrix_inverse, METH_NOARGS,
      NULL },
    { "translate", (PyCFunction)WebKit::_wrap_WebKitCSSMatrix_translate, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "scale", (PyCFunction)WebKit::_wrap_WebKitCSSMatrix_scale, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "rotate", (PyCFunction)WebKit::_wrap_WebKitCSSMatrix_rotate, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "rotateAxisAngle", (PyCFunction)WebKit::_wrap_WebKitCSSMatrix_rotateAxisAngle, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "toString", (PyCFunction)WebKit::_wrap_WebKitCSSMatrix_toString, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;
static PyObject *
_wrap_corewebkitcssmatrix__get_a(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->a();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_a(PyObject *self, PyObject *args, void *closure)
{
    double a;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_a", &a))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setA(a);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_b(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->b();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_b(PyObject *self, PyObject *args, void *closure)
{
    double b;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_b", &b))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setB(b);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_c(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->c();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_c(PyObject *self, PyObject *args, void *closure)
{
    double c;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_c", &c))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setC(c);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_d(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->d();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_d(PyObject *self, PyObject *args, void *closure)
{
    double d;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_d", &d))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setD(d);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_e(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->e();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_e(PyObject *self, PyObject *args, void *closure)
{
    double e;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_e", &e))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setE(e);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_f(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->f();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_f(PyObject *self, PyObject *args, void *closure)
{
    double f;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_f", &f))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setF(f);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m11(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m11();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m11(PyObject *self, PyObject *args, void *closure)
{
    double m11;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m11", &m11))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM11(m11);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m12(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m12();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m12(PyObject *self, PyObject *args, void *closure)
{
    double m12;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m12", &m12))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM12(m12);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m13(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m13();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m13(PyObject *self, PyObject *args, void *closure)
{
    double m13;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m13", &m13))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM13(m13);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m14(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m14();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m14(PyObject *self, PyObject *args, void *closure)
{
    double m14;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m14", &m14))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM14(m14);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m21(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m21();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m21(PyObject *self, PyObject *args, void *closure)
{
    double m21;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m21", &m21))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM21(m21);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m22(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m22();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m22(PyObject *self, PyObject *args, void *closure)
{
    double m22;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m22", &m22))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM22(m22);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m23(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m23();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m23(PyObject *self, PyObject *args, void *closure)
{
    double m23;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m23", &m23))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM23(m23);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m24(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m24();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m24(PyObject *self, PyObject *args, void *closure)
{
    double m24;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m24", &m24))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM24(m24);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m31(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m31();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m31(PyObject *self, PyObject *args, void *closure)
{
    double m31;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m31", &m31))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM31(m31);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m32(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m32();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m32(PyObject *self, PyObject *args, void *closure)
{
    double m32;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m32", &m32))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM32(m32);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m33(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m33();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m33(PyObject *self, PyObject *args, void *closure)
{
    double m33;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m33", &m33))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM33(m33);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m34(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m34();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m34(PyObject *self, PyObject *args, void *closure)
{
    double m34;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m34", &m34))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM34(m34);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m41(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m41();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m41(PyObject *self, PyObject *args, void *closure)
{
    double m41;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m41", &m41))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM41(m41);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m42(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m42();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m42(PyObject *self, PyObject *args, void *closure)
{
    double m42;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m42", &m42))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM42(m42);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m43(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m43();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m43(PyObject *self, PyObject *args, void *closure)
{
    double m43;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m43", &m43))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM43(m43);

    return 0;
}

static PyObject *
_wrap_corewebkitcssmatrix__get_m44(PyObject *self, void *closure)
{
    double ret;

    ret = coreWebKitCSSMatrix((PyDOMObject*)(self))->m44();
    return PyFloat_FromDouble(ret);
}

static int
_wrap_corewebkitcssmatrix__set_m44(PyObject *self, PyObject *args, void *closure)
{
    double m44;

    if (!PyArg_Parse(args,"d:_wrap_corewebkitcssmatrix__set_m44", &m44))
        return -1;
    coreWebKitCSSMatrix((PyDOMObject*)(self))->setM44(m44);

    return 0;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corewebkitcssmatrix_getsets[] = {
    { (char*)"a", (getter)WebKit::_wrap_corewebkitcssmatrix__get_a, (setter)WebKit::_wrap_corewebkitcssmatrix__set_a, 0, 0 },
    { (char*)"b", (getter)WebKit::_wrap_corewebkitcssmatrix__get_b, (setter)WebKit::_wrap_corewebkitcssmatrix__set_b, 0, 0 },
    { (char*)"c", (getter)WebKit::_wrap_corewebkitcssmatrix__get_c, (setter)WebKit::_wrap_corewebkitcssmatrix__set_c, 0, 0 },
    { (char*)"d", (getter)WebKit::_wrap_corewebkitcssmatrix__get_d, (setter)WebKit::_wrap_corewebkitcssmatrix__set_d, 0, 0 },
    { (char*)"e", (getter)WebKit::_wrap_corewebkitcssmatrix__get_e, (setter)WebKit::_wrap_corewebkitcssmatrix__set_e, 0, 0 },
    { (char*)"f", (getter)WebKit::_wrap_corewebkitcssmatrix__get_f, (setter)WebKit::_wrap_corewebkitcssmatrix__set_f, 0, 0 },
    { (char*)"m11", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m11, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m11, 0, 0 },
    { (char*)"m12", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m12, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m12, 0, 0 },
    { (char*)"m13", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m13, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m13, 0, 0 },
    { (char*)"m14", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m14, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m14, 0, 0 },
    { (char*)"m21", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m21, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m21, 0, 0 },
    { (char*)"m22", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m22, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m22, 0, 0 },
    { (char*)"m23", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m23, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m23, 0, 0 },
    { (char*)"m24", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m24, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m24, 0, 0 },
    { (char*)"m31", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m31, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m31, 0, 0 },
    { (char*)"m32", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m32, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m32, 0, 0 },
    { (char*)"m33", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m33, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m33, 0, 0 },
    { (char*)"m34", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m34, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m34, 0, 0 },
    { (char*)"m41", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m41, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m41, 0, 0 },
    { (char*)"m42", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m42, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m42, 0, 0 },
    { (char*)"m43", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m43, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m43, 0, 0 },
    { (char*)"m44", (getter)WebKit::_wrap_corewebkitcssmatrix__get_m44, (setter)WebKit::_wrap_corewebkitcssmatrix__set_m44, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_WebKitCSSMatrix(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::WebKitCSSMatrix* cobj = coreWebKitCSSMatrix(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMWebKitCSSMatrix_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.WebKitCSSMatrix",                   /* tp_name */
    sizeof(PyDOMWebKitCSSMatrix),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_WebKitCSSMatrix,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyDOMWebKitCSSMatrix_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corewebkitcssmatrix_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::WebKitCSSMatrix_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- WebKitCSSTransformValue ----------- */

namespace WebKit {
using namespace WebCore;

static int
WebKitCSSTransformValue_init(WebKitCSSTransformValue *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMCSSValueList_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corewebkitcsstransformvalue__get_operationType(PyObject *self, void *closure)
{
    int ret;

    ret = coreWebKitCSSTransformValue((PyDOMObject*)(self))->operationType();
    return PyInt_FromLong(ret);
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corewebkitcsstransformvalue_getsets[] = {
    { (char*)"operationType", (getter)WebKit::_wrap_corewebkitcsstransformvalue__get_operationType, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_WebKitCSSTransformValue(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::WebKitCSSTransformValue* cobj = coreWebKitCSSTransformValue(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMWebKitCSSTransformValue_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.WebKitCSSTransformValue",                   /* tp_name */
    sizeof(PyDOMWebKitCSSTransformValue),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_WebKitCSSTransformValue,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corewebkitcsstransformvalue_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::WebKitCSSTransformValue_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- StorageEvent ----------- */

namespace WebKit {
using namespace WebCore;

static int
StorageEvent_init(StorageEvent *self, PyObject *args, PyObject *kwds)
{
    if (PyDOMEvent_Type.tp_init((PyObject *)self, args, kwds) < 0)
        return -1;
    return 0;
}
static PyObject *
_wrap_corestorageevent__get_key(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreStorageEvent((PyDOMObject*)(self))->key();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corestorageevent__get_oldValue(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreStorageEvent((PyDOMObject*)(self))->oldValue();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corestorageevent__get_newValue(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreStorageEvent((PyDOMObject*)(self))->newValue();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

static PyObject *
_wrap_corestorageevent__get_url(PyObject *self, void *closure)
{
    char *_ret;
    WTF::String ret;

    ret = coreStorageEvent((PyDOMObject*)(self))->url();
    _ret = cpUTF8(ret);
    PyObject *py_ret = PyString_FromString(_ret);
    free(_ret);
    return py_ret;
}

} // namespace WebKit
extern "C" {

static const PyGetSetDef corestorageevent_getsets[] = {
    { (char*)"key", (getter)WebKit::_wrap_corestorageevent__get_key, (setter)0, 0, 0 },
    { (char*)"oldValue", (getter)WebKit::_wrap_corestorageevent__get_oldValue, (setter)0, 0, 0 },
    { (char*)"newValue", (getter)WebKit::_wrap_corestorageevent__get_newValue, (setter)0, 0, 0 },
    { (char*)"url", (getter)WebKit::_wrap_corestorageevent__get_url, (setter)0, 0, 0 },
    { NULL, (getter)0, (setter)0, NULL, NULL },
};

}; // extern "C"
namespace WebKit {
using namespace WebCore;

void dealloc_StorageEvent(PyObject *self)
{
    PyDOMObject *obj = (PyDOMObject*)self;
    WebCore::StorageEvent* cobj = coreStorageEvent(obj);
    WebKit::PythonObjectCache::forgetDOMObject(cobj);
    cobj->deref();
    self->ob_type->tp_free(self);
}

} // namespace WebKit
extern "C" {

PyTypeObject G_GNUC_INTERNAL PyDOMStorageEvent_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "pywebkit.StorageEvent",                   /* tp_name */
    sizeof(PyDOMStorageEvent),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)WebKit::dealloc_StorageEvent,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)corestorageevent_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)WebKit::StorageEvent_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)DOMObject_new,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0,              /* tp_is_gc */
    0,                                 /* tp_bases */
    0,                                 /* tp_mro */
    0,                                 /* tp_cache */
    0,                                 /* tp_subclasses */
    0,                                 /* tp_weaklist */
    0,                                 /* tp_del */
    0                                  /* tp_version_tag */
};

}; // extern "C"



/* ----------- functions ----------- */

extern "C" {

/* initialise stuff extension classes */
void typedeclpywebkit(void)
{
    if (PyType_Ready(&PyDOMObject_Type) < 0) return;

    PtrPyDOMClientRect_Type = &PyDOMClientRect_Type;
    PyDOMClientRect_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMClientRect_Type) < 0) {
        return;
    }
    PtrPyDOMClientRectList_Type = &PyDOMClientRectList_Type;
    PyDOMClientRectList_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMClientRectList_Type) < 0) {
        return;
    }
    PtrPyDOMDOMCoreException_Type = &PyDOMDOMCoreException_Type;
    PyDOMDOMCoreException_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMDOMCoreException_Type) < 0) {
        return;
    }
    PtrPyDOMDOMImplementation_Type = &PyDOMDOMImplementation_Type;
    PyDOMDOMImplementation_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMDOMImplementation_Type) < 0) {
        return;
    }
    PtrPyDOMDOMStringList_Type = &PyDOMDOMStringList_Type;
    PyDOMDOMStringList_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMDOMStringList_Type) < 0) {
        return;
    }
    PtrPyDOMDOMStringMap_Type = &PyDOMDOMStringMap_Type;
    PyDOMDOMStringMap_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMDOMStringMap_Type) < 0) {
        return;
    }
    PtrPyDOMEventException_Type = &PyDOMEventException_Type;
    PyDOMEventException_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMEventException_Type) < 0) {
        return;
    }
    PtrPyDOMEvent_Type = &PyDOMEvent_Type;
    PyDOMEvent_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMEvent_Type) < 0) {
        return;
    }
    PtrPyDOMErrorEvent_Type = &PyDOMErrorEvent_Type;
    PyDOMErrorEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMErrorEvent_Type) < 0) {
        return;
    }
    PtrPyDOMCustomEvent_Type = &PyDOMCustomEvent_Type;
    PyDOMCustomEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMCustomEvent_Type) < 0) {
        return;
    }
    PtrPyDOMBeforeProcessEvent_Type = &PyDOMBeforeProcessEvent_Type;
    PyDOMBeforeProcessEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMBeforeProcessEvent_Type) < 0) {
        return;
    }
    PtrPyDOMBeforeLoadEvent_Type = &PyDOMBeforeLoadEvent_Type;
    PyDOMBeforeLoadEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMBeforeLoadEvent_Type) < 0) {
        return;
    }
    PtrPyDOMEventListener_Type = &PyDOMEventListener_Type;
    PyDOMEventListener_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMEventListener_Type) < 0) {
        return;
    }
    PtrPyDOMEventTarget_Type = &PyDOMEventTarget_Type;
    PyDOMEventTarget_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMEventTarget_Type) < 0) {
        return;
    }
    PtrPyDOMHashChangeEvent_Type = &PyDOMHashChangeEvent_Type;
    PyDOMHashChangeEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMHashChangeEvent_Type) < 0) {
        return;
    }
    PtrPyDOMMessageChannel_Type = &PyDOMMessageChannel_Type;
    PyDOMMessageChannel_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMMessageChannel_Type) < 0) {
        return;
    }
    PtrPyDOMMessageEvent_Type = &PyDOMMessageEvent_Type;
    PyDOMMessageEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMMessageEvent_Type) < 0) {
        return;
    }
    PtrPyDOMMessagePort_Type = &PyDOMMessagePort_Type;
    PyDOMMessagePort_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMMessagePort_Type) < 0) {
        return;
    }
    PtrPyDOMMutationEvent_Type = &PyDOMMutationEvent_Type;
    PyDOMMutationEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMMutationEvent_Type) < 0) {
        return;
    }
    PtrPyDOMNamedNodeMap_Type = &PyDOMNamedNodeMap_Type;
    PyDOMNamedNodeMap_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMNamedNodeMap_Type) < 0) {
        return;
    }
    PtrPyDOMNodeFilter_Type = &PyDOMNodeFilter_Type;
    PyDOMNodeFilter_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMNodeFilter_Type) < 0) {
        return;
    }
    PtrPyDOMNode_Type = &PyDOMNode_Type;
    PyDOMNode_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMNode_Type) < 0) {
        return;
    }
    PtrPyDOMEntityReference_Type = &PyDOMEntityReference_Type;
    PyDOMEntityReference_Type.tp_base = &PyDOMNode_Type;
    if (PyType_Ready(&PyDOMEntityReference_Type) < 0) {
        return;
    }
    PtrPyDOMEntity_Type = &PyDOMEntity_Type;
    PyDOMEntity_Type.tp_base = &PyDOMNode_Type;
    if (PyType_Ready(&PyDOMEntity_Type) < 0) {
        return;
    }
    PtrPyDOMElement_Type = &PyDOMElement_Type;
    PyDOMElement_Type.tp_base = &PyDOMNode_Type;
    if (PyType_Ready(&PyDOMElement_Type) < 0) {
        return;
    }
    PtrPyDOMDocumentType_Type = &PyDOMDocumentType_Type;
    PyDOMDocumentType_Type.tp_base = &PyDOMNode_Type;
    if (PyType_Ready(&PyDOMDocumentType_Type) < 0) {
        return;
    }
    PtrPyDOMDocument_Type = &PyDOMDocument_Type;
    PyDOMDocument_Type.tp_base = &PyDOMNode_Type;
    if (PyType_Ready(&PyDOMDocument_Type) < 0) {
        return;
    }
    PtrPyDOMDocumentFragment_Type = &PyDOMDocumentFragment_Type;
    PyDOMDocumentFragment_Type.tp_base = &PyDOMNode_Type;
    if (PyType_Ready(&PyDOMDocumentFragment_Type) < 0) {
        return;
    }
    PtrPyDOMCharacterData_Type = &PyDOMCharacterData_Type;
    PyDOMCharacterData_Type.tp_base = &PyDOMNode_Type;
    if (PyType_Ready(&PyDOMCharacterData_Type) < 0) {
        return;
    }
    PtrPyDOMComment_Type = &PyDOMComment_Type;
    PyDOMComment_Type.tp_base = &PyDOMCharacterData_Type;
    if (PyType_Ready(&PyDOMComment_Type) < 0) {
        return;
    }
    PtrPyDOMAttr_Type = &PyDOMAttr_Type;
    PyDOMAttr_Type.tp_base = &PyDOMNode_Type;
    if (PyType_Ready(&PyDOMAttr_Type) < 0) {
        return;
    }
    PtrPyDOMNodeIterator_Type = &PyDOMNodeIterator_Type;
    PyDOMNodeIterator_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMNodeIterator_Type) < 0) {
        return;
    }
    PtrPyDOMNodeList_Type = &PyDOMNodeList_Type;
    PyDOMNodeList_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMNodeList_Type) < 0) {
        return;
    }
    PtrPyDOMNotation_Type = &PyDOMNotation_Type;
    PyDOMNotation_Type.tp_base = &PyDOMNode_Type;
    if (PyType_Ready(&PyDOMNotation_Type) < 0) {
        return;
    }
    PtrPyDOMOverflowEvent_Type = &PyDOMOverflowEvent_Type;
    PyDOMOverflowEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMOverflowEvent_Type) < 0) {
        return;
    }
    PtrPyDOMPageTransitionEvent_Type = &PyDOMPageTransitionEvent_Type;
    PyDOMPageTransitionEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMPageTransitionEvent_Type) < 0) {
        return;
    }
    PtrPyDOMPopStateEvent_Type = &PyDOMPopStateEvent_Type;
    PyDOMPopStateEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMPopStateEvent_Type) < 0) {
        return;
    }
    PtrPyDOMProcessingInstruction_Type = &PyDOMProcessingInstruction_Type;
    PyDOMProcessingInstruction_Type.tp_base = &PyDOMNode_Type;
    if (PyType_Ready(&PyDOMProcessingInstruction_Type) < 0) {
        return;
    }
    PtrPyDOMProgressEvent_Type = &PyDOMProgressEvent_Type;
    PyDOMProgressEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMProgressEvent_Type) < 0) {
        return;
    }
    PtrPyDOMRangeException_Type = &PyDOMRangeException_Type;
    PyDOMRangeException_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMRangeException_Type) < 0) {
        return;
    }
    PtrPyDOMRange_Type = &PyDOMRange_Type;
    PyDOMRange_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMRange_Type) < 0) {
        return;
    }
    PtrPyDOMText_Type = &PyDOMText_Type;
    PyDOMText_Type.tp_base = &PyDOMCharacterData_Type;
    if (PyType_Ready(&PyDOMText_Type) < 0) {
        return;
    }
    PtrPyDOMCDATASection_Type = &PyDOMCDATASection_Type;
    PyDOMCDATASection_Type.tp_base = &PyDOMText_Type;
    if (PyType_Ready(&PyDOMCDATASection_Type) < 0) {
        return;
    }
    PtrPyDOMTreeWalker_Type = &PyDOMTreeWalker_Type;
    PyDOMTreeWalker_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMTreeWalker_Type) < 0) {
        return;
    }
    PtrPyDOMUIEvent_Type = &PyDOMUIEvent_Type;
    PyDOMUIEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMUIEvent_Type) < 0) {
        return;
    }
    PtrPyDOMTextEvent_Type = &PyDOMTextEvent_Type;
    PyDOMTextEvent_Type.tp_base = &PyDOMUIEvent_Type;
    if (PyType_Ready(&PyDOMTextEvent_Type) < 0) {
        return;
    }
    PtrPyDOMMouseEvent_Type = &PyDOMMouseEvent_Type;
    PyDOMMouseEvent_Type.tp_base = &PyDOMUIEvent_Type;
    if (PyType_Ready(&PyDOMMouseEvent_Type) < 0) {
        return;
    }
    PtrPyDOMKeyboardEvent_Type = &PyDOMKeyboardEvent_Type;
    PyDOMKeyboardEvent_Type.tp_base = &PyDOMUIEvent_Type;
    if (PyType_Ready(&PyDOMKeyboardEvent_Type) < 0) {
        return;
    }
    PtrPyDOMCompositionEvent_Type = &PyDOMCompositionEvent_Type;
    PyDOMCompositionEvent_Type.tp_base = &PyDOMUIEvent_Type;
    if (PyType_Ready(&PyDOMCompositionEvent_Type) < 0) {
        return;
    }
    PtrPyDOMWebKitAnimationEvent_Type = &PyDOMWebKitAnimationEvent_Type;
    PyDOMWebKitAnimationEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMWebKitAnimationEvent_Type) < 0) {
        return;
    }
    PtrPyDOMWebKitTransitionEvent_Type = &PyDOMWebKitTransitionEvent_Type;
    PyDOMWebKitTransitionEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMWebKitTransitionEvent_Type) < 0) {
        return;
    }
    PtrPyDOMWheelEvent_Type = &PyDOMWheelEvent_Type;
    PyDOMWheelEvent_Type.tp_base = &PyDOMUIEvent_Type;
    if (PyType_Ready(&PyDOMWheelEvent_Type) < 0) {
        return;
    }
    PtrPyDOMDOMFormData_Type = &PyDOMDOMFormData_Type;
    PyDOMDOMFormData_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMDOMFormData_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLAllCollection_Type = &PyDOMHTMLAllCollection_Type;
    PyDOMHTMLAllCollection_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMHTMLAllCollection_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLCollection_Type = &PyDOMHTMLCollection_Type;
    PyDOMHTMLCollection_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMHTMLCollection_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLDocument_Type = &PyDOMHTMLDocument_Type;
    PyDOMHTMLDocument_Type.tp_base = &PyDOMDocument_Type;
    if (PyType_Ready(&PyDOMHTMLDocument_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLElement_Type = &PyDOMHTMLElement_Type;
    PyDOMHTMLElement_Type.tp_base = &PyDOMElement_Type;
    if (PyType_Ready(&PyDOMHTMLElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLDListElement_Type = &PyDOMHTMLDListElement_Type;
    PyDOMHTMLDListElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLDListElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLDivElement_Type = &PyDOMHTMLDivElement_Type;
    PyDOMHTMLDivElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLDivElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLDirectoryElement_Type = &PyDOMHTMLDirectoryElement_Type;
    PyDOMHTMLDirectoryElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLDirectoryElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLDataListElement_Type = &PyDOMHTMLDataListElement_Type;
    PyDOMHTMLDataListElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLDataListElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLCanvasElement_Type = &PyDOMHTMLCanvasElement_Type;
    PyDOMHTMLCanvasElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLCanvasElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLButtonElement_Type = &PyDOMHTMLButtonElement_Type;
    PyDOMHTMLButtonElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLButtonElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLBRElement_Type = &PyDOMHTMLBRElement_Type;
    PyDOMHTMLBRElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLBRElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLBodyElement_Type = &PyDOMHTMLBodyElement_Type;
    PyDOMHTMLBodyElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLBodyElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLBlockquoteElement_Type = &PyDOMHTMLBlockquoteElement_Type;
    PyDOMHTMLBlockquoteElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLBlockquoteElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLBaseFontElement_Type = &PyDOMHTMLBaseFontElement_Type;
    PyDOMHTMLBaseFontElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLBaseFontElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLBaseElement_Type = &PyDOMHTMLBaseElement_Type;
    PyDOMHTMLBaseElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLBaseElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLAreaElement_Type = &PyDOMHTMLAreaElement_Type;
    PyDOMHTMLAreaElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLAreaElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLAppletElement_Type = &PyDOMHTMLAppletElement_Type;
    PyDOMHTMLAppletElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLAppletElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLAnchorElement_Type = &PyDOMHTMLAnchorElement_Type;
    PyDOMHTMLAnchorElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLAnchorElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLEmbedElement_Type = &PyDOMHTMLEmbedElement_Type;
    PyDOMHTMLEmbedElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLEmbedElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLFieldSetElement_Type = &PyDOMHTMLFieldSetElement_Type;
    PyDOMHTMLFieldSetElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLFieldSetElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLFontElement_Type = &PyDOMHTMLFontElement_Type;
    PyDOMHTMLFontElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLFontElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLFormElement_Type = &PyDOMHTMLFormElement_Type;
    PyDOMHTMLFormElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLFormElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLFrameElement_Type = &PyDOMHTMLFrameElement_Type;
    PyDOMHTMLFrameElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLFrameElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLFrameSetElement_Type = &PyDOMHTMLFrameSetElement_Type;
    PyDOMHTMLFrameSetElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLFrameSetElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLHeadElement_Type = &PyDOMHTMLHeadElement_Type;
    PyDOMHTMLHeadElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLHeadElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLHeadingElement_Type = &PyDOMHTMLHeadingElement_Type;
    PyDOMHTMLHeadingElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLHeadingElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLHRElement_Type = &PyDOMHTMLHRElement_Type;
    PyDOMHTMLHRElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLHRElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLHtmlElement_Type = &PyDOMHTMLHtmlElement_Type;
    PyDOMHTMLHtmlElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLHtmlElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLIFrameElement_Type = &PyDOMHTMLIFrameElement_Type;
    PyDOMHTMLIFrameElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLIFrameElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLImageElement_Type = &PyDOMHTMLImageElement_Type;
    PyDOMHTMLImageElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLImageElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLInputElement_Type = &PyDOMHTMLInputElement_Type;
    PyDOMHTMLInputElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLInputElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLIsIndexElement_Type = &PyDOMHTMLIsIndexElement_Type;
    PyDOMHTMLIsIndexElement_Type.tp_base = &PyDOMHTMLInputElement_Type;
    if (PyType_Ready(&PyDOMHTMLIsIndexElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLLabelElement_Type = &PyDOMHTMLLabelElement_Type;
    PyDOMHTMLLabelElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLLabelElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLLegendElement_Type = &PyDOMHTMLLegendElement_Type;
    PyDOMHTMLLegendElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLLegendElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLLIElement_Type = &PyDOMHTMLLIElement_Type;
    PyDOMHTMLLIElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLLIElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLLinkElement_Type = &PyDOMHTMLLinkElement_Type;
    PyDOMHTMLLinkElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLLinkElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLMapElement_Type = &PyDOMHTMLMapElement_Type;
    PyDOMHTMLMapElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLMapElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLMarqueeElement_Type = &PyDOMHTMLMarqueeElement_Type;
    PyDOMHTMLMarqueeElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLMarqueeElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLMediaElement_Type = &PyDOMHTMLMediaElement_Type;
    PyDOMHTMLMediaElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLMediaElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLAudioElement_Type = &PyDOMHTMLAudioElement_Type;
    PyDOMHTMLAudioElement_Type.tp_base = &PyDOMHTMLMediaElement_Type;
    if (PyType_Ready(&PyDOMHTMLAudioElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLMenuElement_Type = &PyDOMHTMLMenuElement_Type;
    PyDOMHTMLMenuElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLMenuElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLMetaElement_Type = &PyDOMHTMLMetaElement_Type;
    PyDOMHTMLMetaElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLMetaElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLModElement_Type = &PyDOMHTMLModElement_Type;
    PyDOMHTMLModElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLModElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLObjectElement_Type = &PyDOMHTMLObjectElement_Type;
    PyDOMHTMLObjectElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLObjectElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLOListElement_Type = &PyDOMHTMLOListElement_Type;
    PyDOMHTMLOListElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLOListElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLOptGroupElement_Type = &PyDOMHTMLOptGroupElement_Type;
    PyDOMHTMLOptGroupElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLOptGroupElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLOptionElement_Type = &PyDOMHTMLOptionElement_Type;
    PyDOMHTMLOptionElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLOptionElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLOptionsCollection_Type = &PyDOMHTMLOptionsCollection_Type;
    PyDOMHTMLOptionsCollection_Type.tp_base = &PyDOMHTMLCollection_Type;
    if (PyType_Ready(&PyDOMHTMLOptionsCollection_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLParagraphElement_Type = &PyDOMHTMLParagraphElement_Type;
    PyDOMHTMLParagraphElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLParagraphElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLParamElement_Type = &PyDOMHTMLParamElement_Type;
    PyDOMHTMLParamElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLParamElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLPreElement_Type = &PyDOMHTMLPreElement_Type;
    PyDOMHTMLPreElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLPreElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLProgressElement_Type = &PyDOMHTMLProgressElement_Type;
    PyDOMHTMLProgressElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLProgressElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLQuoteElement_Type = &PyDOMHTMLQuoteElement_Type;
    PyDOMHTMLQuoteElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLQuoteElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLScriptElement_Type = &PyDOMHTMLScriptElement_Type;
    PyDOMHTMLScriptElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLScriptElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLSelectElement_Type = &PyDOMHTMLSelectElement_Type;
    PyDOMHTMLSelectElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLSelectElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLSourceElement_Type = &PyDOMHTMLSourceElement_Type;
    PyDOMHTMLSourceElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLSourceElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLStyleElement_Type = &PyDOMHTMLStyleElement_Type;
    PyDOMHTMLStyleElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLStyleElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLTableCaptionElement_Type = &PyDOMHTMLTableCaptionElement_Type;
    PyDOMHTMLTableCaptionElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLTableCaptionElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLTableCellElement_Type = &PyDOMHTMLTableCellElement_Type;
    PyDOMHTMLTableCellElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLTableCellElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLTableColElement_Type = &PyDOMHTMLTableColElement_Type;
    PyDOMHTMLTableColElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLTableColElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLTableElement_Type = &PyDOMHTMLTableElement_Type;
    PyDOMHTMLTableElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLTableElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLTableRowElement_Type = &PyDOMHTMLTableRowElement_Type;
    PyDOMHTMLTableRowElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLTableRowElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLTableSectionElement_Type = &PyDOMHTMLTableSectionElement_Type;
    PyDOMHTMLTableSectionElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLTableSectionElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLTextAreaElement_Type = &PyDOMHTMLTextAreaElement_Type;
    PyDOMHTMLTextAreaElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLTextAreaElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLTitleElement_Type = &PyDOMHTMLTitleElement_Type;
    PyDOMHTMLTitleElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLTitleElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLUListElement_Type = &PyDOMHTMLUListElement_Type;
    PyDOMHTMLUListElement_Type.tp_base = &PyDOMHTMLElement_Type;
    if (PyType_Ready(&PyDOMHTMLUListElement_Type) < 0) {
        return;
    }
    PtrPyDOMHTMLVideoElement_Type = &PyDOMHTMLVideoElement_Type;
    PyDOMHTMLVideoElement_Type.tp_base = &PyDOMHTMLMediaElement_Type;
    if (PyType_Ready(&PyDOMHTMLVideoElement_Type) < 0) {
        return;
    }
    PtrPyDOMImageData_Type = &PyDOMImageData_Type;
    PyDOMImageData_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMImageData_Type) < 0) {
        return;
    }
    PtrPyDOMMediaError_Type = &PyDOMMediaError_Type;
    PyDOMMediaError_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMMediaError_Type) < 0) {
        return;
    }
    PtrPyDOMTextMetrics_Type = &PyDOMTextMetrics_Type;
    PyDOMTextMetrics_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMTextMetrics_Type) < 0) {
        return;
    }
    PtrPyDOMTimeRanges_Type = &PyDOMTimeRanges_Type;
    PyDOMTimeRanges_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMTimeRanges_Type) < 0) {
        return;
    }
    PtrPyDOMValidityState_Type = &PyDOMValidityState_Type;
    PyDOMValidityState_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMValidityState_Type) < 0) {
        return;
    }
    PtrPyDOMVoidCallback_Type = &PyDOMVoidCallback_Type;
    PyDOMVoidCallback_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMVoidCallback_Type) < 0) {
        return;
    }
    PtrPyDOMXMLHttpRequestException_Type = &PyDOMXMLHttpRequestException_Type;
    PyDOMXMLHttpRequestException_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMXMLHttpRequestException_Type) < 0) {
        return;
    }
    PtrPyDOMXMLHttpRequest_Type = &PyDOMXMLHttpRequest_Type;
    PyDOMXMLHttpRequest_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMXMLHttpRequest_Type) < 0) {
        return;
    }
    PtrPyDOMXMLHttpRequestProgressEvent_Type = &PyDOMXMLHttpRequestProgressEvent_Type;
    PyDOMXMLHttpRequestProgressEvent_Type.tp_base = &PyDOMProgressEvent_Type;
    if (PyType_Ready(&PyDOMXMLHttpRequestProgressEvent_Type) < 0) {
        return;
    }
    PtrPyDOMXMLHttpRequestUpload_Type = &PyDOMXMLHttpRequestUpload_Type;
    PyDOMXMLHttpRequestUpload_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMXMLHttpRequestUpload_Type) < 0) {
        return;
    }
    PtrPyDOMBarInfo_Type = &PyDOMBarInfo_Type;
    PyDOMBarInfo_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMBarInfo_Type) < 0) {
        return;
    }
    PtrPyDOMCoordinates_Type = &PyDOMCoordinates_Type;
    PyDOMCoordinates_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMCoordinates_Type) < 0) {
        return;
    }
    PtrPyDOMDOMSelection_Type = &PyDOMDOMSelection_Type;
    PyDOMDOMSelection_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMDOMSelection_Type) < 0) {
        return;
    }
    PtrPyDOMDOMWindow_Type = &PyDOMDOMWindow_Type;
    PyDOMDOMWindow_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMDOMWindow_Type) < 0) {
        return;
    }
    PtrPyDOMEventSource_Type = &PyDOMEventSource_Type;
    PyDOMEventSource_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMEventSource_Type) < 0) {
        return;
    }
    PtrPyDOMGeolocation_Type = &PyDOMGeolocation_Type;
    PyDOMGeolocation_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMGeolocation_Type) < 0) {
        return;
    }
    PtrPyDOMGeoposition_Type = &PyDOMGeoposition_Type;
    PyDOMGeoposition_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMGeoposition_Type) < 0) {
        return;
    }
    PtrPyDOMHistory_Type = &PyDOMHistory_Type;
    PyDOMHistory_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMHistory_Type) < 0) {
        return;
    }
    PtrPyDOMLocation_Type = &PyDOMLocation_Type;
    PyDOMLocation_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMLocation_Type) < 0) {
        return;
    }
    PtrPyDOMNavigator_Type = &PyDOMNavigator_Type;
    PyDOMNavigator_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMNavigator_Type) < 0) {
        return;
    }
    PtrPyDOMPositionError_Type = &PyDOMPositionError_Type;
    PyDOMPositionError_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMPositionError_Type) < 0) {
        return;
    }
    PtrPyDOMScreen_Type = &PyDOMScreen_Type;
    PyDOMScreen_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMScreen_Type) < 0) {
        return;
    }
    PtrPyDOMWebKitPoint_Type = &PyDOMWebKitPoint_Type;
    PyDOMWebKitPoint_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMWebKitPoint_Type) < 0) {
        return;
    }
    PtrPyDOMWorkerNavigator_Type = &PyDOMWorkerNavigator_Type;
    PyDOMWorkerNavigator_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMWorkerNavigator_Type) < 0) {
        return;
    }
    PtrPyDOMCounter_Type = &PyDOMCounter_Type;
    PyDOMCounter_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMCounter_Type) < 0) {
        return;
    }
    PtrPyDOMCSSRule_Type = &PyDOMCSSRule_Type;
    PyDOMCSSRule_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMCSSRule_Type) < 0) {
        return;
    }
    PtrPyDOMCSSPageRule_Type = &PyDOMCSSPageRule_Type;
    PyDOMCSSPageRule_Type.tp_base = &PyDOMCSSRule_Type;
    if (PyType_Ready(&PyDOMCSSPageRule_Type) < 0) {
        return;
    }
    PtrPyDOMCSSMediaRule_Type = &PyDOMCSSMediaRule_Type;
    PyDOMCSSMediaRule_Type.tp_base = &PyDOMCSSRule_Type;
    if (PyType_Ready(&PyDOMCSSMediaRule_Type) < 0) {
        return;
    }
    PtrPyDOMCSSImportRule_Type = &PyDOMCSSImportRule_Type;
    PyDOMCSSImportRule_Type.tp_base = &PyDOMCSSRule_Type;
    if (PyType_Ready(&PyDOMCSSImportRule_Type) < 0) {
        return;
    }
    PtrPyDOMCSSFontFaceRule_Type = &PyDOMCSSFontFaceRule_Type;
    PyDOMCSSFontFaceRule_Type.tp_base = &PyDOMCSSRule_Type;
    if (PyType_Ready(&PyDOMCSSFontFaceRule_Type) < 0) {
        return;
    }
    PtrPyDOMCSSCharsetRule_Type = &PyDOMCSSCharsetRule_Type;
    PyDOMCSSCharsetRule_Type.tp_base = &PyDOMCSSRule_Type;
    if (PyType_Ready(&PyDOMCSSCharsetRule_Type) < 0) {
        return;
    }
    PtrPyDOMCSSRuleList_Type = &PyDOMCSSRuleList_Type;
    PyDOMCSSRuleList_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMCSSRuleList_Type) < 0) {
        return;
    }
    PtrPyDOMCSSStyleDeclaration_Type = &PyDOMCSSStyleDeclaration_Type;
    PyDOMCSSStyleDeclaration_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMCSSStyleDeclaration_Type) < 0) {
        return;
    }
    PtrPyDOMCSSStyleRule_Type = &PyDOMCSSStyleRule_Type;
    PyDOMCSSStyleRule_Type.tp_base = &PyDOMCSSRule_Type;
    if (PyType_Ready(&PyDOMCSSStyleRule_Type) < 0) {
        return;
    }
    PtrPyDOMCSSUnknownRule_Type = &PyDOMCSSUnknownRule_Type;
    PyDOMCSSUnknownRule_Type.tp_base = &PyDOMCSSRule_Type;
    if (PyType_Ready(&PyDOMCSSUnknownRule_Type) < 0) {
        return;
    }
    PtrPyDOMCSSValue_Type = &PyDOMCSSValue_Type;
    PyDOMCSSValue_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMCSSValue_Type) < 0) {
        return;
    }
    PtrPyDOMCSSPrimitiveValue_Type = &PyDOMCSSPrimitiveValue_Type;
    PyDOMCSSPrimitiveValue_Type.tp_base = &PyDOMCSSValue_Type;
    if (PyType_Ready(&PyDOMCSSPrimitiveValue_Type) < 0) {
        return;
    }
    PtrPyDOMCSSValueList_Type = &PyDOMCSSValueList_Type;
    PyDOMCSSValueList_Type.tp_base = &PyDOMCSSValue_Type;
    if (PyType_Ready(&PyDOMCSSValueList_Type) < 0) {
        return;
    }
    PtrPyDOMMediaList_Type = &PyDOMMediaList_Type;
    PyDOMMediaList_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMMediaList_Type) < 0) {
        return;
    }
    PtrPyDOMRect_Type = &PyDOMRect_Type;
    PyDOMRect_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMRect_Type) < 0) {
        return;
    }
    PtrPyDOMRGBColor_Type = &PyDOMRGBColor_Type;
    PyDOMRGBColor_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMRGBColor_Type) < 0) {
        return;
    }
    PtrPyDOMStyleMedia_Type = &PyDOMStyleMedia_Type;
    PyDOMStyleMedia_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMStyleMedia_Type) < 0) {
        return;
    }
    PtrPyDOMStyleSheet_Type = &PyDOMStyleSheet_Type;
    PyDOMStyleSheet_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMStyleSheet_Type) < 0) {
        return;
    }
    PtrPyDOMCSSStyleSheet_Type = &PyDOMCSSStyleSheet_Type;
    PyDOMCSSStyleSheet_Type.tp_base = &PyDOMStyleSheet_Type;
    if (PyType_Ready(&PyDOMCSSStyleSheet_Type) < 0) {
        return;
    }
    PtrPyDOMStyleSheetList_Type = &PyDOMStyleSheetList_Type;
    PyDOMStyleSheetList_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMStyleSheetList_Type) < 0) {
        return;
    }
    PtrPyDOMWebKitCSSKeyframeRule_Type = &PyDOMWebKitCSSKeyframeRule_Type;
    PyDOMWebKitCSSKeyframeRule_Type.tp_base = &PyDOMCSSRule_Type;
    if (PyType_Ready(&PyDOMWebKitCSSKeyframeRule_Type) < 0) {
        return;
    }
    PtrPyDOMWebKitCSSKeyframesRule_Type = &PyDOMWebKitCSSKeyframesRule_Type;
    PyDOMWebKitCSSKeyframesRule_Type.tp_base = &PyDOMCSSRule_Type;
    if (PyType_Ready(&PyDOMWebKitCSSKeyframesRule_Type) < 0) {
        return;
    }
    PtrPyDOMWebKitCSSMatrix_Type = &PyDOMWebKitCSSMatrix_Type;
    PyDOMWebKitCSSMatrix_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMWebKitCSSMatrix_Type) < 0) {
        return;
    }
    PtrPyDOMWebKitCSSTransformValue_Type = &PyDOMWebKitCSSTransformValue_Type;
    PyDOMWebKitCSSTransformValue_Type.tp_base = &PyDOMCSSValueList_Type;
    if (PyType_Ready(&PyDOMWebKitCSSTransformValue_Type) < 0) {
        return;
    }
    PtrPyDOMStorageEvent_Type = &PyDOMStorageEvent_Type;
    PyDOMStorageEvent_Type.tp_base = &PyDOMEvent_Type;
    if (PyType_Ready(&PyDOMStorageEvent_Type) < 0) {
        return;
    }
}

void registerpywebkit(PyObject *m)
{

    Py_INCREF(&PyDOMObject_Type);
    PyModule_AddObject(m, "DOMObject", (PyObject *) &PyDOMObject_Type);


    PtrPyDOMScheduledActionBase_Type = &PyDOMScheduledActionBase_Type;
    PyDOMScheduledActionBase_Type.tp_base = &PyDOMObject_Type;
    if (PyType_Ready(&PyDOMScheduledActionBase_Type) < 0) {
        return;
    }

    Py_INCREF(&PyDOMScheduledActionBase_Type);
    PyModule_AddObject(m, "ScheduledActionBase", (PyObject*) &PyDOMScheduledActionBase_Type);


    Py_INCREF(&PyDOMClientRect_Type);
    PyModule_AddObject(m, "ClientRect", (PyObject*) &PyDOMClientRect_Type);
    Py_INCREF(&PyDOMClientRectList_Type);
    PyModule_AddObject(m, "ClientRectList", (PyObject*) &PyDOMClientRectList_Type);
    Py_INCREF(&PyDOMDOMCoreException_Type);
    PyModule_AddObject(m, "DOMCoreException", (PyObject*) &PyDOMDOMCoreException_Type);
    Py_INCREF(&PyDOMDOMImplementation_Type);
    PyModule_AddObject(m, "DOMImplementation", (PyObject*) &PyDOMDOMImplementation_Type);
    Py_INCREF(&PyDOMDOMStringList_Type);
    PyModule_AddObject(m, "DOMStringList", (PyObject*) &PyDOMDOMStringList_Type);
    Py_INCREF(&PyDOMDOMStringMap_Type);
    PyModule_AddObject(m, "DOMStringMap", (PyObject*) &PyDOMDOMStringMap_Type);
    Py_INCREF(&PyDOMEventException_Type);
    PyModule_AddObject(m, "EventException", (PyObject*) &PyDOMEventException_Type);
    Py_INCREF(&PyDOMEvent_Type);
    PyModule_AddObject(m, "Event", (PyObject*) &PyDOMEvent_Type);
    Py_INCREF(&PyDOMErrorEvent_Type);
    PyModule_AddObject(m, "ErrorEvent", (PyObject*) &PyDOMErrorEvent_Type);
    Py_INCREF(&PyDOMCustomEvent_Type);
    PyModule_AddObject(m, "CustomEvent", (PyObject*) &PyDOMCustomEvent_Type);
    Py_INCREF(&PyDOMBeforeProcessEvent_Type);
    PyModule_AddObject(m, "BeforeProcessEvent", (PyObject*) &PyDOMBeforeProcessEvent_Type);
    Py_INCREF(&PyDOMBeforeLoadEvent_Type);
    PyModule_AddObject(m, "BeforeLoadEvent", (PyObject*) &PyDOMBeforeLoadEvent_Type);
    Py_INCREF(&PyDOMEventListener_Type);
    PyModule_AddObject(m, "EventListener", (PyObject*) &PyDOMEventListener_Type);
    Py_INCREF(&PyDOMEventTarget_Type);
    PyModule_AddObject(m, "EventTarget", (PyObject*) &PyDOMEventTarget_Type);
    Py_INCREF(&PyDOMHashChangeEvent_Type);
    PyModule_AddObject(m, "HashChangeEvent", (PyObject*) &PyDOMHashChangeEvent_Type);
    Py_INCREF(&PyDOMMessageChannel_Type);
    PyModule_AddObject(m, "MessageChannel", (PyObject*) &PyDOMMessageChannel_Type);
    Py_INCREF(&PyDOMMessageEvent_Type);
    PyModule_AddObject(m, "MessageEvent", (PyObject*) &PyDOMMessageEvent_Type);
    Py_INCREF(&PyDOMMessagePort_Type);
    PyModule_AddObject(m, "MessagePort", (PyObject*) &PyDOMMessagePort_Type);
    Py_INCREF(&PyDOMMutationEvent_Type);
    PyModule_AddObject(m, "MutationEvent", (PyObject*) &PyDOMMutationEvent_Type);
    Py_INCREF(&PyDOMNamedNodeMap_Type);
    PyModule_AddObject(m, "NamedNodeMap", (PyObject*) &PyDOMNamedNodeMap_Type);
    Py_INCREF(&PyDOMNodeFilter_Type);
    PyModule_AddObject(m, "NodeFilter", (PyObject*) &PyDOMNodeFilter_Type);
    Py_INCREF(&PyDOMNode_Type);
    PyModule_AddObject(m, "Node", (PyObject*) &PyDOMNode_Type);
    Py_INCREF(&PyDOMEntityReference_Type);
    PyModule_AddObject(m, "EntityReference", (PyObject*) &PyDOMEntityReference_Type);
    Py_INCREF(&PyDOMEntity_Type);
    PyModule_AddObject(m, "Entity", (PyObject*) &PyDOMEntity_Type);
    Py_INCREF(&PyDOMElement_Type);
    PyModule_AddObject(m, "Element", (PyObject*) &PyDOMElement_Type);
    Py_INCREF(&PyDOMDocumentType_Type);
    PyModule_AddObject(m, "DocumentType", (PyObject*) &PyDOMDocumentType_Type);
    Py_INCREF(&PyDOMDocument_Type);
    PyModule_AddObject(m, "Document", (PyObject*) &PyDOMDocument_Type);
    Py_INCREF(&PyDOMDocumentFragment_Type);
    PyModule_AddObject(m, "DocumentFragment", (PyObject*) &PyDOMDocumentFragment_Type);
    Py_INCREF(&PyDOMCharacterData_Type);
    PyModule_AddObject(m, "CharacterData", (PyObject*) &PyDOMCharacterData_Type);
    Py_INCREF(&PyDOMComment_Type);
    PyModule_AddObject(m, "Comment", (PyObject*) &PyDOMComment_Type);
    Py_INCREF(&PyDOMAttr_Type);
    PyModule_AddObject(m, "Attr", (PyObject*) &PyDOMAttr_Type);
    Py_INCREF(&PyDOMNodeIterator_Type);
    PyModule_AddObject(m, "NodeIterator", (PyObject*) &PyDOMNodeIterator_Type);
    Py_INCREF(&PyDOMNodeList_Type);
    PyModule_AddObject(m, "NodeList", (PyObject*) &PyDOMNodeList_Type);
    Py_INCREF(&PyDOMNotation_Type);
    PyModule_AddObject(m, "Notation", (PyObject*) &PyDOMNotation_Type);
    Py_INCREF(&PyDOMOverflowEvent_Type);
    PyModule_AddObject(m, "OverflowEvent", (PyObject*) &PyDOMOverflowEvent_Type);
    Py_INCREF(&PyDOMPageTransitionEvent_Type);
    PyModule_AddObject(m, "PageTransitionEvent", (PyObject*) &PyDOMPageTransitionEvent_Type);
    Py_INCREF(&PyDOMPopStateEvent_Type);
    PyModule_AddObject(m, "PopStateEvent", (PyObject*) &PyDOMPopStateEvent_Type);
    Py_INCREF(&PyDOMProcessingInstruction_Type);
    PyModule_AddObject(m, "ProcessingInstruction", (PyObject*) &PyDOMProcessingInstruction_Type);
    Py_INCREF(&PyDOMProgressEvent_Type);
    PyModule_AddObject(m, "ProgressEvent", (PyObject*) &PyDOMProgressEvent_Type);
    Py_INCREF(&PyDOMRangeException_Type);
    PyModule_AddObject(m, "RangeException", (PyObject*) &PyDOMRangeException_Type);
    Py_INCREF(&PyDOMRange_Type);
    PyModule_AddObject(m, "Range", (PyObject*) &PyDOMRange_Type);
    Py_INCREF(&PyDOMText_Type);
    PyModule_AddObject(m, "Text", (PyObject*) &PyDOMText_Type);
    Py_INCREF(&PyDOMCDATASection_Type);
    PyModule_AddObject(m, "CDATASection", (PyObject*) &PyDOMCDATASection_Type);
    Py_INCREF(&PyDOMTreeWalker_Type);
    PyModule_AddObject(m, "TreeWalker", (PyObject*) &PyDOMTreeWalker_Type);
    Py_INCREF(&PyDOMUIEvent_Type);
    PyModule_AddObject(m, "UIEvent", (PyObject*) &PyDOMUIEvent_Type);
    Py_INCREF(&PyDOMTextEvent_Type);
    PyModule_AddObject(m, "TextEvent", (PyObject*) &PyDOMTextEvent_Type);
    Py_INCREF(&PyDOMMouseEvent_Type);
    PyModule_AddObject(m, "MouseEvent", (PyObject*) &PyDOMMouseEvent_Type);
    Py_INCREF(&PyDOMKeyboardEvent_Type);
    PyModule_AddObject(m, "KeyboardEvent", (PyObject*) &PyDOMKeyboardEvent_Type);
    Py_INCREF(&PyDOMCompositionEvent_Type);
    PyModule_AddObject(m, "CompositionEvent", (PyObject*) &PyDOMCompositionEvent_Type);
    Py_INCREF(&PyDOMWebKitAnimationEvent_Type);
    PyModule_AddObject(m, "WebKitAnimationEvent", (PyObject*) &PyDOMWebKitAnimationEvent_Type);
    Py_INCREF(&PyDOMWebKitTransitionEvent_Type);
    PyModule_AddObject(m, "WebKitTransitionEvent", (PyObject*) &PyDOMWebKitTransitionEvent_Type);
    Py_INCREF(&PyDOMWheelEvent_Type);
    PyModule_AddObject(m, "WheelEvent", (PyObject*) &PyDOMWheelEvent_Type);
    Py_INCREF(&PyDOMDOMFormData_Type);
    PyModule_AddObject(m, "DOMFormData", (PyObject*) &PyDOMDOMFormData_Type);
    Py_INCREF(&PyDOMHTMLAllCollection_Type);
    PyModule_AddObject(m, "HTMLAllCollection", (PyObject*) &PyDOMHTMLAllCollection_Type);
    Py_INCREF(&PyDOMHTMLCollection_Type);
    PyModule_AddObject(m, "HTMLCollection", (PyObject*) &PyDOMHTMLCollection_Type);
    Py_INCREF(&PyDOMHTMLDocument_Type);
    PyModule_AddObject(m, "HTMLDocument", (PyObject*) &PyDOMHTMLDocument_Type);
    Py_INCREF(&PyDOMHTMLElement_Type);
    PyModule_AddObject(m, "HTMLElement", (PyObject*) &PyDOMHTMLElement_Type);
    Py_INCREF(&PyDOMHTMLDListElement_Type);
    PyModule_AddObject(m, "HTMLDListElement", (PyObject*) &PyDOMHTMLDListElement_Type);
    Py_INCREF(&PyDOMHTMLDivElement_Type);
    PyModule_AddObject(m, "HTMLDivElement", (PyObject*) &PyDOMHTMLDivElement_Type);
    Py_INCREF(&PyDOMHTMLDirectoryElement_Type);
    PyModule_AddObject(m, "HTMLDirectoryElement", (PyObject*) &PyDOMHTMLDirectoryElement_Type);
    Py_INCREF(&PyDOMHTMLDataListElement_Type);
    PyModule_AddObject(m, "HTMLDataListElement", (PyObject*) &PyDOMHTMLDataListElement_Type);
    Py_INCREF(&PyDOMHTMLCanvasElement_Type);
    PyModule_AddObject(m, "HTMLCanvasElement", (PyObject*) &PyDOMHTMLCanvasElement_Type);
    Py_INCREF(&PyDOMHTMLButtonElement_Type);
    PyModule_AddObject(m, "HTMLButtonElement", (PyObject*) &PyDOMHTMLButtonElement_Type);
    Py_INCREF(&PyDOMHTMLBRElement_Type);
    PyModule_AddObject(m, "HTMLBRElement", (PyObject*) &PyDOMHTMLBRElement_Type);
    Py_INCREF(&PyDOMHTMLBodyElement_Type);
    PyModule_AddObject(m, "HTMLBodyElement", (PyObject*) &PyDOMHTMLBodyElement_Type);
    Py_INCREF(&PyDOMHTMLBlockquoteElement_Type);
    PyModule_AddObject(m, "HTMLBlockquoteElement", (PyObject*) &PyDOMHTMLBlockquoteElement_Type);
    Py_INCREF(&PyDOMHTMLBaseFontElement_Type);
    PyModule_AddObject(m, "HTMLBaseFontElement", (PyObject*) &PyDOMHTMLBaseFontElement_Type);
    Py_INCREF(&PyDOMHTMLBaseElement_Type);
    PyModule_AddObject(m, "HTMLBaseElement", (PyObject*) &PyDOMHTMLBaseElement_Type);
    Py_INCREF(&PyDOMHTMLAreaElement_Type);
    PyModule_AddObject(m, "HTMLAreaElement", (PyObject*) &PyDOMHTMLAreaElement_Type);
    Py_INCREF(&PyDOMHTMLAppletElement_Type);
    PyModule_AddObject(m, "HTMLAppletElement", (PyObject*) &PyDOMHTMLAppletElement_Type);
    Py_INCREF(&PyDOMHTMLAnchorElement_Type);
    PyModule_AddObject(m, "HTMLAnchorElement", (PyObject*) &PyDOMHTMLAnchorElement_Type);
    Py_INCREF(&PyDOMHTMLEmbedElement_Type);
    PyModule_AddObject(m, "HTMLEmbedElement", (PyObject*) &PyDOMHTMLEmbedElement_Type);
    Py_INCREF(&PyDOMHTMLFieldSetElement_Type);
    PyModule_AddObject(m, "HTMLFieldSetElement", (PyObject*) &PyDOMHTMLFieldSetElement_Type);
    Py_INCREF(&PyDOMHTMLFontElement_Type);
    PyModule_AddObject(m, "HTMLFontElement", (PyObject*) &PyDOMHTMLFontElement_Type);
    Py_INCREF(&PyDOMHTMLFormElement_Type);
    PyModule_AddObject(m, "HTMLFormElement", (PyObject*) &PyDOMHTMLFormElement_Type);
    Py_INCREF(&PyDOMHTMLFrameElement_Type);
    PyModule_AddObject(m, "HTMLFrameElement", (PyObject*) &PyDOMHTMLFrameElement_Type);
    Py_INCREF(&PyDOMHTMLFrameSetElement_Type);
    PyModule_AddObject(m, "HTMLFrameSetElement", (PyObject*) &PyDOMHTMLFrameSetElement_Type);
    Py_INCREF(&PyDOMHTMLHeadElement_Type);
    PyModule_AddObject(m, "HTMLHeadElement", (PyObject*) &PyDOMHTMLHeadElement_Type);
    Py_INCREF(&PyDOMHTMLHeadingElement_Type);
    PyModule_AddObject(m, "HTMLHeadingElement", (PyObject*) &PyDOMHTMLHeadingElement_Type);
    Py_INCREF(&PyDOMHTMLHRElement_Type);
    PyModule_AddObject(m, "HTMLHRElement", (PyObject*) &PyDOMHTMLHRElement_Type);
    Py_INCREF(&PyDOMHTMLHtmlElement_Type);
    PyModule_AddObject(m, "HTMLHtmlElement", (PyObject*) &PyDOMHTMLHtmlElement_Type);
    Py_INCREF(&PyDOMHTMLIFrameElement_Type);
    PyModule_AddObject(m, "HTMLIFrameElement", (PyObject*) &PyDOMHTMLIFrameElement_Type);
    Py_INCREF(&PyDOMHTMLImageElement_Type);
    PyModule_AddObject(m, "HTMLImageElement", (PyObject*) &PyDOMHTMLImageElement_Type);
    Py_INCREF(&PyDOMHTMLInputElement_Type);
    PyModule_AddObject(m, "HTMLInputElement", (PyObject*) &PyDOMHTMLInputElement_Type);
    Py_INCREF(&PyDOMHTMLIsIndexElement_Type);
    PyModule_AddObject(m, "HTMLIsIndexElement", (PyObject*) &PyDOMHTMLIsIndexElement_Type);
    Py_INCREF(&PyDOMHTMLLabelElement_Type);
    PyModule_AddObject(m, "HTMLLabelElement", (PyObject*) &PyDOMHTMLLabelElement_Type);
    Py_INCREF(&PyDOMHTMLLegendElement_Type);
    PyModule_AddObject(m, "HTMLLegendElement", (PyObject*) &PyDOMHTMLLegendElement_Type);
    Py_INCREF(&PyDOMHTMLLIElement_Type);
    PyModule_AddObject(m, "HTMLLIElement", (PyObject*) &PyDOMHTMLLIElement_Type);
    Py_INCREF(&PyDOMHTMLLinkElement_Type);
    PyModule_AddObject(m, "HTMLLinkElement", (PyObject*) &PyDOMHTMLLinkElement_Type);
    Py_INCREF(&PyDOMHTMLMapElement_Type);
    PyModule_AddObject(m, "HTMLMapElement", (PyObject*) &PyDOMHTMLMapElement_Type);
    Py_INCREF(&PyDOMHTMLMarqueeElement_Type);
    PyModule_AddObject(m, "HTMLMarqueeElement", (PyObject*) &PyDOMHTMLMarqueeElement_Type);
    Py_INCREF(&PyDOMHTMLMediaElement_Type);
    PyModule_AddObject(m, "HTMLMediaElement", (PyObject*) &PyDOMHTMLMediaElement_Type);
    Py_INCREF(&PyDOMHTMLAudioElement_Type);
    PyModule_AddObject(m, "HTMLAudioElement", (PyObject*) &PyDOMHTMLAudioElement_Type);
    Py_INCREF(&PyDOMHTMLMenuElement_Type);
    PyModule_AddObject(m, "HTMLMenuElement", (PyObject*) &PyDOMHTMLMenuElement_Type);
    Py_INCREF(&PyDOMHTMLMetaElement_Type);
    PyModule_AddObject(m, "HTMLMetaElement", (PyObject*) &PyDOMHTMLMetaElement_Type);
    Py_INCREF(&PyDOMHTMLModElement_Type);
    PyModule_AddObject(m, "HTMLModElement", (PyObject*) &PyDOMHTMLModElement_Type);
    Py_INCREF(&PyDOMHTMLObjectElement_Type);
    PyModule_AddObject(m, "HTMLObjectElement", (PyObject*) &PyDOMHTMLObjectElement_Type);
    Py_INCREF(&PyDOMHTMLOListElement_Type);
    PyModule_AddObject(m, "HTMLOListElement", (PyObject*) &PyDOMHTMLOListElement_Type);
    Py_INCREF(&PyDOMHTMLOptGroupElement_Type);
    PyModule_AddObject(m, "HTMLOptGroupElement", (PyObject*) &PyDOMHTMLOptGroupElement_Type);
    Py_INCREF(&PyDOMHTMLOptionElement_Type);
    PyModule_AddObject(m, "HTMLOptionElement", (PyObject*) &PyDOMHTMLOptionElement_Type);
    Py_INCREF(&PyDOMHTMLOptionsCollection_Type);
    PyModule_AddObject(m, "HTMLOptionsCollection", (PyObject*) &PyDOMHTMLOptionsCollection_Type);
    Py_INCREF(&PyDOMHTMLParagraphElement_Type);
    PyModule_AddObject(m, "HTMLParagraphElement", (PyObject*) &PyDOMHTMLParagraphElement_Type);
    Py_INCREF(&PyDOMHTMLParamElement_Type);
    PyModule_AddObject(m, "HTMLParamElement", (PyObject*) &PyDOMHTMLParamElement_Type);
    Py_INCREF(&PyDOMHTMLPreElement_Type);
    PyModule_AddObject(m, "HTMLPreElement", (PyObject*) &PyDOMHTMLPreElement_Type);
    Py_INCREF(&PyDOMHTMLProgressElement_Type);
    PyModule_AddObject(m, "HTMLProgressElement", (PyObject*) &PyDOMHTMLProgressElement_Type);
    Py_INCREF(&PyDOMHTMLQuoteElement_Type);
    PyModule_AddObject(m, "HTMLQuoteElement", (PyObject*) &PyDOMHTMLQuoteElement_Type);
    Py_INCREF(&PyDOMHTMLScriptElement_Type);
    PyModule_AddObject(m, "HTMLScriptElement", (PyObject*) &PyDOMHTMLScriptElement_Type);
    Py_INCREF(&PyDOMHTMLSelectElement_Type);
    PyModule_AddObject(m, "HTMLSelectElement", (PyObject*) &PyDOMHTMLSelectElement_Type);
    Py_INCREF(&PyDOMHTMLSourceElement_Type);
    PyModule_AddObject(m, "HTMLSourceElement", (PyObject*) &PyDOMHTMLSourceElement_Type);
    Py_INCREF(&PyDOMHTMLStyleElement_Type);
    PyModule_AddObject(m, "HTMLStyleElement", (PyObject*) &PyDOMHTMLStyleElement_Type);
    Py_INCREF(&PyDOMHTMLTableCaptionElement_Type);
    PyModule_AddObject(m, "HTMLTableCaptionElement", (PyObject*) &PyDOMHTMLTableCaptionElement_Type);
    Py_INCREF(&PyDOMHTMLTableCellElement_Type);
    PyModule_AddObject(m, "HTMLTableCellElement", (PyObject*) &PyDOMHTMLTableCellElement_Type);
    Py_INCREF(&PyDOMHTMLTableColElement_Type);
    PyModule_AddObject(m, "HTMLTableColElement", (PyObject*) &PyDOMHTMLTableColElement_Type);
    Py_INCREF(&PyDOMHTMLTableElement_Type);
    PyModule_AddObject(m, "HTMLTableElement", (PyObject*) &PyDOMHTMLTableElement_Type);
    Py_INCREF(&PyDOMHTMLTableRowElement_Type);
    PyModule_AddObject(m, "HTMLTableRowElement", (PyObject*) &PyDOMHTMLTableRowElement_Type);
    Py_INCREF(&PyDOMHTMLTableSectionElement_Type);
    PyModule_AddObject(m, "HTMLTableSectionElement", (PyObject*) &PyDOMHTMLTableSectionElement_Type);
    Py_INCREF(&PyDOMHTMLTextAreaElement_Type);
    PyModule_AddObject(m, "HTMLTextAreaElement", (PyObject*) &PyDOMHTMLTextAreaElement_Type);
    Py_INCREF(&PyDOMHTMLTitleElement_Type);
    PyModule_AddObject(m, "HTMLTitleElement", (PyObject*) &PyDOMHTMLTitleElement_Type);
    Py_INCREF(&PyDOMHTMLUListElement_Type);
    PyModule_AddObject(m, "HTMLUListElement", (PyObject*) &PyDOMHTMLUListElement_Type);
    Py_INCREF(&PyDOMHTMLVideoElement_Type);
    PyModule_AddObject(m, "HTMLVideoElement", (PyObject*) &PyDOMHTMLVideoElement_Type);
    Py_INCREF(&PyDOMImageData_Type);
    PyModule_AddObject(m, "ImageData", (PyObject*) &PyDOMImageData_Type);
    Py_INCREF(&PyDOMMediaError_Type);
    PyModule_AddObject(m, "MediaError", (PyObject*) &PyDOMMediaError_Type);
    Py_INCREF(&PyDOMTextMetrics_Type);
    PyModule_AddObject(m, "TextMetrics", (PyObject*) &PyDOMTextMetrics_Type);
    Py_INCREF(&PyDOMTimeRanges_Type);
    PyModule_AddObject(m, "TimeRanges", (PyObject*) &PyDOMTimeRanges_Type);
    Py_INCREF(&PyDOMValidityState_Type);
    PyModule_AddObject(m, "ValidityState", (PyObject*) &PyDOMValidityState_Type);
    Py_INCREF(&PyDOMVoidCallback_Type);
    PyModule_AddObject(m, "VoidCallback", (PyObject*) &PyDOMVoidCallback_Type);
    Py_INCREF(&PyDOMXMLHttpRequestException_Type);
    PyModule_AddObject(m, "XMLHttpRequestException", (PyObject*) &PyDOMXMLHttpRequestException_Type);
    Py_INCREF(&PyDOMXMLHttpRequest_Type);
    PyModule_AddObject(m, "XMLHttpRequest", (PyObject*) &PyDOMXMLHttpRequest_Type);
    Py_INCREF(&PyDOMXMLHttpRequestProgressEvent_Type);
    PyModule_AddObject(m, "XMLHttpRequestProgressEvent", (PyObject*) &PyDOMXMLHttpRequestProgressEvent_Type);
    Py_INCREF(&PyDOMXMLHttpRequestUpload_Type);
    PyModule_AddObject(m, "XMLHttpRequestUpload", (PyObject*) &PyDOMXMLHttpRequestUpload_Type);
    Py_INCREF(&PyDOMBarInfo_Type);
    PyModule_AddObject(m, "BarInfo", (PyObject*) &PyDOMBarInfo_Type);
    Py_INCREF(&PyDOMCoordinates_Type);
    PyModule_AddObject(m, "Coordinates", (PyObject*) &PyDOMCoordinates_Type);
    Py_INCREF(&PyDOMDOMSelection_Type);
    PyModule_AddObject(m, "DOMSelection", (PyObject*) &PyDOMDOMSelection_Type);
    Py_INCREF(&PyDOMDOMWindow_Type);
    PyModule_AddObject(m, "DOMWindow", (PyObject*) &PyDOMDOMWindow_Type);
    Py_INCREF(&PyDOMEventSource_Type);
    PyModule_AddObject(m, "EventSource", (PyObject*) &PyDOMEventSource_Type);
    Py_INCREF(&PyDOMGeolocation_Type);
    PyModule_AddObject(m, "Geolocation", (PyObject*) &PyDOMGeolocation_Type);
    Py_INCREF(&PyDOMGeoposition_Type);
    PyModule_AddObject(m, "Geoposition", (PyObject*) &PyDOMGeoposition_Type);
    Py_INCREF(&PyDOMHistory_Type);
    PyModule_AddObject(m, "History", (PyObject*) &PyDOMHistory_Type);
    Py_INCREF(&PyDOMLocation_Type);
    PyModule_AddObject(m, "Location", (PyObject*) &PyDOMLocation_Type);
    Py_INCREF(&PyDOMNavigator_Type);
    PyModule_AddObject(m, "Navigator", (PyObject*) &PyDOMNavigator_Type);
    Py_INCREF(&PyDOMPositionError_Type);
    PyModule_AddObject(m, "PositionError", (PyObject*) &PyDOMPositionError_Type);
    Py_INCREF(&PyDOMScreen_Type);
    PyModule_AddObject(m, "Screen", (PyObject*) &PyDOMScreen_Type);
    Py_INCREF(&PyDOMWebKitPoint_Type);
    PyModule_AddObject(m, "WebKitPoint", (PyObject*) &PyDOMWebKitPoint_Type);
    Py_INCREF(&PyDOMWorkerNavigator_Type);
    PyModule_AddObject(m, "WorkerNavigator", (PyObject*) &PyDOMWorkerNavigator_Type);
    Py_INCREF(&PyDOMCounter_Type);
    PyModule_AddObject(m, "Counter", (PyObject*) &PyDOMCounter_Type);
    Py_INCREF(&PyDOMCSSRule_Type);
    PyModule_AddObject(m, "CSSRule", (PyObject*) &PyDOMCSSRule_Type);
    Py_INCREF(&PyDOMCSSPageRule_Type);
    PyModule_AddObject(m, "CSSPageRule", (PyObject*) &PyDOMCSSPageRule_Type);
    Py_INCREF(&PyDOMCSSMediaRule_Type);
    PyModule_AddObject(m, "CSSMediaRule", (PyObject*) &PyDOMCSSMediaRule_Type);
    Py_INCREF(&PyDOMCSSImportRule_Type);
    PyModule_AddObject(m, "CSSImportRule", (PyObject*) &PyDOMCSSImportRule_Type);
    Py_INCREF(&PyDOMCSSFontFaceRule_Type);
    PyModule_AddObject(m, "CSSFontFaceRule", (PyObject*) &PyDOMCSSFontFaceRule_Type);
    Py_INCREF(&PyDOMCSSCharsetRule_Type);
    PyModule_AddObject(m, "CSSCharsetRule", (PyObject*) &PyDOMCSSCharsetRule_Type);
    Py_INCREF(&PyDOMCSSRuleList_Type);
    PyModule_AddObject(m, "CSSRuleList", (PyObject*) &PyDOMCSSRuleList_Type);
    Py_INCREF(&PyDOMCSSStyleDeclaration_Type);
    PyModule_AddObject(m, "CSSStyleDeclaration", (PyObject*) &PyDOMCSSStyleDeclaration_Type);
    Py_INCREF(&PyDOMCSSStyleRule_Type);
    PyModule_AddObject(m, "CSSStyleRule", (PyObject*) &PyDOMCSSStyleRule_Type);
    Py_INCREF(&PyDOMCSSUnknownRule_Type);
    PyModule_AddObject(m, "CSSUnknownRule", (PyObject*) &PyDOMCSSUnknownRule_Type);
    Py_INCREF(&PyDOMCSSValue_Type);
    PyModule_AddObject(m, "CSSValue", (PyObject*) &PyDOMCSSValue_Type);
    Py_INCREF(&PyDOMCSSPrimitiveValue_Type);
    PyModule_AddObject(m, "CSSPrimitiveValue", (PyObject*) &PyDOMCSSPrimitiveValue_Type);
    Py_INCREF(&PyDOMCSSValueList_Type);
    PyModule_AddObject(m, "CSSValueList", (PyObject*) &PyDOMCSSValueList_Type);
    Py_INCREF(&PyDOMMediaList_Type);
    PyModule_AddObject(m, "MediaList", (PyObject*) &PyDOMMediaList_Type);
    Py_INCREF(&PyDOMRect_Type);
    PyModule_AddObject(m, "Rect", (PyObject*) &PyDOMRect_Type);
    Py_INCREF(&PyDOMRGBColor_Type);
    PyModule_AddObject(m, "RGBColor", (PyObject*) &PyDOMRGBColor_Type);
    Py_INCREF(&PyDOMStyleMedia_Type);
    PyModule_AddObject(m, "StyleMedia", (PyObject*) &PyDOMStyleMedia_Type);
    Py_INCREF(&PyDOMStyleSheet_Type);
    PyModule_AddObject(m, "StyleSheet", (PyObject*) &PyDOMStyleSheet_Type);
    Py_INCREF(&PyDOMCSSStyleSheet_Type);
    PyModule_AddObject(m, "CSSStyleSheet", (PyObject*) &PyDOMCSSStyleSheet_Type);
    Py_INCREF(&PyDOMStyleSheetList_Type);
    PyModule_AddObject(m, "StyleSheetList", (PyObject*) &PyDOMStyleSheetList_Type);
    Py_INCREF(&PyDOMWebKitCSSKeyframeRule_Type);
    PyModule_AddObject(m, "WebKitCSSKeyframeRule", (PyObject*) &PyDOMWebKitCSSKeyframeRule_Type);
    Py_INCREF(&PyDOMWebKitCSSKeyframesRule_Type);
    PyModule_AddObject(m, "WebKitCSSKeyframesRule", (PyObject*) &PyDOMWebKitCSSKeyframesRule_Type);
    Py_INCREF(&PyDOMWebKitCSSMatrix_Type);
    PyModule_AddObject(m, "WebKitCSSMatrix", (PyObject*) &PyDOMWebKitCSSMatrix_Type);
    Py_INCREF(&PyDOMWebKitCSSTransformValue_Type);
    PyModule_AddObject(m, "WebKitCSSTransformValue", (PyObject*) &PyDOMWebKitCSSTransformValue_Type);
    Py_INCREF(&PyDOMStorageEvent_Type);
    PyModule_AddObject(m, "StorageEvent", (PyObject*) &PyDOMStorageEvent_Type);
}


PyObject *toPythonFromDocumentPtr(gpointer ptr)
{
    WebCore::Document *doc = static_cast<WebCore::Document*>(ptr);
    return WebKit::toPython(doc);
}

PyObject *toPythonFromDOMWindowPtr(gpointer ptr)
{
    WebCore::DOMWindow *win = static_cast<WebCore::DOMWindow*>(ptr);
    return WebKit::toPython(win);
}

PyObject *toPythonFromXMLHttpRequestPtr(gpointer ptr)
{
    WebCore::XMLHttpRequest *xhr = static_cast<WebCore::XMLHttpRequest*>(ptr);
    return WebKit::toPython(xhr);
}

void webkit_init_pywebkit(PyObject *m, struct pyjoinapi *fns)
{
    fns->xhr = toPythonFromXMLHttpRequestPtr;
    fns->doc = toPythonFromDocumentPtr;
    fns->win = toPythonFromDOMWindowPtr;

    typedeclpywebkit();
    registerpywebkit(m);

    if (PyErr_Occurred ()) {
        PyErr_Print();
        Py_FatalError ("can't initialise module pywebkit.so");
    }
}
}; // extern "C"
